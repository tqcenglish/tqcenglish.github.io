<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>句子</title>
      <link href="/2020/04/11/Project-juzi/"/>
      <url>/2020/04/11/Project-juzi/</url>
      <content type="html"><![CDATA[<h1 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h1><p>中文文化博大精深，在普通的句子中我们能获取的无穷的前进力量.<br><img src="https://raw.githubusercontent.com/tqcenglish/tqcenglish.github.io/write/source/_posts/Project/imgs/juzi.png" alt="句子APP"> 是一个无需网络的简单 app. 希望能在未来的生活中激励你，陪伴你。<br>如果有任何疑问请联系 <a href="mailto:tqcenglish@gmail.com" target="_blank" rel="noopener">tqcenglish@gmail.com</a></p>]]></content>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript</title>
      <link href="/2020/03/16/Node-JavaScript/"/>
      <url>/2020/03/16/Node-JavaScript/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><p>通过 object.keys() 可以容易将 map 的键构建一个新的数组。在循环中可以避免调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hasOwnProperty()</span><br></pre></td></tr></table></figure></p><p>判断是否是当前对象的属性。</p><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var let const"></a>var let const</h2><p>var 没有块作用域限制，对变量的声明周期容易困惑。<br><strong>坚持使用新关键字声明变量</strong></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>对 this 的处理更好</li></ul><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><p>使用模版字符串可以更容易的拼接需要的字符串格式。</p><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>参数使用 … 传递，可以在函数内部得到一个参数数组。<br>也可以在传递参数时通过 … 解开参数</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>通过关键字 class 在原型基础上实现 oo。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>sails</title>
      <link href="/2020/03/16/Node-Sails-Policies/"/>
      <url>/2020/03/16/Node-Sails-Policies/</url>
      <content type="html"><![CDATA[<p><a href="http://www.sailsjs.org/#!/documentation/concepts/Policies" target="_blank" rel="noopener">原文链接</a></p><h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>Policies在Sails中作为授权和访问控制的通用工具.它让你可以去在粒度基本上控制允许或拒绝访问你的控制器。例如，如果你建立了一个Dropbox,在让用户上传文件到文件夹前，你需要检查用户是否认证，是否有写文件的权限，最后你要去检查用户上传内容的文件夹是否有足够的空间。</p><p>Policies可以用于任何方面:HTTP基本认证,第三方程序单点登录， OAuth 2.0, 自定义授权/认证方案。</p><p><strong>Policies只能用于控制器而不能用于视图。如果你在routes.js配置文件中定义了一个路由去直接指向视图，将没有Policies会起作用。为了确信policies是可用的，你可以定义一个控制器去显示试图并在路由中配置action</strong></p><h2 id="实现你的第一个Policy"><a href="#实现你的第一个Policy" class="headerlink" title="实现你的第一个Policy"></a>实现你的第一个Policy</h2><p>Policies是定义在你的Sails程序的api/policies文件夹下的文件。每一个policy文件应该包含一个函数。</p><p>当运行时，policies是在控制器前运行的中间件功能。你可以将中间件串联在一起使用,这也是被设计为这样使用。每一个中间件应该只完成一个功能。</p><p>例如，象上面提到的可写权限策略。</p><p>  //policies/canWrite.js<br>  module.exports = function canWrite (req, res, next){<br>  var targetFolderId = req.param(‘id’);<br>  var userId = req.session.user.id;<br>  Permission<br>  .findOneByFolderId(targetFolderId)<br>  .exec( function foundPermission (err, permission) {<br>    //Unexpected error occurred – skip to the app’s default error(500) handler<br>    if(err) return next(err);<br>    //No permission exists linking this user to this folder. Maybe they got removed from it? Maybe they never had permission in the first place? Who cares?<br>    if(!permission) return res.redirect(‘/notAllowed’);<br>    //Ok, so a permission was found. Let’s be sure it’s a  “write”<br>    if(permission.type !== ‘write’) return res.redirect(‘/notAllowed’);<br>    //If we made it all the awy down here, looks like everything’s ok. so we’ll let the user through<br>    next();<br>    });<br>  };</p><p>##用Policies去保护控制器<br>Sails有内建一个ACL(访问控制表)位于config/policies.js文件。这个文件用于映射policies到你的控制器。</p><p>这个文件是声明，它描述了你的应用权限应该是什么，并不描述它是如何实现。这使得新开发者更容易的去理解发生了什么事。另外让你的应用更灵活因为你的要求是不可避免的不断改变。</p><p>你的config/policies.js文件应该导出一个Javascript对象，它的键名是控制器的名称(或’*’用于全部的policies).它的值是对象映射的操作名称和一个或多个policies.看下面获取更详细的说明和例子说明。</p><p>###应用一个policy到指定的控制器操作</p><p>  {<br>    ProfileController:{<br>      //Apply the ‘isLoggedIn’ policy to the ‘edit’ action of ‘ProfileController’<br>      edit:’isLoggedIn’<br>      //Apply the ‘isAdmin’ And ‘isLoggedIn’ policies , in the order, to the ‘create’ action<br>      create:[isAdmin’, ‘isLoggedIn’]<br>    }</p><p>  }</p><p>###应用一个policy到整个控制器</p><p>  {<br>    ProfileController:{<br>    //Apply ‘isLogged’ in by default to all actions that are Not specied below<br>    ‘*’: ‘isLoggedIn’,<br>    //If an action is explicitly listed, its policy list will override the default list<br>    //So, we have to list ‘isLoggedIn’ again for the ‘edit’ action if we want it to be applied<br>    edit: [‘isAdmin’, ‘isLoggedIn’]<br>  }</p><p><strong>默认的策略映射不会”cascade”或”trickle down”, 对于控制器的操作指定的策略映射会覆盖默认的映射</strong></p><blockquote><p>这是一般 Sails 关于权限控制的官方文档翻译。 后面再说吧。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>线程</title>
      <link href="/2020/03/16/Vue-%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/03/16/Vue-%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="进程-线程"><a href="#进程-线程" class="headerlink" title="进程/线程"></a>进程/线程</h1><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁发生在一个服务器和客服端同时向一个连接读或写</p><ul><li>send 和 recv交叉进行</li><li>连续send发送的数据不能太大</li><li>多线程</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>TCP IP</title>
      <link href="/2020/03/16/Vue-TCP-IP/"/>
      <url>/2020/03/16/Vue-TCP-IP/</url>
      <content type="html"><![CDATA[<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><h2 id="TCP基础"><a href="#TCP基础" class="headerlink" title="TCP基础"></a>TCP基础</h2><p>Internet是在一些共享的线路上发送数据，为实现共享，TCP是通过把需要发送的数据流分解为很多的小信息包在Internet上传输,而这些信息包在接受者的地方会再次重新合成在一起，因为信息包很小，会用很少的时间发送数据，从而其他程序的信息包可以同时传送。</p><h3 id="寻址-每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。"><a href="#寻址-每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。" class="headerlink" title="寻址:每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。"></a>寻址:每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。</h3><p>TCP是可靠的协议，通过几个规则来实现：</p><ul><li>防止数据在传输过程中被损坏， 每个信息包都包含一个校验码.</li><li>防止信息包丢失，TCP会要求接受方每收到一个信息包都要反馈一下， 否则自动重发。</li><li>防止信息包重复和顺序出错，TCP每传送一个信息不都会传送一个序号。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在Internet上负责接收信息包并决定如何把他们传送到目的地的设备叫路由器。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>SSL,TLS。SSL是在TCP上连接的，与程序代码混合在一起。提供服务器的认证，加密，数据完整性。TLS只包含在协议堆栈中。</p><h3 id="S-C"><a href="#S-C" class="headerlink" title="S/C"></a>S/C</h3><p>客服端总是最开始连接的一端，服务器是等待客服端连接的一端</p><h3 id="端口列表"><a href="#端口列表" class="headerlink" title="端口列表"></a>端口列表</h3><p>/etc/services, 最大端口：65535， Linux系统请求小于1024的端口需要root</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>只保证收到的数据是完整的，不保证数据是否收到，是否只有一次， 次序是否一致。UDP长用在向服务器申请一个bite的数据,如果没有收到就继续申请。（DNS系统， 音频， 视频， 网络文件系统）.UDP限制一个信息包不能超过64ＫＢ.</p><p>软件通过检查源计算机和目的计算机的ＩＰ地址的头几位判断是本地还是远程。<br>服务器需要通过事先知道的端口来监听连接， 当客服端发起连接时，它的操作系统会选择一个事先不知道的端口号建立socket需要两部：</p><p>1.建立一个socket对象,通信类型(IPv4, IPv6, IPX/SPX, AFP)和协议家族(定义数据如何传输， SOCK_STREAM, SOCK_DGRAM)例如：s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   ipv4,tcp</p><p>2.连接到远程的服务器上s.connect((‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">www.example.com&#39;</a>, 80))    need a tuple<br>    C语言的connect()函数需要远程机器的ip地址， Python会利用DNS把域名自动的转换为IP地址<br>    Python的socket库包含一个getservbyname()的函数， 他可以自动查询,需要两个参数端口名和协议名</p><pre><code>port = socket.getservbyname(&apos;ftp&apos;,&apos;tcp&apos;)socketIml.getsockname() 得到本身的ip地址和端口号socketIml.getpeername()    得到远程的ip地址和端口号</code></pre><h3 id="socket对象和文件对象的比较"><a href="#socket对象和文件对象的比较" class="headerlink" title="socket对象和文件对象的比较"></a>socket对象和文件对象的比较</h3><ul><li>socket对象:读写数据时，需要协议可以详细地控制，使用二进制协议传送固定大小数据，数据超时需要处理，ＵＤＰ</li><li>文件对象: 面向线性的协议，一般只对TCP连接工作很好</li></ul><p>数据只有在调用了shutdown()函数后才能确保被发送,创建文件对象时如果指定了缓冲区，就需要调用flush(),即使有了文件对象也要保存socket对象，shutdown()只有socket对象才有.不同协议(TCP,UDP)可以使用相同的端口. recvfrom()调用返回一个tuple, 包括接受的数据和发送数据的地址,一个服务器进程终止后，操作系统会保留几分钟他的端口，防止其他的进程在超时前使用这个端口。</p><p>SO_REUSEADDR为true,会立刻释放端口不同平台的Pytho支持的socket选项不同。通过dir(socket)查看bind()第一个参数为空，表示绑定所有的接口和地址syslog优先权</p><pre><code>LOG_EMERG 紧急情况，系统非正常关机或不能用LOG_ALERT 向管理员发送警报LOG_CRIT  产生了一个致命错误LOG_ERR      产生了一个普通错误LOG_WARNING 一个警告LOG_NOTICE 重要的正常通知LOG_INFO 普通信息L0G_DEBUG 调试信息</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>File</title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81/</url>
      <content type="html"><![CDATA[<h1 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h1><p>在多台电脑直接文件传送的方式主要包括移动存储和网络.由于 fat32 格式的限制不能存储超过 4g 的文件，当需要在两台电脑直接进行复制时有两种方式.</p><ol><li>对移动存储格式化为非 fat32 的格式.</li><li>通过局域网络传送.</li></ol><h2 id="局域网文件传送"><a href="#局域网文件传送" class="headerlink" title="局域网文件传送"></a>局域网文件传送</h2><p>将多台电脑连接在相同的局域网是一件简单的事情, 然后对于传送软件可以有如下选择:</p><ol><li>scp 主要针对 Linux 系统.</li><li>建立一个简单的 Http 服务器, 然后通过网络打开对应页面后进行下载. 对于不同的编程语言大多有一句命令实现 http 服务器的方式。 Node.js 可以直接通过如下命令安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure><p>然后运行到需要下载的页面运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure><p>就可以了。</p><ol start="3"><li>利用 QQ 等其它软件.<a href="https://github.com/RobinLinus/snapdrop" target="_blank" rel="noopener">snapdrop</a> 是一种类似 AirDrop 的局域网传送,不需要安装任何软件。</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-http-XSS/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-http-XSS/</url>
      <content type="html"><![CDATA[<p>title:XSS<br>date:2018-09-26<br>tags:http, xss</p><hr><p>XSS，即 Cross Site Script，中译是跨站脚本攻击。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting" target="_blank" rel="noopener">跨站脚本攻击(Cross-site scripting)</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html" target="_blank" rel="noopener">CSRF 攻击的应对之道</a></li><li><a href="https://github.com/dwqs/blog/issues/68" target="_blank" rel="noopener">浅说 XSS 和 CSRF</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>DNS</title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-DNS/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-DNS/</url>
      <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><ul><li>DNS是一个全球分布式数据库</li><li>操作系统先查询/etc/hosts/， 然后去DNS查询</li><li>操作系统提供一个方法为名称服务器(DNS服务器)指定IP地址  /etc/resolv.conf</li><li>Python定义socket.getaddrinfo()返回一个tuple的list, 根据所支持的不同协议产生一个结果<br>  host is a simple utility for performing DNS lookups 对于一个IP地址，完全可能不存在反向的映射。反向查找时需要捕获socket.herror()异常,反向查询存在欺骗，由于ＤＮＳ信息的授权方式，反向查询的授权是基于ＩＰ地址的.先反向再正向，确定结果</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>C# 语法</title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-C-%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-C-%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul><li>文件名可以与类名称不同</li><li>MSDN 教程</li></ul>]]></content>
      
      
        <tags>
            
            <tag> .Net C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TODO</title>
      <link href="/2018/10/23/%E5%85%B6%E4%BB%96-odoo/"/>
      <url>/2018/10/23/%E5%85%B6%E4%BB%96-odoo/</url>
      <content type="html"><![CDATA[<p>模仿网络教程 <a href="https://github.com/ruter/Odoo-Tutorial-Demo/tree/master/todo" target="_blank" rel="noopener">todo</a> 实现一个 odoo 模块。 并画图做详细描述。</p>]]></content>
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP</title>
      <link href="/2018/09/25/%E5%85%B6%E4%BB%96-http-HTTP/"/>
      <url>/2018/09/25/%E5%85%B6%E4%BB%96-http-HTTP/</url>
      <content type="html"><![CDATA[<p>http 协议基于 TCP, 是当前的互联网基石。</p><p><a href="https://github.com/jasonGeng88/blog/blob/master/201705/https.md" target="_blank" rel="noopener">基于此文</a>的理解图</p><p><img src="HTTP.png" alt="mindNode"></p><p><a href="https://legacy.gitbook.com/book/bagder/http2-explained/details" target="_blank" rel="noopener">http2 介绍</a><br><a href="https://github.com/bagder/http3-explained" target="_blank" rel="noopener">http3 介绍</a></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>REST</title>
      <link href="/2018/09/25/%E5%85%B6%E4%BB%96-http-REST/"/>
      <url>/2018/09/25/%E5%85%B6%E4%BB%96-http-REST/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jasonGeng88/blog/blob/master/201706/rest-api.md" target="_blank" rel="noopener">REST API URI 设计的七准则</a></p><p> <img src="REST.png" alt="rest"></p>]]></content>
      
      
        <tags>
            
            <tag> rest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pi 相关项目</title>
      <link href="/2018/09/19/%E5%85%B6%E4%BB%96-%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
      <url>/2018/09/19/%E5%85%B6%E4%BB%96-%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      <content type="html"><![CDATA[<p>树莓派 硬件极客的选择，可以实现一些初步的想法。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>树莓派通过官方网站下载镜像文件，然后通过 DD 命令或其他工具写入 SD 卡。 这里包含两个重要步骤</p><ul><li>设置 wifi 密码</li><li>开启 ssh 登录</li></ul><p>设置 wifi ssh <a href="http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html" target="_blank" rel="noopener">无屏幕和键盘配置树莓派WiFi和SSH</a>sss<br><a href="https://github.com/mozilla-iot/wiki/wiki/Setting-up-Raspberry-Pi" target="_blank" rel="noopener">Setting-up-Raspberry-Pi</a></p><p>不然都把设备插上电源不能远程访问控制还是很崩溃吧。</p><h2 id="有趣的项目"><a href="#有趣的项目" class="headerlink" title="有趣的项目"></a>有趣的项目</h2><ul><li><a href="http://dingdang.hahack.com/" target="_blank" rel="noopener">对话机器人</a></li><li><a href="http://shumeipai.nxez.com/2018/08/12/facial-recognition-identification-on-raspberry-pi.html" target="_blank" rel="noopener">在树莓派上实现人脸识别</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> pi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包</title>
      <link href="/2018/09/18/Vue-%E9%97%AD%E5%8C%85/"/>
      <url>/2018/09/18/Vue-%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.6.html" target="_blank" rel="noopener">闭包</a> golang 闭包访问局部变量会导致局部变量变为堆分配。</p>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序开发</title>
      <link href="/2018/09/16/%E5%85%B6%E4%BB%96-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/16/%E5%85%B6%E4%BB%96-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>微信小程序开发， 基于微信强太的生态。 小程序的开发价值显而易见。 小程序开发资源</p><ul><li><a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">小程序</a></li><li><a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">wepy</a></li></ul><p>小程序可以注册个人账号，不认证的情况下可以体验开发流程。</p><p>调试模式不会对服务器进行验证，线上模式需要。 最好备案。</p>]]></content>
      
      
        <tags>
            
            <tag> mini program </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后端程序员面试题</title>
      <link href="/2018/09/15/Node-%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/09/15/Node-%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>  后端开发面试题 <a href="https://github.com/monklof/Back-End-Developer-Interview-Questions#general" target="_blank" rel="noopener">Back-End-Developer-Interview-Questions</a> 包含了面试中的常见问题，先做个小抄吧. <a href="http://xargin.com/backend-engineer-interview/" target="_blank" rel="noopener">一个不完全的回答</a></p><h2 id="通用问题"><a href="#通用问题" class="headerlink" title="通用问题"></a>通用问题</h2><ul><li><p>语言设计中空引用(null reference)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？</p><p>在 C, Java, go, Js 中使用 <strong>空引用</strong> 对应会出现 断错误, nullpointer Exception, panic, undefined. 出现这些错误时如果没有对异常处理程序会终止工作。  在不同语言中移除的后果</p><ul><li>Js, 在数据初始化时必须制定数据，缺少灵活性。与其他语言对接时会缺少对应的语义。 例如 web 不传参数可以用 null 表示。</li></ul></li><li><p>封装的重要性体现在哪儿？<br>  通过封装可以屏蔽内部实现细节， 让业务开发逻辑清晰。 通用功能封装为模块可以反复使用。 一个成功的语言必然有对应成功的包管理器， 通过包管理引用封装好的模块即减少工作量又更稳定。</p></li><li><p>不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助<br>  不同语言对不变的变量都有对应的关键字。 不变性可解决并发时的读写冲突问题。</p></li><li><p>在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？<br>web 由原来的 jsp 发展到现在的前后端分离再到 next.js 框架的诞生。 客服端渲染由浏览器实现网页的显示。 主要包含了数据的读取等。 服务端渲染是在一个网页请求后 html 就生成完毕。 客服端渲染对客户的电脑配置要求更高，体验更好。 服务端渲染对 seo 更友好。并且加载更快。但是每一次访问都需要重复加载 js/css.</p></li><li><p>当你在浏览器地址栏输入google.com回车之后都发生了什么?<br>首先通过 dns 获取服务器 ip 地址，然后建立 tcp 连接。 在 tcp 连接上进行 http 协议通信。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql</title>
      <link href="/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/"/>
      <url>/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/</url>
      <content type="html"><![CDATA[<p>Mysql 是免费的关系数据库。</p><h2 id="数据库使用的最佳方式"><a href="#数据库使用的最佳方式" class="headerlink" title="数据库使用的最佳方式"></a>数据库使用的最佳方式</h2><ul><li>尽量使用预处理.</li><li>多条记录操作使用批处理.</li><li>不使用外连接</li><li>使用 not exist 替换 not in</li><li>or 不能太多</li><li>更新操作放在事务最后</li><li>少用临时表</li><li>distinct 导致不必要的排序</li></ul><h2 id="数据库优化方式"><a href="#数据库优化方式" class="headerlink" title="数据库优化方式"></a>数据库优化方式</h2><ul><li>show status</li><li>explain</li><li>show profile</li><li>trace</li></ul>]]></content>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mongodb</title>
      <link href="/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mongodb/"/>
      <url>/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mongodb/</url>
      <content type="html"><![CDATA[<p>mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。所有实体都是在首次使用时创建。</p><p>没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。也没有固定的数据模型,mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。</p><p>mongo本身支持集群和数据分片, mongo是c++实现的，支持windows mac linux等主流操作系统. 性能优越，速度快</p>]]></content>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>短网址</title>
      <link href="/2018/09/13/%E5%85%B6%E4%BB%96-%E7%9F%AD%E7%BD%91%E5%9D%80/"/>
      <url>/2018/09/13/%E5%85%B6%E4%BB%96-%E7%9F%AD%E7%BD%91%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>短网址指将长链接转换成易分享的短地址(6位左右)。 <a href="https://segmentfault.com/a/1190000012088345" target="_blank" rel="noopener">短网址(short URL)系统的原理及其实现</a></p><p>主要两种算法</p><ul><li>自增序列算法，将网址写入数据库，然后将记录id 通过 64 进制显示。</li><li>md5后取其中一部分的一系列算法。</li></ul><h2 id="开源实现"><a href="#开源实现" class="headerlink" title="开源实现"></a>开源实现</h2><ul><li><a href="https://github.com/prologic/shorturl" target="_blank" rel="noopener">shorturl</a> </li><li><a href="https://github.com/Youthink/short_url" target="_blank" rel="noopener">short_url</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> net </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内网穿透</title>
      <link href="/2018/09/12/%E5%85%B6%E4%BB%96-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2018/09/12/%E5%85%B6%E4%BB%96-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<p>由于 ipv4 地址总量少， 当前互联网是多个用户使用一个局域网。 在接入公网时候才使用共同的一个公网 IP。 通过 NAT 可以解决 IP 地址稀少的问题。 但是对于在内网中架设 web 服务器需要非局域网用户访问时就需要内网穿透代理。</p><h2 id="内网穿透代理"><a href="#内网穿透代理" class="headerlink" title="内网穿透代理"></a>内网穿透代理</h2><p>当前主要有两种方式 </p><ol><li>通过 vpn 方式将管理设备放在一个局域网中。</li><li>通过 vps 建立中央代理， frp 使用的方式。 在 socket  上代理 http 协议。</li></ol><ul><li><a href="https://www.zerotier.com" target="_blank" rel="noopener">zerotier</a></li><li><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a></li></ul><p>HTTP 内网穿透</p><h2 id="对内网穿透软件进行相关讨论"><a href="#对内网穿透软件进行相关讨论" class="headerlink" title="对内网穿透软件进行相关讨论"></a><a href="https://tkv.io/posts/picojs-intro/" target="_blank" rel="noopener">对内网穿透软件进行相关讨论</a></h2><ol><li>ngrok1.x 存在内存泄漏问题</li><li>localtunel 原理是客户端与服务端建立 socket 连接， 外部请求先到服务端，服务端从建立的 socket 将数据发送到客户端，最后客户端发送数据到绑定的端口。 golang 客户端与js  服务端之间存在不稳定（socket 自动就断了）。</li><li>推荐使用  frp</li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://einverne.github.io/post/2018/06/zerotier.html" target="_blank" rel="noopener">使用 Zerotier 组建虚拟局域网实现内网穿透</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC dial</title>
      <link href="/2018/09/11/%E5%85%B6%E4%BB%96-WebRTC-Dial/"/>
      <url>/2018/09/11/%E5%85%B6%E4%BB%96-WebRTC-Dial/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://github.com/vialer/vialer-js" target="_blank" rel="noopener">vialer-js 源码</a></li><li><a href="https://vialer-js.io" target="_blank" rel="noopener">vialer-js 文档</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 面试</title>
      <link href="/2018/09/09/Node-Node-%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/09/09/Node-Node-%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote><p>面试造火箭，工作拧螺丝</p></blockquote><p>下面是一部分造火箭的步骤，工作上帮助不大。 是否有用自行思考。</p><ul><li><a href="https://changchen.me/blog/20180908/db-index/" target="_blank" rel="noopener">常见的数据库查询索引原理介绍</a>。 索引与存储引擎相关。 看看<a href="https://www.cnblogs.com/weizhixiang/p/5914120.html" target="_blank" rel="noopener">MySql数据库索引原理</a>。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>API Swagger</title>
      <link href="/2018/09/05/Node-API-Swagger/"/>
      <url>/2018/09/05/Node-API-Swagger/</url>
      <content type="html"><![CDATA[<p>Node.js 做服务端越来越流行, 如何提供简单明了的 API。 swagger / Open API 定义参数和响应。</p><p>由于 JS 是动态语言不能像 <a href="https://github.com/springfox/springfox" target="_blank" rel="noopener">stringfox</a> 那样基于注解自动生成。 自定义 yaml 是不可避免的选择。</p><p>参考 <a href="https://github.com/BiteBit/koa-oai-router" target="_blank" rel="noopener">koa-oai-router</a> 实现 koa api 文档化.</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Koa</title>
      <link href="/2018/09/04/Node-Koa/"/>
      <url>/2018/09/04/Node-Koa/</url>
      <content type="html"><![CDATA[<p>Koa 是一个小型，易扩展的 web 框架。 由于源码很少，是一个很好的 web 框架源码研究项目。</p><ul><li><a href="https://github.com/koajs/koa" target="_blank" rel="noopener">koa</a></li><li><a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/koa-vs-express.md" target="_blank" rel="noopener">koa express 比较</a></li><li><a href="https://github.com/koajs/koa/wiki" target="_blank" rel="noopener">koa 相关框架与中间件</a></li><li><a href="https://github.com/demopark/koa-docs-Zh-CN" target="_blank" rel="noopener">中文文档</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">koa 阮一峰</a></li></ul><h2 id="Koa-引用的包"><a href="#Koa-引用的包" class="headerlink" title="Koa 引用的包"></a>Koa 引用的包</h2><p>Koa 本身源代码极少, 可以通过依赖的包了解一个 web 服务器需要考虑的细节. 另外 koa 将常用 http 功能以 koa-* 的方式分割成中间件。</p><ul><li><a href="https://github.com/tj/node-only" target="_blank" rel="noopener">only</a> 将一个对象下划线开始的属性理解为私有，不暴露外部。 类似 loadh 中的 _.pickup</li><li><a href="https://github.com/jshttp/on-finished" target="_blank" rel="noopener">on-finished</a> http req/res 结束时执行。 类似 go defer 关键字。</li><li><a href="https://github.com/jshttp/statuses" target="_blank" rel="noopener">statuses</a> http 响应状态码规范化。</li><li><a href="https://github.com/dougwilson/nodejs-depd" target="_blank" rel="noopener">depd</a> 打印废弃通知(提示用户 api 变动)</li><li><a href="https://github.com/tj/node-delegates" target="_blank" rel="noopener">delegates</a> 原型修改. 将 req/res 方法绑定到 context.</li><li><a href="https://github.com/pillarjs/cookies" target="_blank" rel="noopener">cookies</a> 获取/设置 cookie</li><li><a href="https://github.com/jshttp/accepts" target="_blank" rel="noopener">accepts</a> http 响应类型</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>定义函数名对调试和日志更友善</li><li>koa-compose 用于合并多个中间件</li><li>DEBUG=koa*  开启调试</li><li>错误处理 try-catch -&gt; app.on(‘error’) -&gt;app.onerror</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Egg</title>
      <link href="/2018/09/02/Node-EGG/"/>
      <url>/2018/09/02/Node-EGG/</url>
      <content type="html"><![CDATA[<p>EGG 与 KOA 比较, EGG 基于 KOA, 有更多的 MVC 限制(方便)。 koa 只是基础框架，一个完整的 http 至少包括如下部分</p><ul><li>静态目录挂载 kao-static</li><li>路由请求 koa-router</li><li>参数解析 koa-bodyparser</li></ul><p>另外 EGG 框架支持多进程, 效率更高。</p>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 错误处理</title>
      <link href="/2018/09/02/Node-Node-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/02/Node-Node-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>Node 有多种错误处理方式， 异步与同步使用不同的方式捕获异常。 在写 web 框架时需要保证异常的处理不能出现内存泄漏或者因为单次请求异常导致服务终止。</p><ul><li>try catch, 不能处理 promise 错误</li><li>.catch(), 处理 promise 错误</li></ul><p>Http 服务最重要是即使一个请求导致内部错误，但是服务端不能停止。 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.on(&apos;uncaughtException&apos;, (err) =&gt; &#123;</span><br><span class="line">      console.error(&apos;uncaughtException&apos;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>保持服务器不中断, 另外可以使用 pm2 保活.</p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>assert 两种模式, 建议strict.</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Strapi</title>
      <link href="/2018/09/02/Node-Strapi/"/>
      <url>/2018/09/02/Node-Strapi/</url>
      <content type="html"><![CDATA[<p>自 2015 年开始从 Java (Android) 转 Web(Node.js 前后端), 第一次使用 MVC 框架 Sails。 到现在了解使用 Strapi.</p><p>Sails 是一个全面的 MVC 框架。 在那个时候(2015) 高居 Github 关注前列。 由于缺少经验的原因. Sails 使用中出现如下问题</p><ul><li>ORM 效率低， Waterline 虽然使用方便，但是使用简单的 count 会读取所有数据到内存。 这是完全不能接受。</li><li>内存泄漏, 由于其他原因整个项目是运行在类似树莓派的嵌入式环境下。 当多用户登录会导致内存居高不下。</li></ul><p>为什么又要了解 Strapi 一个与 Sails 类似的框架。</p><ul><li>loopback IBM 推动, 细节更多。 loopback4 完全使用 Spring 注解方式(不喜欢)。</li><li>egg 基于 KOA, 比 KOA 更全面的 WEB 框架。 至少不需要找那么多中间件。</li><li>fastify 直接基于 Node.js. 在 json 序列化和 路由查询方便有特别的优化。 </li></ul><p>上面的框架都很好，但是我需要一个前端更灵活的。 上面框架使用 ant-pro 可以写出高效的 admin 后台。 但是 strapi 有他独特的方式。 我没有使用过老版本直接使用新版本 3.0</p><ul><li>插件化， 前后端插件化。</li><li>CRUD 自动生成, 支持分页/查询/过滤。</li></ul><p>strapi 模块化，基本界面在 admin 目录， 通过 nam run build 打包。 插件界面在对应目录下， 也需要 nam run build 。</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis</title>
      <link href="/2018/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/"/>
      <url>/2018/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://itbilu.com/database/redis/4JoBoVuKb.html" target="_blank" rel="noopener">https://itbilu.com/database/redis/4JoBoVuKb.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS</title>
      <link href="/2018/08/31/Node-JS/"/>
      <url>/2018/08/31/Node-JS/</url>
      <content type="html"><![CDATA[<ul><li><p>生成指定数量的数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(Array(N).keys());</span><br></pre></td></tr></table></figure></li><li><p>IPV6 通过 <strong>[]</strong>包括地址</p></li><li></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CNode 部署</title>
      <link href="/2018/08/25/Node-CNode/"/>
      <url>/2018/08/25/Node-CNode/</url>
      <content type="html"><![CDATA[<p>CNode 是国内基于 node, mongodb, redis, express, ers 技术栈构建的一个论坛程序。 egg-cnode 将 express 替换为 egg.js 框架.</p><h2 id="egg-cnode"><a href="#egg-cnode" class="headerlink" title="egg-cnode"></a><a href="https://github.com/cnodejs/egg-cnode" target="_blank" rel="noopener">egg-cnode</a></h2><p>cnode 论坛的 egg 实现版本， 后端服务由原来的 Express 切换为 Node. 在部署过程中主要安装如下软件。</p><ul><li>redis</li><li>mongoldb</li><li>nvm</li><li>node</li></ul><h2 id="调试模式不发送邮件-多种原因导致"><a href="#调试模式不发送邮件-多种原因导致" class="headerlink" title="调试模式不发送邮件(多种原因导致)"></a>调试模式不发送邮件(多种原因导致)</h2><ul><li>发送邮件被屏蔽</li><li>调试模式下发送邮件直接返回</li><li>163 需要授权码登录</li><li>激活回调地址 config.host 配置</li></ul><p>可以直接修改数据库为激活模式登录</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web Fastify</title>
      <link href="/2018/08/25/Node-Fastify/"/>
      <url>/2018/08/25/Node-Fastify/</url>
      <content type="html"><![CDATA[<p>Web 框架 或 Node.js Web 框架多如牛毛，开始学习 Node.js 时被 MVC 框架 sails 惊叹。 原来 Web 可以如此简单，计划不用写代码就能完成 CRUD。 但是也被 Waterline 的性能问题折磨得痛苦，反复重构。 </p><h2 id="我了解的-node-js-web-框架"><a href="#我了解的-node-js-web-框架" class="headerlink" title="我了解的 node.js web 框架"></a>我了解的 node.js web 框架</h2><ul><li>egg 阿里开源，基于 koa. 根据内核启动多进程， koa 的增强版.</li><li>express, koa 好像都知道了吧。</li><li>strapi 被它的模块设计折服，用于构建收费插件可以参考。 基于 koa.</li><li>sails 预期中的 mvc, orm 有坑.</li></ul><h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><ul><li><a href="https://github.com/fastify/docs-chinese/blob/master/docs/Getting-Started.md" target="_blank" rel="noopener">中文文档</a></li><li>fastify 在路由, json 序列号等方面优化</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cnodejs.org/topic/575f61555e870b5a02066aa8" target="_blank" rel="noopener">web 框架讨论</a><br><a href="http://delved.org/What-if-I-told-you-that-HTTP-can-be-fast/#/34" target="_blank" rel="noopener">fastify ppt1</a><br><a href="https://mcollina.github.io/take-your-http-server-to-ludicrous-speed/#1" target="_blank" rel="noopener">fastify ppt2</a></p>]]></content>
      
      
        <tags>
            
            <tag> javascript Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js 坑</title>
      <link href="/2018/08/25/Node-Node-js-%E5%9D%91/"/>
      <url>/2018/08/25/Node-Node-js-%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>Node 由于其入门简单，语法少广受程序猿欢迎。 但是 Node 本身的缺陷或使用者不熟悉在一下方面会出现一些意料之外的事情。</p><ul><li>不用用于处理复杂任务，如果非做不可。开启多线程模式。</li><li><a href="https://github.com/mcollina/make-promises-safe" target="_blank" rel="noopener">https://github.com/mcollina/make-promises-safe</a> 内存泄露。</li><li>sails orm wterline 查询缓慢。</li><li>koa sttic 中间件浏览器访问不显示目录，实际能正常读取(缺少 index.html)。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> javascript Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器扩展</title>
      <link href="/2018/04/27/Chrome-%E6%89%A9%E5%B1%95-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
      <url>/2018/04/27/Chrome-%E6%89%A9%E5%B1%95-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>油猴脚本对 web 进行简单扩展。 实现自动点击，抢红包，点赞等。<br>如果封装为扩展就有界面交互，更易操作。</p><blockquote><p><a href="http://blog.iderzheng.com/introduction-to-chrome-extension-development/" target="_blank" rel="noopener">Chrome扩展程序开发基础介绍</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Node.js API</title>
      <link href="/2018/04/21/Node-NodeAPI/"/>
      <url>/2018/04/21/Node-NodeAPI/</url>
      <content type="html"><![CDATA[<p>Node API 提供了网络编程，文件读取等。 通过 API 才能将 Node 用于实际业务开发中。 本文记录常使用的 API.</p><p>==</p><p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">API</a> Nodejs 中文 api</p><h1 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h1><p>交换模式下 一旦你开启了这个模块，node 程序将不会终止，直到你关闭接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: fs.createReadStream(<span class="string">'demo.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rl.on(<span class="string">'line'</span>, <span class="keyword">async</span>(line) =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line)</span><br><span class="line">&#125;)</span><br><span class="line">rl.on(<span class="string">'close'</span>, <span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://itbilu.com/nodejs/core/NyIjmp0wZ.html" target="_blank" rel="noopener">Node.js Buffer与JavaScript TypeArray类型数组的异同</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Iot 系统</title>
      <link href="/2018/03/31/%E5%85%B6%E4%BB%96-%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>/2018/03/31/%E5%85%B6%E4%BB%96-%E7%89%A9%E8%81%94%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>iot 系统比较</p><ol><li>android thing</li><li><a href="https://docs.microsoft.com/en-us/windows/iot-core/windows-iot" target="_blank" rel="noopener">windows</a></li><li><a href="https://github.com/mozilla-iot/gateway" target="_blank" rel="noopener">gateway</a> 一个 web 程序，对内连接设备。 对外通过代理在任意地点都能访问。</li></ol><p>iot 相关资源</p><p><a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="noopener">https://github.com/rwaldron/johnny-five</a></p><p>串口</p><p><a href="https://github.com/node-serialport/node-serialport" target="_blank" rel="noopener">https://github.com/node-serialport/node-serialport</a></p><h3 id="Home-assistant-io"><a href="#Home-assistant-io" class="headerlink" title="Home-assistant.io"></a><a href="https://github.com/home-assistant/home-assistant" target="_blank" rel="noopener">Home-assistant.io</a></h3><p>用 python 构建的家庭智能中心 <strong>命令安装会有一个下载过程，需要耐心等待</strong></p>]]></content>
      
      
        <tags>
            
            <tag> pi, iot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>黑苹果</title>
      <link href="/2017/02/02/%E5%85%B6%E4%BB%96-%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
      <url>/2017/02/02/%E5%85%B6%E4%BB%96-%E9%BB%91%E8%8B%B9%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p><strong>如果不喜欢折腾请选择白苹果, 如果预算有限或高性能可以尝试</strong><br>黑苹果安装需要适合的硬件与教程。 下面是此次记录<a href="https://www.tonymacx86.com" target="_blank" rel="noopener">安装教程</a></p><h2 id="出现的问题以及解决方法"><a href="#出现的问题以及解决方法" class="headerlink" title="出现的问题以及解决方法"></a>出现的问题以及解决方法</h2><ol><li>声卡驱动若无对应驱动可以安装最新的万能驱动(可以尝试不同芯片的驱动)。</li><li>不要乱安装显卡驱动会导致不能正常启动。</li><li>不能正常安装时可以先扒出独立显卡。</li><li>四叶草配置注意备份。</li><li><a href="https://www.reddit.com/r/hackintosh/comments/56gbz7/unibeast_701_selected_mac_os_x_installer_is/" target="_blank" rel="noopener">Selected Mac OSX Installer is Incomplete</a></li><li><a href="https://www.tonymacx86.com/threads/how-to-fix-imessage.110471/#TOP3.2" target="_blank" rel="noopener">不能正常登陆苹果账号</a> 更新 DNS</li><li>点击启动项反应慢是由于显卡驱动没正常安装。</li><li>hd4400 显卡不要使用 vga。</li></ol><p>另外苹果系统外接 4k 显示器需要注意自己的机器是否支持 4k@60hz。</p>]]></content>
      
      
        <tags>
            
            <tag> 基本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring</title>
      <link href="/2017/01/16/%E5%85%B6%E4%BB%96-Spring/"/>
      <url>/2017/01/16/%E5%85%B6%E4%BB%96-Spring/</url>
      <content type="html"><![CDATA[<p>Spring 是 Java  MVC 框架等库集合。 利用 Spring boot 可以快速开发应用。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh" target="_blank" rel="noopener">spring boot 中文翻译</a></li><li><a href="https://github.com/netgloo/spring-boot-samples" target="_blank" rel="noopener">spring 例子</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>交叉编译</title>
      <link href="/2017/01/10/%E5%85%B6%E4%BB%96-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/2017/01/10/%E5%85%B6%E4%BB%96-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>go 原声支持交叉编译，但是若代码中包含 c 语言，就需要考虑如下步骤了。</p><h1 id="交叉编译-arm-版本"><a href="#交叉编译-arm-版本" class="headerlink" title="交叉编译 arm 版本"></a>交叉编译 arm 版本</h1><p>若 golang 项目代码中包含 cgo 最好在目标平台编译。 若目标环境不支持需要使用正确的交叉编译工具。 对 arm 平台需要判断对应架构</p><ul><li>soft   : 不用fpu进行浮点计算，即使有fpu浮点运算单元也不用,而是使用软件模式。</li><li>softfp : armel架构(对应的编译器为gcc-arm-linux-gnueabi)采用的默认值，用fpu计算，但是传参数用普通寄存器传，这样中断的时候，只需要保存普通寄存器，中断负荷小，但是参数需要转换成浮点的再计算。</li><li>hard   : armhf架构(对应的编译器gcc-arm-linux-gnueabihf)采用的默认值，用fpu计算，传参数也用fpu中的浮点寄存器传，省去了转换, 性能最好，但是中断负荷高。</li></ul><p><strong>OSX 安装教程编译器很麻烦</strong>, 所以直接在 linux 下编译， 选择正确架构即可。</p>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>golang 库</title>
      <link href="/2016/12/14/Golang-Web/"/>
      <url>/2016/12/14/Golang-Web/</url>
      <content type="html"><![CDATA[<p>Go 语言自带 http 库本身已是很高效，当前 web 库主要分完整的框架或路由库两种。若希望后期完全可控选库可能更好。</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ul><li>Web 框架 gin, golang 在微服务/web 开发都有很多选择。 我选择 gin 因为它功能够全。 当然其他框架也有不同的优势。</li></ul><h1 id="软件库"><a href="#软件库" class="headerlink" title="软件库"></a>软件库</h1><ul><li><p><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm.io</a> Simple and Powerful ORM for Go, support mysql,postgres,tidb,sqlite3,mssql,oracle。 关系数据库 ORM， 现在 WEB 纯手写 SQL 很少了吧。</p></li><li><p><a href="https://github.com/go-macaron/captcha" target="_blank" rel="noopener">captcha</a> macaron 验证码中间件(不适用于 gin)</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node</title>
      <link href="/2016/12/13/Node-Node/"/>
      <url>/2016/12/13/Node-Node/</url>
      <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>生成指定数量的数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(Array(N).keys());</span><br></pre></td></tr></table></figure></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li>const, let 替换 var 。 var 会提升作用域, for 循环慎用.</li><li>模版字符串, 实现字符串格式化/字符串多行显示.</li><li>新加函数: includes, startsWith, endsWith, padStart, padEnd.</li><li>函数默认值. num = num || 2000. 实际值为 0时会出错。</li><li>箭头函数: 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象.</li><li><h2 id="Node-js-配置"><a href="#Node-js-配置" class="headerlink" title="Node.js 配置"></a>Node.js 配置</h2></li><li>代码中常用 <strong><em> process.env.NODE_ENV </em></strong> 判断当前是开发环境, 启动程序时通过如下方式配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> NODE_ENV=development&amp;&amp; nodemon --harmony --use_strict index.js  -w</span><br><span class="line">set NODE_ENV=development&amp;&amp; nodemon --harmony --use_strict index.js  -w</span><br></pre></td></tr></table></figure></li></ul><p>另外参考 <a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener">cross-env</a> 实现跨平台环境变量设置。</p><h2 id="Node-js-学习文档"><a href="#Node-js-学习文档" class="headerlink" title="Node.js 学习文档"></a>Node.js 学习文档</h2><ul><li><a href="https://github.com/nswbmw/node-in-debugging" target="_blank" rel="noopener">Node.js 调试指南</a></li><li><a href="https://github.com/maxogden/art-of-node/blob/master/readme.zh-cn.md" target="_blank" rel="noopener">Node的艺术</a></li><li><a href="http://nikhilm.github.io/uvbook/" target="_blank" rel="noopener">An Introduction to libuv</a></li><li><a href="http://liubin.org/promises-book/#promise-polyfill" target="_blank" rel="noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">awesome-nodejs</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="noopener">ECMAScript® 2015 Language Specification</a></li><li><a href="https://github.com/jabez128/stream-handbook" target="_blank" rel="noopener">nodejs stream 手册</a></li><li><a href="https://github.com/azu/promises-book" target="_blank" rel="noopener">promises-book</a></li><li><a href="https://github.com/maxogden/art-of-node" target="_blank" rel="noopener">art-of-node</a></li><li><a href="https://pugjs.org/zh-cn/api/getting-started.html" target="_blank" rel="noopener">pug 中文</a></li><li><a href="https://github.com/ruanyf/jstraining" target="_blank" rel="noopener">全栈工程师培训材料</a></li></ul><h2 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h2><ul><li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="noopener">RxJava文档中文版</a></li></ul><h2 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></li></ul><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><ul><li><a href="https://javascript30.com/" target="_blank" rel="noopener">javascript30</a></li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><a href="https://github.com/versatica/tryit-jssip" target="_blank" rel="noopener">jssip-demo</a> 官方demo</li></ul><h2 id="Node-编译"><a href="#Node-编译" class="headerlink" title="Node 编译"></a>Node 编译</h2><p><a href="https://github.com/nodejs/node/blob/master/BUILDING.md" target="_blank" rel="noopener">Node 编译</a> </p>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron</title>
      <link href="/2016/11/07/Node-Electron/"/>
      <url>/2016/11/07/Node-Electron/</url>
      <content type="html"><![CDATA[<p><a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron</a> 是桌面端跨平台解决方案。</p><blockquote><p>If you can build a website, you can build a desktop app. Electron is a framework for creating native applications with web technologies like JavaScript, HTML, and CSS. It takes care of the hard parts so you can focus on the core of your application.</p></blockquote><p>根据 <a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a> 查看源码。</p><h2 id="photon"><a href="#photon" class="headerlink" title="photon"></a><a href="https://github.com/connors/photon" target="_blank" rel="noopener">photon</a></h2><blockquote><p>The fastest way to build beautiful Electron apps using simple HTML and CSS <a href="http://photonkit.com" target="_blank" rel="noopener">http://photonkit.com</a></p></blockquote><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-electron</a> 汇聚了大量相关开源项目和学习资料</li><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-nodejs</a> 关于 node.js 的有趣项目</li><li><a href="https://auth0.com/blog/create-a-desktop-app-with-angular-2-and-electron/" target="_blank" rel="noopener">https://auth0.com/blog/create-a-desktop-app-with-angular-2-and-electron/</a></li><li><a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">https://github.com/angular/angular-cli</a></li><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">https://github.com/electron/electron</a></li><li><a href="https://github.com/sindresorhus/awesome-electro" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-electro</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bash 使用</title>
      <link href="/2016/11/07/Vue-bashguide/"/>
      <url>/2016/11/07/Vue-bashguide/</url>
      <content type="html"><![CDATA[<p>linux 命令可以提高软件的开发与部署，记录常用命令。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#1-basic-operations">基本使用</a></li><li>[Shell 编程]</li><li>[技巧]</li><li>[调试]</li></ol><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h2 id="a-export"><a href="#a-export" class="headerlink" title="a. export"></a>a. <code>export</code></h2><p>显示所有的环境变量配置。如果需要获取指定环境变量使用 <code>echo $VARIABLE_NAME</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span></span><br><span class="line">AWS_HOME = /Users/adnanadnan/.aws</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$AWS_HOME</span></span><br><span class="line">/Users/adnanadnan/.aws</span><br></pre></td></tr></table></figure><h2 id="b-whatis"><a href="#b-whatis" class="headerlink" title="b. whatis"></a>b. <code>whatis</code></h2><p>whatis 用于显示用户命令, 系统调用, 库函数和数据手册相关的描述。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatis name</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ whatis bash</span><br><span class="line">bash(1)                  - GNU Bourne-Again SHell</span><br><span class="line">bashbug(1)               - report a bug <span class="keyword">in</span> bash</span><br></pre></td></tr></table></figure><h2 id="c-whereis"><a href="#c-whereis" class="headerlink" title="c. whereis"></a>c. <code>whereis</code></h2><h2 id="d-which"><a href="#d-which" class="headerlink" title="d. which"></a>d. <code>which</code></h2><h2 id="e-clear"><a href="#e-clear" class="headerlink" title="e. clear"></a>e. <code>clear</code></h2><p>清楚当前窗口显示</p><h2 id="1-1-文件操作"><a href="#1-1-文件操作" class="headerlink" title="1.1. 文件操作"></a>1.1. 文件操作</h2><p><a href="https://github.com/Idnan/bash-guide" target="_blank" rel="noopener">bash-guide</a><br><a href="https://raw.githubusercontent.com/Idnan/bash-guide/master/README.md" target="_blank" rel="noopener">bash-guide-raw</a></p>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序员</title>
      <link href="/2016/11/07/%E5%85%B6%E4%BB%96-%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
      <url>/2016/11/07/%E5%85%B6%E4%BB%96-%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      <content type="html"><![CDATA[<p>记录程序员需要了解和关注的方方面面。</p><h1 id="语义化版本-2-0-0"><a href="#语义化版本-2-0-0" class="headerlink" title="语义化版本 2.0.0"></a><a href="http://semver.org/lang/zh-CN/#spec-item-1" target="_blank" rel="noopener">语义化版本 2.0.0</a></h1><blockquote><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p></blockquote><h1 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h1><ul><li>HTTP API 设计指南<br><a href="https://geemus.gitbooks.io/http-api-design/content/en/" target="_blank" rel="noopener">英文</a><br><a href="https://github.com/ZhangBohan/http-api-design-ZH_CN" target="_blank" rel="noopener">中文</a></li></ul><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><ul><li><a href="https://github.com/jwasham/google-interview-university/blob/master/README-cn.md" target="_blank" rel="noopener">Google 面试</a></li></ul><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><ul><li><a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">中文技术文档的写作规范</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Statsd</title>
      <link href="/2016/11/05/%E5%85%B6%E4%BB%96-Soft-copy/"/>
      <url>/2016/11/05/%E5%85%B6%E4%BB%96-Soft-copy/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/etsy/statsd" target="_blank" rel="noopener">StatsD</a> 是一个简单的网络守护进程，基于 Node.js 平台，通过 UDP 或者 TCP 方式侦听各种统计信息，包括计数器和定时器，并发送聚合信息到后端服务，例如  Graphite。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="http://www.oschina.net/p/statsd" target="_blank" rel="noopener">http://www.oschina.net/p/statsd</a></li><li><a href="http://www.oschina.net/p/graphite" target="_blank" rel="noopener">http://www.oschina.net/p/graphite</a></li><li><a href="http://blogs.asterisk.org/2016/02/03/integrating-asterisk-with-statsd/" target="_blank" rel="noopener">http://blogs.asterisk.org/2016/02/03/integrating-asterisk-with-statsd/</a> asterisk 与 statsd 集成</li></ul><p>##<br>记录开源聊天软件</p><ul><li><a href="https://github.com/sdelements/lets-chat" target="_blank" rel="noopener">https://github.com/sdelements/lets-chat</a></li><li><a href="https://github.com/mattermost/platform" target="_blank" rel="noopener">https://github.com/mattermost/platform</a></li><li><a href="https://github.com/RocketChat/Rocket.Chat" target="_blank" rel="noopener">https://github.com/RocketChat/Rocket.Chat</a> mateor </li></ul><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><a href="https://www.oschina.net/question/2012764_2141029" target="_blank" rel="noopener">https://www.oschina.net/question/2012764_2141029</a></li></ul><p>gogs 是类似于 github 的自建 git 服务器. 是一款开源自建的  git 服务端，你可以将他认为是一个 mini 版本的 github.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.<a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">安装文档</a></p><ol start="2"><li>默认配置文件包含在 二进制软件包中， 直接运行会生成自定义配置文件。 若配置需要修改可以直接修改配置文件 <strong>conf/app.ini</strong>。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>确定项目属于组织和用户， 后期就不会有修改 url 的困扰。</li></ol><p>shadowsocks 是一个安全的 socks5 代理。</p><ul><li><a href="https://github.com/orvice/ss-panel" target="_blank" rel="noopener">ss-panel</a> php 实现的 web 界面管理</li><li><a href="https://github.com/sendya/shadowsocks-panel" target="_blank" rel="noopener">shadowsocks-panel</a> 同上</li><li><a href="https://github.com/orvice/shadowsocks-go" target="_blank" rel="noopener">shadowsocks-go mu</a> 带多个用户管理的客户端</li><li><a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="noopener">shadowsocks-go</a> go 服务端</li></ul><p><a href="http://www.iterm2.com/" target="_blank" rel="noopener">iterm2</a> MacOS 更好使用的终端</p><ul><li>选中: 双击选中，三击选中整行，四击智能选中。</li><li>⌘ 键: 按住时同时点击文件夹或文件可以打开文件或文件夹。</li><li>分屏和切换。</li><li>自动补全和查看历史。</li></ul><p><a href="http://wulfric.me/2015/08/iterm2/" target="_blank" rel="noopener">iterm2 使用</a></p><blockquote><p>tmux is a terminal multiplexer<br>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。</p></blockquote><h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a><a href="http://tmux.github.io/" target="_blank" rel="noopener">Tmux</a></h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>一个 Tmux 会话中可以包含多个窗口.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s &lt;name-of-my-session&gt; // 创建第一个会话</span><br><span class="line">Ctrl-b : &amp;&amp; new -s &lt;name-of-my-session&gt; // 创建新会话</span><br><span class="line">Ctrl-b s // 切换会话,列出所有会话</span><br><span class="line">tmux attach -t test //进入名为test的session</span><br><span class="line">C-b d // detach当前session(可以认为后台运行)</span><br></pre></td></tr></table></figure><h1 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h1><p>Window操作</p><p>  C-b c 创建一个新窗口<br>  C-b &amp; 关闭当前窗口<br>  C-b w 列出所有的窗口选择<br>  C-b p 切换到上一个窗口<br>  C-b n 切换到下一个窗口<br>  C-b 窗口号 使用窗口号切换窗口(例如窗口号为1的, 则C-b 1)<br>  C-b , 重命名当前窗口，便于识别各个窗口</p><p>Pane操作</p><p>  C-b % 横向分Terminal<br>  C-b “ 纵向分Terminal<br>  C-b 方向键 则会在自由选择各面板<br>  C-b x 关闭当前pane<br>  C-b q 显示面板编号</p><p>链接</p><p>/odoo/TODO.md</p><p>===</p><ul><li><a href="http://blog.jobbole.com/87584/" target="_blank" rel="noopener">http://blog.jobbole.com/87584/</a></li><li><a href="http://www.linuxidc.com/Linux/2015-07/119843.html" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-07/119843.html</a></li><li><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">https://github.com/gpakosz/.tmux</a> //   </li></ul>]]></content>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码评审</title>
      <link href="/2016/07/26/%E5%85%B6%E4%BB%96-CodeReview/"/>
      <url>/2016/07/26/%E5%85%B6%E4%BB%96-CodeReview/</url>
      <content type="html"><![CDATA[<p>代码评审是指对代码进行审核，当符合要求后才合并到主分支中。</p><p>代码评审需要借助评审工具完成，对评审进行管理。</p><h1 id="git-appraise"><a href="#git-appraise" class="headerlink" title="git-appraise"></a><a href="https://github.com/google/git-appraise" target="_blank" rel="noopener">git-appraise</a></h1><p>Go 实现的开源软件，与 Git 集成在一起。</p><p>在特性分支中执行 <code>git-appraise request</code> 将与主分支的差异作为评审的内容。 然后通过 <code>git-appraise comment</code> 对代码进行评价。 若接受代码修改通过 <code>git-appraise accept</code>. 最后要在特性分支中进行 <code>git-appraise submit</code>.</p><p><code>git-appraise list</code> 可以查看所有提交<br><code>git-appraise show id</code> 查看详细。</p><h2 id="git-appraise-web"><a href="#git-appraise-web" class="headerlink" title="git-appraise-web"></a><a href="https://github.com/google/git-appraise-web" target="_blank" rel="noopener">git-appraise-web</a></h2><blockquote><p>一个简单的只读 web 查看界面, 功能十分简单。</p></blockquote><p><strong><br>  代码通过 <code>go get</code> 而不是 <code>git clone</code> 方式安装。 需要加载 <code>Angualrjs.js</code> 所有需要翻墙。</strong></p><h1 id="gerrit"><a href="#gerrit" class="headerlink" title="gerrit"></a><a href="https://www.gerritcodereview.com/" target="_blank" rel="noopener">gerrit</a></h1><p>基于 JAVA 实现的开源软件。</p><ul><li><a href="https://gerrit-review.googlesource.com/Documentation/install-quick.html" target="_blank" rel="noopener">快速安装</a></li></ul><h1 id="crucible"><a href="#crucible" class="headerlink" title="crucible"></a><a href="https://www.atlassian.com/software/crucible" target="_blank" rel="noopener">crucible</a></h1><p>收费软件。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><a href="https://en.wikipedia.org/wiki/List_of_tools_for_code_review" target="_blank" rel="noopener">wiki</a></li></ul>]]></content>
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>自学</title>
      <link href="/2016/04/27/%E5%85%B6%E4%BB%96-Mooc/"/>
      <url>/2016/04/27/%E5%85%B6%E4%BB%96-Mooc/</url>
      <content type="html"><![CDATA[<p>关于程序员的自学方式和方法思考。</p><p>程序员是一个需要不断学习的职业，而视频学习是一个基本的方式。</p><p>关于学习的方式可以有如下选择</p><ul><li>官方博客或文档</li><li>开发牛人的博客文章</li><li>书籍</li><li>开源项目</li></ul><p>视频学习方式对初学是最好的方式，它可以强迫你去学习。然后视频学习与上课一样会出现走神等问题。 视频的选择需要注意如下方面</p><ul><li>容易走神， 如果课程简单非常容易走神。可以考虑 1.5 倍播放。</li><li>课程太难需要提前了解，一定要选择合适的课程。</li><li>主讲人的方式，主讲方式指主讲人是严肃还是活泼, 声音是否突然变大或变小, 视频的清晰度能否看见源码。</li><li>视频的内容是否有价值, 即视频所关注的技术点是否是你真需要的技术。</li></ul><p>对于视频学习，首先需要明确一点，你接受的知识是主讲人理解后的一次的内容。 如果主讲错误，你也难免会一直错误。</p>]]></content>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MBTI</title>
      <link href="/2016/04/17/%E5%85%B6%E4%BB%96-MBTI/"/>
      <url>/2016/04/17/%E5%85%B6%E4%BB%96-MBTI/</url>
      <content type="html"><![CDATA[<p>最近在一次 Mooc 课堂了解到 MBTI, 发现关于这个的研究还是比较靠谱的了。更多查看内容查看［wiki](<a href="https://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator)</a>.</p><p>MBTI全称Myers-Briggs Type Indicator，是一种迫选型、自我报告式的性格评估工具，用以衡量和描述人们在获取信息、作出决策、对待生活等方面的心理活动规律和性格类型。它以瑞士心理学家Carl Jung的性格理论为基础，由美国的Katherine C Briggs和Isabel  Briggs Myers母女共同研制开发。<br>MBTI是当今世界上应用最广泛的性格测试工具。它已经被翻译成近20种世界主要语言，每年的使用者多达200多万，其中不乏世界500强之内的大型企业。</p><p>通过四个维度构成16种类型，对于每种类型有对应的职业建议。</p><blockquote><p>这大概属于心理学内容了， 以后了解了再说吧。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库</title>
      <link href="/2016/04/16/%E5%85%B6%E4%BB%96-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2016/04/16/%E5%85%B6%E4%BB%96-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>软件的数据存储离不开数据库。数据库主要有　</p><ul><li>关系数据库 mysql,sqlite, postgresql</li><li>非关系数据库 mongoDB, leveldb, rokcsDB, Realm</li><li>图形数据库</li></ul><p>另外最近发现一个时间序列数据库，基于 go 实现。</p><h2 id="leveldb"><a href="#leveldb" class="headerlink" title="leveldb"></a><a href="http://leveldb.org/" target="_blank" rel="noopener">leveldb</a></h2><p>谷歌开源的k-v数据库。支持主要平台，但缺少相关语言封装。主要封装为 <a href="https://github.com/Level/levelup" target="_blank" rel="noopener">levelup</a></p><h2 id="rocksDB"><a href="#rocksDB" class="headerlink" title="rocksDB"></a><a href="http://rocksdb.org/" target="_blank" rel="noopener">rocksDB</a></h2><p>Facebook 在 leveldb 的基础上开源的数据库。 据说更高效。<br><a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">github</a><br><a href="https://code.facebook.com/projects/577808328939952/rocksdb/" target="_blank" rel="noopener">rocksdb</a></p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><a href="https://realm.io/" target="_blank" rel="noopener">Realm</a></h2><p>主要面向移动端的现代数据库。 可以替换 ios 的 CocaData 和 Android 的 Sqlite;</p><ul><li>Realm for Android快速入门教程 <a href="http://www.tuicool.com/articles/V7ZFvuB" target="_blank" rel="noopener">中文</a> <a href="http://code.tutsplus.com/tutorials/up-and-running-with-realm-for-android--cms-25241" target="_blank" rel="noopener">英文</a></li><li><a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">github realm-java</a></li><li><a href="https://github.com/realm/realm-cocoa" target="_blank" rel="noopener">github realm-cocoa</a></li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>记录关系数据库 Mysql 的相关学习。</p><ul><li><a href="http://coolshell.cn/articles/1846.html" target="_blank" rel="noopener">MySQL性能优化的最佳20+条经验</a></li><li><a href="http://coolshell.cn/articles/652.html" target="_blank" rel="noopener">MySQL: InnoDB 还是 MyISAM?</a></li><li><a href="http://stackoverflow.com/questions/6479107/how-to-enable-mysql-query-log" target="_blank" rel="noopener">mysql set log</a> 数据配置已改变</li><li><a href="http://www.cnblogs.com/linjiqin/p/4125898.html" target="_blank" rel="noopener">mysql explain用法</a></li><li><a href="http://stackoverflow.com/questions/586381/mysql-not-using-indexes-with-where-in-clause" target="_blank" rel="noopener">MySQL not using indexes with WHERE IN clause?</a></li><li><a href="http://www.cnblogs.com/loveLearning/archive/2013/04/17/3025502.html" target="_blank" rel="noopener">mysql表切换引擎的几种方法</a></li></ul><blockquote><p>在项目的初期对数据库的选择十分重要，要进行压力测试。 另外一般的数据库 orm 会导致效率下降。 tqcenglish</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件</title>
      <link href="/2016/04/06/%E5%85%B6%E4%BB%96-Soft/"/>
      <url>/2016/04/06/%E5%85%B6%E4%BB%96-Soft/</url>
      <content type="html"><![CDATA[<p>一些有用的开源软件和工具。 </p><ul><li>自建服务类型，在自己 vps 上运行。</li><li>工具类型，参考实现二次开发。</li></ul><h1 id="Mailtrain-源码"><a href="#Mailtrain-源码" class="headerlink" title="Mailtrain 源码"></a><a href="https://mailtrain.org/" target="_blank" rel="noopener">Mailtrain</a> <a href="https://github.com/andris9/mailtrain" target="_blank" rel="noopener">源码</a></h1><p>基于 Express 实现群发邮件管理工具。 能上传 csv， 自定义字段。</p><h1 id="cockpit"><a href="#cockpit" class="headerlink" title="cockpit"></a><a href="https://cockpit-project.org/" target="_blank" rel="noopener">cockpit</a></h1><p>Red-hat开源 linux 系统状态监控。 用到的技术 C + react。 界面模块化开发，使用了 red-hat 自己的 ui 框架。</p><h1 id="Caddy-与-nginx-一样，作反向代理服务器-配置更简单"><a href="#Caddy-与-nginx-一样，作反向代理服务器-配置更简单" class="headerlink" title="Caddy 与 nginx 一样，作反向代理服务器. 配置更简单."></a>Caddy 与 nginx 一样，作反向代理服务器. 配置更简单.</h1><h2 id="不同请求域名代理到内部不同端口"><a href="#不同请求域名代理到内部不同端口" class="headerlink" title="不同请求域名代理到内部不同端口."></a>不同请求域名代理到内部不同端口.</h2><p>一台 vps 需要运行多个 web 服务，都想使用 80/443 端口，如何处理 ? 使用 caddy 代理所有请求， 然后通过访问的二级域名判断需要代理到内部的具体端口. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rewrite &#123;</span><br><span class="line">   if_op or</span><br><span class="line">   if &#123;&gt;Referer&#125; has /deluge</span><br><span class="line">   if &#123;&gt;Referer&#125; has mydomain.com/themes/css/</span><br><span class="line">   if &#123;&gt;Referer&#125; has mydomain.com/css/</span><br><span class="line">   to /deluge/&#123;path&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">proxy /deluge http://127.0.0.1:8112 &#123;</span><br><span class="line">   without /deluge   </span><br><span class="line">      transparent</span><br><span class="line">      header_upstream X-Forwarded-Host &#123;host&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://forum.deluge-torrent.org/viewtopic.php?t=54135" target="_blank" rel="noopener">Reverse Proxy with Caddy Server</a></p>]]></content>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发</title>
      <link href="/2016/04/03/Golang-%E5%B9%B6%E5%8F%91/"/>
      <url>/2016/04/03/Golang-%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>在探讨并发的问题上主要通过比较不同编程语言进行对比.</p><h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><p>并发与并行是两个不同的概念。<br>并发是在设计阶段考虑问题同时执行，并行是指问题多个部分同时执行。</p><blockquote><p>一个人同时做几件事可以理解为并发。几个人同时做一个任务可以理解为并行。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Linux 系统</title>
      <link href="/2016/03/26/%E5%85%B6%E4%BB%96-LinuxOS/"/>
      <url>/2016/03/26/%E5%85%B6%E4%BB%96-LinuxOS/</url>
      <content type="html"><![CDATA[<p>Linux 系统主要分几大系列，大多数的发行版本都是基于 redhat 或 debian. 在系统相关的命令上两种系统有很大的差别.</p><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><a href="http://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></h1><p>Ubuntu 系统是最适合用于桌面环境下的 Linux 系统，相关的软件都有对应的打包版本。</p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><ul><li>如果是比较新的硬件，不用安装老系统。</li><li>新版本(16.04) 没有以前的软件中心。</li></ul><h1 id="PearOS"><a href="#PearOS" class="headerlink" title="PearOS"></a><a href="https://sourceforge.net/projects/pearlinux/" target="_blank" rel="noopener">PearOS</a></h1><p>PearOS 基于 Ubuntu 并添加了 MacOS 主题。不需要手动添加主题设置等，安装成功后就是一个高仿的苹果系统。</p>]]></content>
      
      
        <tags>
            
            <tag> linux; os </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kindle</title>
      <link href="/2016/03/12/%E5%85%B6%E4%BB%96-Kindle/"/>
      <url>/2016/03/12/%E5%85%B6%E4%BB%96-Kindle/</url>
      <content type="html"><![CDATA[<h1 id="Kindle"><a href="#Kindle" class="headerlink" title="Kindle"></a>Kindle</h1><p>Kindle 是一款墨水屏的电子书。在强光下也能轻松阅读，并且耗电低。</p><h2 id="关于-Kindle-使用经验"><a href="#关于-Kindle-使用经验" class="headerlink" title="关于 Kindle 使用经验"></a>关于 Kindle 使用经验</h2><ul><li>淘宝二手 Kindle 不能直接使用亚马逊账号登录.但一般都自带多看系统。</li><li>新版本 Kindle 不能使用多看系统, 需要等待破解。</li><li>开启网络耗电严重，多看比原生耗电.</li><li>可以方便将笔记导出到印象笔记中。<strong>不喜欢印象笔记，现在还限制了免费账号最多两个设备登录</strong></li><li>如果是带灯版本，在白天阅读时记住关闭灯，节省电量。</li><li>mac 直接 ftp 不能上传文件到 Kindle (可能是操作错误), 在手机上用 FTP 可以正常连接。</li><li>弹出 Kindle 需要完全</li><li>直接向多看邮箱发送书籍实现推送. 邮箱格式为 账号<a href="mailto:_01@iduokan.com" target="_blank" rel="noopener">_01@iduokan.com</a>。</li></ul><h2 id="电子书下载"><a href="#电子书下载" class="headerlink" title="电子书下载"></a>电子书下载</h2><ul><li><a href="http://www.2epub.net/" target="_blank" rel="noopener">2Epub</a> 大部分都是网络小说</li><li><a href="http://www.gutenberg.org/" target="_blank" rel="noopener">gutenberg</a> 古登堡</li><li><a href="https://www.gitbook.com/explore" target="_blank" rel="noopener">gitbook</a></li><li>微信推送, 具体参考淘宝卖家介绍。一般图书的质量也不高。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> kindle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go</title>
      <link href="/2016/03/06/Golang-Go/"/>
      <url>/2016/03/06/Golang-Go/</url>
      <content type="html"><![CDATA[<h1 id="Go-语言资料"><a href="#Go-语言资料" class="headerlink" title="Go 语言资料"></a>Go 语言资料</h1><h2 id="资料索引"><a href="#资料索引" class="headerlink" title="资料索引"></a>资料索引</h2><ul><li><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">Go 语言学习资料与社区索引</a></li><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a></li></ul><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://golang.org/ref/spec" target="_blank" rel="noopener">The Go Programming Language Specification</a></li><li><a href="https://tour.golang.org/list" target="_blank" rel="noopener">a tour go</a></li><li><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://golang.org/ref/mem" target="_blank" rel="noopener">The Go Memory Model</a></li></ul><h2 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h2><ul><li><a href="https://codegangsta.gitbooks.io/building-web-apps-with-go/content/" target="_blank" rel="noopener">Building Web Apps with Go</a></li><li><a href="https://gobyexample.com/" target="_blank" rel="noopener">Go by Example</a></li></ul><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><ul><li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/" target="_blank" rel="noopener">Go Web 编程</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">Go编程基础</a></li><li><a href="https://github.com/Unknwon/go-rock-libraries-showcases" target="_blank" rel="noopener">Go名库讲解</a></li><li><a href="https://github.com/Unknwon/go-web-foundation" target="_blank" rel="noopener">Go Web基础</a></li></ul><blockquote><p>明白 Go 的应用方向， 了解主要开源的项目源码。</p></blockquote><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><ul><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a> go 资料汇总</li><li><a href="https://github.com/mmcgrana/gobyexample" target="_blank" rel="noopener">gobyexample 源码</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">Go 语言学习资料与社区索引</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">build-web-application-with-golang</a></li><li><a href="http://docs.ruanjiadeng.com/gopl-zh/index.html" target="_blank" rel="noopener">Go语言圣经</a></li><li><a href="https://github.com/golang/go/wiki/GoUsers" target="_blank" rel="noopener">GoUsers</a></li><li><a href="https://www.gitbook.com/book/victoriest/golang-tcp-server/details" target="_blank" rel="noopener">tcp echo</a></li><li><a href="https://github.com/go-training/training" target="_blank" rel="noopener">training</a></li><li><a href="https://www.gitbook.com/book/tiancaiamao/go-internals" target="_blank" rel="noopener">深入解析Go</a> 对 Go 语言的实现进行深入了分析。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> language </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS</title>
      <link href="/2015/12/02/Vue-CSS/"/>
      <url>/2015/12/02/Vue-CSS/</url>
      <content type="html"><![CDATA[<p>记录 CSS 相关的小知识点。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>em 用于宽度时指字符个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max-width: 36em; // 每行显示最大字符数</span><br></pre></td></tr></table></figure></p><p>margin 的顺序是 <strong>上右下左</strong>, 若为两位就是 <strong>上下与左右</strong></p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阅读</title>
      <link href="/2015/12/02/%E5%85%B6%E4%BB%96-%E4%B9%A6%E7%B1%8D/"/>
      <url>/2015/12/02/%E5%85%B6%E4%BB%96-%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<h2 id="在线书籍"><a href="#在线书籍" class="headerlink" title="在线书籍"></a>在线书籍</h2><ul><li><a href="tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a> alibaba在Nginx上进行分支开放出Tengine.</li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener">开源软件架构</a>介绍了49个开源程序,包括上下两本。图灵有翻译中文版本。</li><li><a href="producingoss.com/zh/index.html">制造开原软件</a>详细说明了开源的各方面注意事项</li><li><a href="http://cpp1x.org/" target="_blank" rel="noopener">cpp1x.org</a> 包含c++11内容</li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li></ul><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><ul><li>黑客与画家 感觉叫程序猿与画家更合适吧</li><li>程序员的思维训练</li><li>写给大家看的设计书</li><li>设计师要懂心理学</li><li>简约至上</li><li>认知与设计</li><li>swift开放指南</li><li>扩展及应用开放chrome</li><li>30 天自制操作系统</li><li>算法帝国</li><li>互联网思维的企业</li><li>社会工程</li><li>只是为了好玩 Linux之父</li><li>统计思维</li></ul><h2 id="编程相关类"><a href="#编程相关类" class="headerlink" title="编程相关类"></a>编程相关类</h2><ul><li>浪潮之巅</li><li>30天编写操作系统</li><li>大规模web服务开发</li><li>征服C指针</li><li>计算机程序设计艺术 The Art of Computer Programming</li><li>编程人生</li><li>具体数学：计算机科学基础（第2版）（Concrete Mathematics: A Foundation for Computer Science，2E）</li><li>计算机科学的基础，C版</li><li>世界是数字的（D is for Digital）</li><li>Windows编程（第六版）</li><li>编码</li><li>图灵的秘密</li><li>代码的未来</li><li>松本行弘的程序世界</li><li>第二版《Linux/Unix Philosophy》</li><li>宫本武藏的《五轮书》</li><li>程序员的职业素养</li><li>代码整洁之道</li><li>敏捷软件开发</li><li>Grady Booch（《UML用户指南》作者）</li><li>Tom DeMarco（《项目百态》作者）</li><li>Meilir Page-Jones（《UML面向对象设计基础》作者）</li><li>Erich Gamma（《设计模式》作者）</li><li>Martin Fowler（《重构》作者）</li><li>Bertrand Meyer（《面向对象软件构造》作者）</li><li>Kent Beck（《测试驱动开发》</li><li>计算机程序的构造和解释》</li><li>架构整洁之道</li><li>ThoughtWorks软件开发沉思录》</li><li>苹果应用开发与营销</li><li>简约至上</li><li>不守规则创意</li><li>写给大家看的设计书</li><li>the Little Mac Book</li><li>认知与设计</li><li>VOIP技术构架（第二版）</li><li>图解HTTP</li><li>java设计模式之禅 研磨设计模式 对比</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><ul><li>架构实战:软件架构设计过程</li><li>企业应用架构模式</li><li>Core J2EE Pattern</li></ul><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><ul><li>架构之美</li><li>特定领域应用框架</li><li>企业集成模式<h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4></li><li>Release It</li><li>面向模式的软件架构</li></ul><h3 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h3><h4 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h4><ul><li>从小工到专家</li><li>卓有成效的程序员</li><li>软件随想录</li><li>高效程序员的45个习惯</li></ul><h4 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h4><ul><li>代码大全</li></ul><h3 id="敏捷"><a href="#敏捷" class="headerlink" title="敏捷"></a>敏捷</h3><h4 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h4><ul><li>解析极限编程</li><li>硝烟中的Scrum和XP</li><li>ThoughtWorks文集</li></ul><h4 id="进阶-2"><a href="#进阶-2" class="headerlink" title="进阶"></a>进阶</h4><ul><li>持续集成:软件质量改进和风险降低之道</li><li>Scrum敏捷软件开发</li><li>用户故事和敏捷方法</li><li>重构极限编程</li><li>Kanban</li><li>敏捷估计和规划</li><li>测试人员和敏捷团队的实践指南</li><li>How Google test Software</li><li>持续交付－发布可靠软件的系统方法</li><li>精益思想</li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="入门-3"><a href="#入门-3" class="headerlink" title="入门"></a>入门</h4><ul><li>代码整洁之道</li><li>重构:改善既有代码的设计</li><li>单元测试之道</li><li>测试驱动开发</li><li>代码阅读方法和实践</li><li>The ART of Readable Code</li></ul><h4 id="进阶-3"><a href="#进阶-3" class="headerlink" title="进阶"></a>进阶</h4><ul><li>实现模式</li><li>修改代码的艺术</li><li>重构与模式</li><li>XUnit测试模式</li></ul><h4 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h4><ul><li>计算机程序的构造合解释</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><h4 id="入门-4"><a href="#入门-4" class="headerlink" title="入门"></a>入门</h4><ul><li>Head First 设计模式</li><li>UML与模式</li><li>面向对象分析与设计</li><li>敏捷软件开发:原则,模式,实践</li><li>设计模式解析</li><li>OO启示录</li></ul><h4 id="进阶-4"><a href="#进阶-4" class="headerlink" title="进阶"></a>进阶</h4><ul><li>设计模式:可复用面向对象软件的基础</li><li>Unix编程艺术</li><li>软件框架设计的艺术</li></ul><h4 id="高级-2"><a href="#高级-2" class="headerlink" title="高级"></a>高级</h4><ul><li>领域驱动设计:软件核心复杂性应对之道</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>你的灯亮着吗</li><li>学会提问</li><li>少有人走的路</li><li>系统思考</li><li>哪来天才</li><li>程序的思维修炼</li><li>第五项修炼</li><li>Change by Design</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>欢场女子回忆录</li><li>黄金时代</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读的书再多如果不写出来，就不能成为自己的东西。如果不能向别人说出来，就不能得到修正与反馈。</p>]]></content>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jade</title>
      <link href="/2015/12/01/%E5%85%B6%E4%BB%96-Jade/"/>
      <url>/2015/12/01/%E5%85%B6%E4%BB%96-Jade/</url>
      <content type="html"><![CDATA[<p><a href="http://jade-lang.com/" target="_blank" rel="noopener">Jade</a> 是前端模板, 与 Ejs 相比更简洁。Jade 已经更名为 <strong>pug</strong>.<br><a href="https://github.com/pugjs/pug/blob/master/Readme_zh-cn.md" target="_blank" rel="noopener">Pug - 模板引擎</a></p><h1 id="Jade-总结"><a href="#Jade-总结" class="headerlink" title="Jade 总结"></a>Jade 总结</h1><ul><li>Jade 用于服务端生成html,在单页应用中没有必要使用。</li><li>Jade 过于简洁，入门和阅读难度大。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> jade, html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web 全栈</title>
      <link href="/2015/11/25/Node-HTTP-%E6%A1%86%E6%9E%B6/"/>
      <url>/2015/11/25/Node-HTTP-%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="web-框架介绍"><a href="#web-框架介绍" class="headerlink" title="web 框架介绍"></a>web 框架介绍</h1><h2 id="relay"><a href="#relay" class="headerlink" title="relay"></a><a href="https://github.com/facebook/relay" target="_blank" rel="noopener">relay</a></h2><p>与查询一起使用。</p><h2 id="meteor"><a href="#meteor" class="headerlink" title="meteor"></a><a href="https://github.com/meteor/meteor/" target="_blank" rel="noopener">meteor</a></h2><p>适合实时引用，对 App 接口不友好。</p><h2 id="phoneix"><a href="#phoneix" class="headerlink" title="phoneix"></a><a href="http://www.phoenixframework.org/" target="_blank" rel="noopener">phoneix</a></h2><p>适合游戏的后端框架。</p><h2 id="sails"><a href="#sails" class="headerlink" title="sails"></a><a href="http://sailsjs.org/" target="_blank" rel="noopener">sails</a></h2><p>MVC 框架，Express 版本落后。</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li><a href="http://www.w3school.com.cn/html5/index.asp" target="_blank" rel="noopener">w3school html5</a></li><li><a href="http://diveintohtml5.info/" target="_blank" rel="noopener">DIVE INTO HTML5</a></li><li><a href="http://blog.csdn.net/freshlover/article/details/9310437" target="_blank" rel="noopener">关于Apple设备私有的apple-touch-icon属性详解</a> 可以直接将网站快捷访问添加到主屏幕。</li><li><a href="http://www.jb51.net/w3school/tags/att_link_media.htm" target="_blank" rel="noopener">HTML <link> 标签的 media 属性</a> media 属性用于为不同的媒介类型规定不同的样式。</li><li><a href="http://www.w3school.com.cn/js/js_howto.asp" target="_blank" rel="noopener">老旧的实例可能会在 <script> 标签中使用 type=”text/javascript”。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/09/package-management.html">前端模块管理器简介</a> Webpack 更好</li></ul></script></a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart</title>
      <link href="/2015/05/25/%E5%85%B6%E4%BB%96-Dart/"/>
      <url>/2015/05/25/%E5%85%B6%E4%BB%96-Dart/</url>
      <content type="html"><![CDATA[<p>##<a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a><br>Dart is an open-source, scalable programming language, with robust libraries and runtimes, for building web, server, and mobile apps.</p><p>###安装</p><ul><li><a href="https://www.dartlang.org/downloads/mac.html" target="_blank" rel="noopener">Mac 安装</a> Dart编辑器大概是Eclipse＋插件.可以选择其他IDE+插件的方式。</li><li><a href="https://confluence.jetbrains.com/display/WI/Getting+started+with+Dart" target="_blank" rel="noopener">WebStorm Dart</a> WebStorm 中创建Dart项目</li><li><a href="https://dartpad.dartlang.org/" target="_blank" rel="noopener">Dartpad</a> Dart在线编辑/运行器</li><li><a href="https://www.dartlang.org/tools/" target="_blank" rel="noopener">Dart tools</a> Dart在相关IDE插件安装.</li></ul><p>###学习</p><ul><li><a href="https://www.dartlang.org/codelabs/darrrt/" target="_blank" rel="noopener">Learn Dart in Minutes</a> 对Dart的几分钟快速学习。可以直接通过Webstom创建新Dart项目并设置项目路径为本项目。<br>需要配置两个安装路径。</li><li><a href="http://dart.lidian.info/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">Dart Wiki</a></li><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="noopener">Dart 语言导览</a> 内容太老，一些函数已经被库移除。</li><li><a href="https://www.dartlang.org/docs/dart-up-and-running/ch02.html" target="_blank" rel="noopener">A Tour of the Dart Language</a></li></ul><p>###Mac默认安装路径</p><ul><li>/usr/local/Cellar/dartium/1.11.0-dev.0.0/Chromium.app</li><li>/usr/local/opt/dart/libexec</li></ul><blockquote><p>此语言当前还为流行，暂时还是不学了吧。 tqcenglish</p></blockquote>]]></content>
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
