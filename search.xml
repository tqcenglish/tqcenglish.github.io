<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC5%E8%AF%BE/"/>
      <url>/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC5%E8%AF%BE/</url>
      <content type="html"><![CDATA[<h1 id="新概念-第5课"><a href="#新概念-第5课" class="headerlink" title="新概念 第5课"></a>新概念 第5课</h1><ul><li>How are you today？ 你身体好吗？</li><li>I’am fine, thank you.</li></ul><p>How is Emama? 爱玛身体好吗？<br>Very well</p><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>today adv,今天<br>Well/good/fine 区别</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC3%E8%AF%BE/"/>
      <url>/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC3%E8%AF%BE/</url>
      <content type="html"><![CDATA[<ol><li>too 长音， 也/还/而且</li><li>非正式问候 hello</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC4%E8%AF%BE/"/>
      <url>/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-%E7%AC%AC4%E8%AF%BE/</url>
      <content type="html"><![CDATA[<h1 id="新概念-第4课"><a href="#新概念-第4课" class="headerlink" title="新概念 第4课"></a>新概念 第4课</h1><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ul><li>nationality 国籍 nation 国家 (注意发音差别)</li><li>I am / You are / He is / She is / It is</li><li>主系表变疑问句 be 动词提前</li><li>Yes, I am. / No, I am not.</li><li>What’s your name? </li><li>engineer 工程师 teacher 教师 policeman/policewoman (女)警察 nurse 护士 airhostess 空中小姐</li><li>a / an  元音</li><li>The International Nurse Day 国际护士节</li><li>taxi driver / postman / mechanic / housewife / milkman</li><li>job 赚钱的途径 /career 感兴趣的事业</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-2015-03-19-coovox%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-2015-03-19-coovox%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="Coovox-2016-10-4"><a href="#Coovox-2016-10-4" class="headerlink" title="Coovox 2016/10/4"></a>Coovox 2016/10/4</h1><p>系统中的相关知识可能错误。 由于系统直接使用了 ubuntu 系统，所以一些地方有差别。 文档需要<strong>更新</strong>。<br>运行在 Linux 下基于 Asterisk 的 PBX。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Coovox 运行在 Linux 系统上，所以目录结构与 Linux 相关。</p><h3 id="语音文件位置"><a href="#语音文件位置" class="headerlink" title="语音文件位置"></a>语音文件位置</h3><ul><li>语音文件位置 <strong>/var/lib/asterisk/sounds</strong></li><li>Moh是Music On Hold 缩写。 Moh文件目录地址 <strong>/var/lib/asterisk/moh</strong>，它链接到 <strong>/var/lib/asterisk/sounds/moh</strong>。</li></ul><h3 id="录音文件"><a href="#录音文件" class="headerlink" title="录音文件"></a>录音文件</h3><p>在 <strong>extensions_general.conf</strong> 中设置录音文件存放位置，默认目录 <strong>/var/spool/asterisk/monitor/</strong> 下有三个子目录分别对应三种录音方式</p><ul><li>recording   //通话录音</li><li>meetme      //会议录音</li><li>one_touch   //一键录音， 修改了features.c文件中： one_touch/通道/文件名</li></ul><p><strong>/www/monitor</strong> 链接到文件 <strong>/var/spool/asterisk/monitor</strong></p><h3 id="prompts"><a href="#prompts" class="headerlink" title="prompts"></a>prompts</h3><p><strong>/www/prompts</strong> 包含closed.gsm, welcome.gsm两个文件，对应非工作和工作两种状态。<br>它链接到文件目录<strong>/var/lib/asterisk/prompts</strong>。</p><h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><p>通过 Music management 上传后音乐文件在： <strong>/var/lib/asterisk/sounds/</strong>目录下</p><h3 id="Voicemail"><a href="#Voicemail" class="headerlink" title="Voicemail"></a>Voicemail</h3><p>由 <strong>extensions_general.conf</strong> 中设置 <strong>/var/spool/asterisk/voicemail/default</strong></p><h3 id="Fax"><a href="#Fax" class="headerlink" title="Fax"></a>Fax</h3><p><strong>/var/spool/asterisk/fax</strong></p><h3 id="Call-Log"><a href="#Call-Log" class="headerlink" title="Call Log"></a>Call Log</h3><ul><li>/var/log/asterisk/cdr-csv/所有通话日志的字段信息Master.csv。</li><li>/var/log/asterisk/cdr-custom/ 用户自定的log 的Master.csv</li></ul><h3 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h3><ul><li><p>/etc/scripts/</p><pre><code>bulk_users_gen(二进制)logger.shrunddnsdahdi_scan.sh  logspackage.shrunddns.shdahdi_update.sh  使用dahdi_cfg使得FXS/FXO通道生效   network.shservice.shdhcpd_conf.shntpshell_scripts.shdown_users_extensions（二进制）  openvpnkey.shsnmp.shemailtofax.shpackage.shvpnclient.shfaxlog.shparse.shvpnserver.shfaxtoemail.shphonesinit.sh（，auto_phone_zycoo二进制）vpnusers.sh</code></pre></li></ul><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>用户的IP信息存放在 <strong>/etc/asterisk/rc.conf</strong></p><h3 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h3><ul><li>/www/cgi-bin<br>   upload 二进制程序</li></ul><h3 id="PPTP-VPN"><a href="#PPTP-VPN" class="headerlink" title="PPTP VPN"></a>PPTP VPN</h3><ul><li>/usr/sbin/pptp-client   （二进制） //完成pptp vpn客户拨号程序</li></ul><h3 id="证书位置"><a href="#证书位置" class="headerlink" title="证书位置"></a>证书位置</h3><h4 id="TLS的证书位置"><a href="#TLS的证书位置" class="headerlink" title="TLS的证书位置"></a>TLS的证书位置</h4><ul><li><p>/etc/asterisk/keys/</p><p>   asterisk.crt<br>   asterisk.key<br>   asterisk.pem<br>   ca.crt<br>   ca.key</p></li></ul><h4 id="openvpn-证书位置"><a href="#openvpn-证书位置" class="headerlink" title="openvpn 证书位置"></a>openvpn 证书位置</h4><ul><li><p>/etc/openvpn/keys/</p><p>   ca.crt<br>   ca.key<br>   dh1024.pem<br>   server.crt<br>   server.csr<br>   server.key</p></li></ul><p>注意/etc/asterisk/openvpn_attribute.conf文件的存在。</p><h4 id="客户端证书生成位置"><a href="#客户端证书生成位置" class="headerlink" title="客户端证书生成位置"></a>客户端证书生成位置</h4><ul><li><p>/www/openvpnkeys/</p><p>   Phone1.tar<br>   client.tar</p></li></ul><h3 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h3><p>支持ppp的用户信息和ppp配置选项存放位置</p><ul><li>/etc/ppp/</li></ul><p>主要文件如下</p><pre><code>chap-secrets   （用户）options.pptpd   （pptpd）options.xl2tpd    （xl2tpd）pap-secrets    （用户）</code></pre><h3 id="http-目录"><a href="#http-目录" class="headerlink" title="http 目录"></a>http 目录</h3><ul><li>/www</li></ul><h3 id="tftpd-存放目录"><a href="#tftpd-存放目录" class="headerlink" title="tftpd 存放目录"></a>tftpd 存放目录</h3><ul><li>/srv/tftpboot</li></ul><h3 id="inetd-文件"><a href="#inetd-文件" class="headerlink" title="inetd 文件"></a>inetd 文件</h3><ul><li>/etc/inetd     </li></ul><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>日志目录(web登录、ssh登录等), Ssh登录日志通过last得来的。</p><ul><li>/var/log/messages //系统日志</li><li>存放于/www/log  和/www/syslogs</li></ul><h3 id="下载的链接创建"><a href="#下载的链接创建" class="headerlink" title="下载的链接创建"></a>下载的链接创建</h3><pre><code>ln -sf /var/lib/asterisk/prompts  /www/prompts                ;链接IVR提示音ln -sf /etc/asterisk/keys  /www/keys                              ;链接SIP协议TLS注册证书。ln -sf /var/spool/asterisk/monitor  /www/monitor                  ;链接通话录音文件ln -sf /var/log/asterisk/cdr-custom  /www/cdr-csv              ;链接通话日志文件ln -sf /var/spool/asterisk/voicemail/default  /www/voicemail</code></pre><h2 id="程序包"><a href="#程序包" class="headerlink" title="程序包"></a>程序包</h2><pre><code>程序名    版本        说明Asterisk    1.8.7.1        Busybox    1.17.4        采用了httpd、inetd、tftpd、IPtables    1.4.10        Dropbear    v0.49        Openssl    1.0.0d        Libpri    1.4.12        Openvpn    2.2.0        Easy-rsa程序包Pppd    2.4.4        Pptpd    1.3.4        Rp-pppoe    3.10        Spandsp    0.0.5        Speex    1.2rc1        Srtp    1.4.2        Ssmtp    2.62        Ntp    4.2.6p3        Tiff    3.9.4        Mailx    12.4        Wget    1.12        Xl2tp    1.2.7        Netsnmp    5.6.1        Ddns (updatedd)    2.6_        DDNS,源用了plannetinadyn            DDNSUpload    2.6        Web界面上传文件二进制程序</code></pre><h3 id="etc-asterisk"><a href="#etc-asterisk" class="headerlink" title="/etc/asterisk"></a>/etc/asterisk</h3><p>说明：调整目录结构，主要将变化的数据都存放于/etc/asterisk目录下。<br>该目录有两种情况：第一种情况是/etc/asterisk与系统分区用一个分区；第二种情况/etc/asterisk/单独存放与一个分区中。其主要目的为双机热备和磁盘恢复准备。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-6-%E8%AF%BE/"/>
      <url>/2020/03/16/%E6%96%B0%E6%A6%82%E5%BF%B5-%E6%96%B0%E6%A6%82%E5%BF%B5-6-%E8%AF%BE/</url>
      <content type="html"><![CDATA[<h1 id="新概念-6-课"><a href="#新概念-6-课" class="headerlink" title="新概念 6 课"></a>新概念 6 课</h1><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>blouse/shirt 女/男衬衫<br>Family tree 族谱</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-QueueStatus/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-QueueStatus/</url>
      <content type="html"><![CDATA[<h1 id="QueueMemberStatus"><a href="#QueueMemberStatus" class="headerlink" title="QueueMemberStatus"></a>QueueMemberStatus</h1><p>主动事件，当队列中成员发生变化时(例如接听电话)产生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager show event QueueMemberStatus</span><br></pre></td></tr></table></figure><pre><code>Event: QueueMemberStatus[Synopsis]Raised when a Queue member&apos;s status has changed.[Syntax]Event: QueueMemberStatusQueue: &lt;value&gt;MemberName: &lt;value&gt;Interface: &lt;value&gt;StateInterface: &lt;value&gt;Membership: &lt;value&gt;Penalty: &lt;value&gt;CallsTaken: &lt;value&gt;LastCall: &lt;value&gt;Status: &lt;value&gt;Paused: &lt;value&gt;Ringinuse: &lt;value&gt;[Arguments]Queue    The name of the queue.MemberName    The name of the queue member.Interface    The queue member&apos;s channel technology or location.StateInterface    Channel technology or location from which to read device state    changes.Membership    dynamic    realtime    staticPenalty    The penalty associated with the queue member.CallsTaken    The number of calls this queue member has serviced.LastCall    The time this member last took a call, expressed in seconds since    00:00, Jan 1, 1970 UTC.Status    The numeric device state status of the queue member.    0 - AST_DEVICE_UNKNOWN    1 - AST_DEVICE_NOT_INUSE    2 - AST_DEVICE_INUSE    3 - AST_DEVICE_BUSY    4 - AST_DEVICE_INVALID    5 - AST_DEVICE_UNAVAILABLE    6 - AST_DEVICE_RINGING    7 - AST_DEVICE_RINGINUSE    8 - AST_DEVICE_ONHOLDPaused    0    1Ringinuse    0    1</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-Asterisk/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-Asterisk/</url>
      <content type="html"><![CDATA[<h1 id="Asterisk-基础"><a href="#Asterisk-基础" class="headerlink" title="Asterisk 基础"></a>Asterisk 基础</h1><p>相关概念和配置</p><h3 id="关于接口"><a href="#关于接口" class="headerlink" title="关于接口"></a>关于接口</h3><p>Asterisk可以连接的接口类型:</p><ul><li>模拟接口(电话线,模拟电话)  <a href="#digital_analog_diff">常见模拟器接口和数字接口</a></li><li>数字线路(T1,E1)<a href="http://www.h3c.com.cn/Products___Technology/Technology/VoIP/Other_technology/Technology_recommend/200805/605894_30003_0.htm" target="_blank" rel="noopener">T1,E1介绍</a></li><li>Voip协议(SIP,IAX2)<a href="#word">名词解释</a></li></ul><h2 id="文件配置及对应功能设置"><a href="#文件配置及对应功能设置" class="headerlink" title="文件配置及对应功能设置"></a>文件配置及对应功能设置</h2><ul><li>extensions.conf 拨号方案文件</li><li>sip.conf Sip协议文件</li><li>iax.conf IAX通道文件</li></ul><h2 id="sip-conf"><a href="#sip-conf" class="headerlink" title="#sip.conf"></a>#sip.conf</h2><pre><code>srvlookup= yet | 建立一个逻辑和可解析地址的方法record_out=Always | adhoc | Never ;去电录音Adhoc须要时,Never从不,Always总是record_in=Never ;来电录音callgroup ;呼叫组type：sip的类型。格式：type =user|peer|friendpickupgroup  ;代接组disallow     ;不允许编码allow        ;允许编码port         ;端口号qualify      ;监视Asterisk服务器与电话之间是否延时host=dynamic ;要求号码要注册,以便Asterisk如何找到电话.(static则不需要注册)</code></pre><h2 id="Asterisk-命令"><a href="#Asterisk-命令" class="headerlink" title="Asterisk 命令"></a>Asterisk 命令</h2><ul><li><p>sip</p><ul><li>sip set debug on  设置显示更多的sip信息</li><li>sip set debug off 关闭显示更多的sip信息</li><li>sip show channels 显示所有活动的SIP通道</li><li>sip show peers 显示所有已定义的SIP peer</li></ul></li><li><p>core</p><ul><li>core show applications 显示所有的应用，比如Dial, Radius, Hangup, Answer等</li><li>core show channels 显示所有的通话频道</li><li>core show codecs 显示所有支持的编解码器</li><li>core show functions 显示所有的功能函数</li><li>core stop gracefully 优雅地停止asterisk/</li><li>core stop now 立即停止运行asterisk</li></ul></li><li><p>module</p><ul><li>module show 显示所有已加载模块</li><li>module load cdr_radius.so     加载模块cdr_radius.so</li><li>module reload cdr_radius.so 重新加载模块cdr_radius.so</li><li>module unload cdr_radius.so 卸载模块cdr_radius.so</li></ul></li></ul><h3 id="application"><a href="#application" class="headerlink" title="application"></a>application</h3><ul><li>Echo()校验工作通道双向通讯</li></ul><h3 id="dialplan"><a href="#dialplan" class="headerlink" title="dialplan"></a>dialplan</h3><p>一般的原则是，拨号方案中的函数可以设置或者获取通道的原数据，但不能做信令或者媒体处理的事情</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Asterisk Quick Start Guide</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>概念解释</p><h3 id="常见模拟器接口和数字接口"><a href="#常见模拟器接口和数字接口" class="headerlink" title="常见模拟器接口和数字接口"></a>常见模拟器接口和数字接口</h3><ul><li><p>模拟接口</p><ul><li>射频</li><li>复合视频</li><li>端子</li></ul></li><li><p>数字接口</p><ul><li>VGA</li><li>DVI</li><li>HDMI</li><li>IEE1394</li><li>光纤</li></ul></li></ul><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>PSTN: Public Switched Telephone Network 公用交换电话网 <a href="http://zh.wikipedia.org/wiki/PSTN" target="_blank" rel="noopener">wiki</a></li><li>SIP: Session Initiation Protocol 会话发起协议 通常用于VOIP电话,进行呼叫建立,呼叫协商,呼叫结束.它帮助两个端互相通认,但它不处理媒体;当呼叫建立后,他通过实时传输协议(RTP)在电话A到电话B直接传输媒体.SIP是一个应用层的信令协议.他使用的端口是5060(通常)进行通信.SIP可以通过UDP和TCP传输层协议进行传输.RTP用于端点间传输媒体(语音),Asterisk中RTP使用大数字的无特权端口(默认10,000到20,000)<br>SIP优点:普通的被接受和结构灵活.其它的VOIP协议还有H.323,IAX,MGCP. <a href="http://zh.wikipedia.org/wiki/%E4%BC%9A%E8%AF%9D%E5%8F%91%E8%B5%B7%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">wiki</a></li><li>IAX: Inter Aasterisk eXchange 协议通常用于服务器间通信,IAX和SIP协议最大区别在于媒体(语音)在端点之间传输的方式不同.Asterisk默认情况是在5060端口接收SIP信令,在10000-20000端口接收RTP(媒体)流.而IAX所有的信令和媒体流都通过一个端口4569进行传输.这种方式的好处是IAX协议能更适合在NAT相关拓扑的应用.IAX用户习惯对进入PBX系统的呼叫进行鉴权和处理.对从PBX系统呼出的呼叫,Asterisk应用IAX的iax.conf文件的端点进入(条目)对远端进行鉴权)</li><li>FXO, FXS 区别: FXO不生成拨号音,而是接收.FXS端口提供拨号音和震铃电压,在有呼叫的时候提醒用户.两者接口都提供双向通讯(同时双方向的通讯传输).如果Asterisk有个兼容FXO端口,就可以把电话线接入这端口,可以使用这根电话线呼叫和接收电话呼叫.同理,如果有个FXS端口,可以连接一部模拟电话,Asterisk就可以呼叫这部电话,可能也可以呼叫.(端口:通过配置使用的信令进行定义). FXS卡必须像中心局(CO)进行运转,使用FXO信令.同理,FXO卡连接CO,就意味着它需要像终端进行运转,使用FXS信令.</li></ul><h1 id="AsteriskWiki书签表"><a href="#AsteriskWiki书签表" class="headerlink" title="AsteriskWiki书签表"></a>AsteriskWiki书签表</h1><p>下面会列出Asterisk相关的知识点链接。</p><ul><li><a href="https://wiki.asterisk.org/wiki/display/AST/Getting+a+Backtrace" target="_blank" rel="noopener">Getting+a+Backtrace</a> 收集Asterisk错误堆栈信息, 才对官方提交bug时需要详细的堆栈信息。</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Secure+Calling+Tutorial" target="_blank" rel="noopener">Secure+Calling+Tutorial</a> 创建证书</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/WebRTC+tutorial+using+SIPML5" target="_blank" rel="noopener">WebRTC+tutorial+using+SIPML5</a> 利用SIPML%建立WebRTC通话</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" target="_blank" rel="noopener">Asterisk+WebRTC+Support</a>Asterisk对WebRTC的支持情况和基本配置。</li><li><p><a href="https://wiki.asterisk.org/wiki/display/AST/Interactive+Connectivity+Establishment+%28ICE%29+in+Asterisk" target="_blank" rel="noopener">Interactive Connectivity Establishment (ICE) in Asterisk</a> Asterisk 关于ICE的设置。</p></li><li><p><a href="https://wiki.asterisk.org/wiki/display/AST/Coding+Guidelines" target="_blank" rel="noopener">Coding+Guidelines</a>Asterisk源码编码规范</p></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Setting+up+PJSIP+Realtime" target="_blank" rel="noopener">This tutorial describes the configuration of Asterisk’s PJSIP channel driver with the “realtime” database storage backend</a> Asterisk 设置PJSIP</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+PJSIP+Troubleshooting+Guide" target="_blank" rel="noopener">Asterisk+PJSIP+Troubleshooting+Guide</a></li><li><p><a href="https://wiki.asterisk.org/wiki/display/AST/Migrating+from+chan_sip+to+res_pjsip" target="_blank" rel="noopener">Migrating from chan_sip to res_pjsip Skip to end of metadata</a></p></li><li><p><a href="https://wiki.asterisk.org/wiki/display/AST/PJSIP+Transport+Selection" target="_blank" rel="noopener">PJSIP+Transport+Selection</a></p></li><li><p><a href="https://wiki.asterisk.org/wiki/display/AST/Configuring+res_pjsip" target="_blank" rel="noopener">Configuring+res_pjsip</a></p></li></ul><h2 id="Asterisk相关协议"><a href="#Asterisk相关协议" class="headerlink" title="Asterisk相关协议"></a>Asterisk相关协议</h2><ul><li><a href="http://www.h3c.com.cn/Products___Technology/Technology/VoIP/Other_technology/Technology_recommend/200805/605897_30003_0.htm" target="_blank" rel="noopener">SIP技术介绍</a></li><li><a href="http://www.h3c.com.cn/Products___Technology/Technology/VoIP/Other_technology/Technology_recommend/200805/605897_30003_0.htm" target="_blank" rel="noopener">H.323技术介绍</a></li><li><a href="http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Five/Home/Catalog/201206/747038_97665_0.htm" target="_blank" rel="noopener">STUN和TURN技术浅析</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="C-概念"><a href="#C-概念" class="headerlink" title="C++概念"></a>C++概念</h1><h2 id="虚函数与纯虚函数区别"><a href="#虚函数与纯虚函数区别" class="headerlink" title="虚函数与纯虚函数区别"></a>虚函数与纯虚函数区别</h2><ol><li>带纯虚函数的类称为虚基类，这种基类不能直接生成对象，而只有被继承并重写其虚函数后才能使用，这样的类叫抽象类。</li><li>虚函数本身有默认实现，它的作用是为了能让其在它的子类里可以被重载，以达到多态，而纯虚函数只是一个接口，仅仅是个函数声明，它必须在子类里实现。</li><li>虚函数在子类里也可以不重载，纯虚函数必须在子类里实现。有纯虚函数的类 不能被实例化。</li></ol><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p><a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="noopener">w3school CSS</a><br><a href="http://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener">w3school CSS3</a></p><h1 id="一些有趣的项目"><a href="#一些有趣的项目" class="headerlink" title="一些有趣的项目"></a>一些有趣的项目</h1><p>记录一些有参考价值的项目.</p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><ul><li><a href="http://cozy.io/en/" target="_blank" rel="noopener">cozy</a> 个人云服务搭建，对联系人，日历，云存储进行管理。</li><li><a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener">winston</a> Node.js的一个异步日志库。可在sails中配置使用.</li><li><a href="https://github.com/ocombe/ocLazyLoad" target="_blank" rel="noopener">ocLazyLoad</a> 对AngularJS中模块或组件进行懒加载。</li><li><a href="https://github.com/marcorinck/angular-growl" target="_blank" rel="noopener">angular-growl</a> 对AngularJS添加notification功能。阿里云使用</li><li><a href="https://github.com/posabsolute/jQuery-Validation-Engine" target="_blank" rel="noopener">jQuery-Validation-Engine</a> jQuery用于验证表单输入。</li><li><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">html5-boilerplate</a> A professional front-end template for building fast, robust, and adaptable web apps or sites.</li><li><a href="https://github.com/videojs/video.js" target="_blank" rel="noopener">video.js</a> Video.js - open source HTML5 &amp; Flash video player</li><li><a href="https://github.com/johnpapa/angular-styleguide" target="_blank" rel="noopener">angular-styleguide</a> <a href="https://github.com/johnpapa/angular-styleguide/blob/master/i18n/zh-CN.md" target="_blank" rel="noopener">中文</a></li><li><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a>javascript的下一代编译器</li><li><a href="node-jscs">node-jscs</a>javascript代码风格检查</li><li><a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">forever</a>A simple CLI tool for ensuring that a given script runs continuously (i.e. forever)</li><li><a href="https://github.com/Automattic/mongoose" target="_blank" rel="noopener">mongoose</a>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment</li><li><a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">supertest</a>Super-agent driven library for testing node.js HTTP servers using a fluent API,模拟HTTP测试</li><li><a href="https://github.com/karma-runner/karma" target="_blank" rel="noopener">karma</a>Spectacular Test Runner for JavaScript</li><li><a href="https://github.com/GoogleChrome/chrome-app-samples" target="_blank" rel="noopener">chrome-app-samples</a> ChromeAPP例子</li></ul><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><ul><li>[butterknife](<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">https://github.com/JakeWharton/butterknife</a> 对界面上元素进行注入绑定</li><li><a href="https://github.com/mmin18/LayoutCast" target="_blank" rel="noopener">LayoutCast</a>通过ADB在Android Studio 动态修改开发APP中的资源属性。</li><li><a href="https://github.com/Ereza/CustomActivityOnCrash" target="_blank" rel="noopener">CustomActivityOnCrash</a>Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.</li><li><a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">fresco</a>An Android library for managing images and the memory they use</li><li><a href="https://github.com/nvanbenschoten/motion" target="_blank" rel="noopener">motion</a>根据观察角度，显示不同图片</li></ul><h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><ul><li><a href="https://github.com/mist64/xhyve" target="_blank" rel="noopener">xhyve</a>xhyve, a lightweight OS X virtualization solution</li><li><a href="https://github.com/open-source-parsers/jsoncpp" target="_blank" rel="noopener">jsoncpp</a> A C++ library for interacting with JSON.</li><li><a href="https://github.com/alibaba/dexposed" target="_blank" rel="noopener">dexposed</a>dexposed enable ‘god’ mode for single android application.</li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li><a href="https://github.com/tj/git-extras" target="_blank" rel="noopener">git-extras</a>GIT utilities – repo summary, repl, changelog population, author commit percentages and more</li></ul><h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><ul><li><a href="https://github.com/Pana/node-books" target="_blank" rel="noopener">node-books</a></li></ul><h2 id="Company"><a href="#Company" class="headerlink" title="Company"></a>Company</h2><ul><li><a href="https://github.com/alibaba" target="_blank" rel="noopener">Alibaba</a></li></ul><p>#<a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a><br><a href="https://github.com/less/less.js" target="_blank" rel="noopener">github</a></p><h1 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h1><p>一种CSS的扩展，像编程一样写CSS.<br><a href="http://sass-lang.com/guide" target="_blank" rel="noopener">入门教程</a><br><a href="https://github.com/sass/sass" target="_blank" rel="noopener">github</a></p><ul><li><p><a href="https://github.com/rakeshpai/pi-gpio" target="_blank" rel="noopener">pi-gpio</a>A simple node.js-based GPIO helper for the Raspberry Pi</p></li><li><p><a href="https://github.com/facebook/infer" target="_blank" rel="noopener">infer</a>A static analyzer for Java, C and Objective-C</p></li></ul><h2 id="权威指南"><a href="#权威指南" class="headerlink" title="权威指南"></a>权威指南</h2><h3 id="设备区分"><a href="#设备区分" class="headerlink" title="设备区分"></a>设备区分</h3><p>三种用户设备:硬电话、软电话和模拟电话适配器（ATA）</p><ul><li>硬电话是一种设备。它看起来像办公室电话:它有听筒,号码按键等。它直接连接到网络，也称为VoIP电话。</li><li><p>软电话是一种运行在台式机或笔记本上的软件。语音要经过计算机的声音系统。最近也有了运行智能手机上的软电话。软电话的界面一般看起来像是普通电话，但不是必须的。</p></li><li><p>模拟电话适配器（ATA）使得传统的模拟电话（或者其他模拟设备，像传真机、无绳电话和寻呼机等）可以接入SIP网络，一般是一个三明治大小的盒子，有一个RJ-11口（一般称为FXS口）用来接电话机，一个RJ-45口用来接网络，和一个电源口。有的ATA支持不止一个电话。</p></li></ul><h3 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h3><p>  <a href="http://www.asterisk.org/asterisknow" target="_blank" rel="noopener">AsteriskNOW</a><br>  <a href="http://www.trixbox.org" target="_blank" rel="noopener">Trixbox</a><br>  <a href="http://www.elastix.org" target="_blank" rel="noopener">Elastix</a><br>  <a href="http://www.pbxinaflash.net" target="_blank" rel="noopener">PBX in a Flash</a></p><h3 id="Asterisk由来"><a href="#Asterisk由来" class="headerlink" title="Asterisk由来"></a>Asterisk由来</h3><p>Dixon的远见卓识使他相信，会有很多其他人看到这个机会，他只需要等待，等某某人实现他所期待的关键进步，然后再动手干。但是几年过去了，他发现不仅没有人创造出他所要的接口卡，也没有迹象表明有人打算这么干。再明显不过了，如果他想要一场革命的话，他得亲手发动它。于是Zapata电话项目诞生了</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-DialBegin/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-DialBegin/</url>
      <content type="html"><![CDATA[<h1 id="DialBegin"><a href="#DialBegin" class="headerlink" title="DialBegin"></a>DialBegin</h1><p>分机主动发起呼叫时产生。<br>主动事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager show event DialBegin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Event: DialBegin</span><br><span class="line">[Synopsis]</span><br><span class="line">Raised when a dial action has started.</span><br><span class="line"></span><br><span class="line">[Syntax]</span><br><span class="line">Event: DialBegin</span><br><span class="line">DialString: &lt;value&gt;</span><br><span class="line"></span><br><span class="line">[Arguments]</span><br><span class="line">DialString</span><br><span class="line">    The non-technology specific device being dialed.</span><br><span class="line"></span><br><span class="line">[See Also]</span><br><span class="line">Dial()</span><br></pre></td></tr></table></figure><p>通道详细参数 telnet 查看。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-Lodash-%E5%BA%93/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-Lodash-%E5%BA%93/</url>
      <content type="html"><![CDATA[<p><a href="https://lodash.com/docs/4.17.15" target="_blank" rel="noopener">Lodash</a> 库<br>lodash 是一个工具函数库，如数组合并，分割等操作。</p><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><ul><li>_.chunk(array, [size=1]) 将数组按指定长度分段</li><li>_.compact(array) 移除数组中的 false, null, 0, “”, undefined, NaN</li><li>_.concat(array, [values]) 将指定数组与值合并新数组</li><li>_.difference(array, [values]) 对数组取交集</li><li>_.drop(array, [n=1]) 移除数组开始指定个数元素</li><li>_.dropRight(array, [n=1]) 移除数组尾部指定个数元素</li><li>_.fill(array, value, [start=0], [end=array.length]) 填充数组新值</li><li>_.findIndex 查询符合条件的元素的下标</li><li>_.flatten(array) 拍平一层数组</li><li>_.flattenDeep(array) 拍平数组</li><li>_.fromPairs 将数组转对象</li><li>_.head 获取数组第一个元素</li><li>_.indexOf 查询元素下标</li><li>_.intersection([arrays]) 交集</li><li>_.join(array, [separator=‘,’) 连接数组为字符串</li><li>_.last(array) 获取最红一个元素</li><li>_.pull(array, [values]) 移除数组中指定元素</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-ExtensionStatus/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-ExtensionStatus/</url>
      <content type="html"><![CDATA[<h1 id="ExtensionStatus"><a href="#ExtensionStatus" class="headerlink" title="ExtensionStatus"></a>ExtensionStatus</h1><p>AMI 分机状态事件，在分机进行响铃，注册等操作时会通过 AMI 抛出对应的事件. 通过命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager show event ExtensionStatus</span><br></pre></td></tr></table></figure></p><p>可以查看详细解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Event: ExtensionStatus</span><br><span class="line">[Synopsis]</span><br><span class="line">Raised when a hint changes due to a device state change.</span><br><span class="line"></span><br><span class="line">[Syntax]</span><br><span class="line">Event: ExtensionStatus</span><br><span class="line">Exten: &lt;value&gt;</span><br><span class="line">Context: &lt;value&gt;</span><br><span class="line">Hint: &lt;value&gt;</span><br><span class="line">Status: &lt;value&gt;</span><br><span class="line">StatusText: &lt;value&gt;</span><br><span class="line"></span><br><span class="line">[Arguments]</span><br><span class="line">Exten</span><br><span class="line">    Name of the extension.</span><br><span class="line">Context</span><br><span class="line">    Context that owns the extension.</span><br><span class="line">Hint</span><br><span class="line">    Hint set for the extension</span><br><span class="line">Status</span><br><span class="line">    Numerical value of the extension status. Extension status is</span><br><span class="line">    determined by the combined device state of all items contained in the</span><br><span class="line">    hint.</span><br><span class="line">    -2 - The extension was removed from the dialplan.</span><br><span class="line">    -1 - The extension&apos;s hint was removed from the dialplan.</span><br><span class="line">    0 - &apos;Idle&apos; - Related device(s) are in an idle state.</span><br><span class="line">    1 - &apos;InUse&apos; - Related device(s) are in active calls but may take</span><br><span class="line">    more calls.</span><br><span class="line">    2 - &apos;Busy&apos; - Related device(s) are in active calls and may not take</span><br><span class="line">    any more calls.</span><br><span class="line">    4 - &apos;Unavailable&apos; - Related device(s) are not reachable.</span><br><span class="line">    8 - &apos;Ringing&apos; - Related device(s) are currently ringing.</span><br><span class="line">    9 - &apos;InUse&amp;Ringing&apos; - Related device(s) are currently ringing and</span><br><span class="line">    in active calls.</span><br><span class="line">    16 - &apos;Hold&apos; - Related device(s) are currently on hold.</span><br><span class="line">    17 - &apos;InUse&amp;Hold&apos; - Related device(s) are currently on hold and in</span><br><span class="line">    active calls.</span><br><span class="line">StatusText</span><br><span class="line">    Text representation of &apos;Status&apos;.</span><br><span class="line">    Idle</span><br><span class="line">    InUse</span><br><span class="line">    Busy</span><br><span class="line">    Unavailable</span><br><span class="line">    Ringing</span><br><span class="line">    InUse&amp;Ringing</span><br><span class="line">    Hold</span><br><span class="line">    InUse&amp;Hold</span><br><span class="line">    Unknown - Status does not match any of the above values.</span><br></pre></td></tr></table></figure><p><strong>分机需要配置 hint</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-Newchannel/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-Newchannel/</url>
      <content type="html"><![CDATA[<h1 id="Newchannel"><a href="#Newchannel" class="headerlink" title="Newchannel"></a>Newchannel</h1><p>当建立新的通话时会产生一条通道。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager show event Newchannel</span><br></pre></td></tr></table></figure></p><p>详细说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Event: Newchannel</span><br><span class="line">[Synopsis]</span><br><span class="line">Raised when a new channel is created.</span><br><span class="line"></span><br><span class="line">[Syntax]</span><br><span class="line">Event: Newchannel</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-x30-mqtt-api/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-x30-mqtt-api/</url>
      <content type="html"><![CDATA[<h2 id="X30接口概述"><a href="#X30接口概述" class="headerlink" title="X30接口概述"></a>X30接口概述</h2><p>订阅主题：</p><pre><code>operation   ------ 基本操作（包含操作：播放 停止）response    ------ 对operation指令的相应update      ------ 更新配置 (包含操作：更新分机号 更新配置文件)event       ------ 事件上传 (比如x30的初始状态）</code></pre><h3 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h3><h4 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h4><p>参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "id": "892348jk234234",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">  "action": "play",  -------字符串：动作名称：播放</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "volume": 50,  -------整型 范围：1-100  音量大小</span><br><span class="line">    "url": "http://xxxx" -------- 字符串：音源网络地址</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="停止播放音乐"><a href="#停止播放音乐" class="headerlink" title="停止播放音乐"></a>停止播放音乐</h4><p>参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "id": "892348jk234235",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">  "action": "stop",  -------字符串：动作名称：停止播放</span><br><span class="line">  "data": &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><h4 id="播放音乐响应"><a href="#播放音乐响应" class="headerlink" title="播放音乐响应"></a>播放音乐响应</h4><p>异步响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "id": "892348jk234234",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">    "action": "play",  -------字符串：动作名称：播放</span><br><span class="line">    "status": "playing" ------字符串：状态：playing(已完成) idle(空闲) error(错误)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="停止播放音乐响应"><a href="#停止播放音乐响应" class="headerlink" title="停止播放音乐响应"></a>停止播放音乐响应</h4><p>异步响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "id": "892348jk234235",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">    "action": "stop",  -------字符串：动作名称：停止播放</span><br><span class="line">    "status": "idle" ------字符串：状态：playing(已完成) idle(空闲) error(错误)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新分机号响应"><a href="#更新分机号响应" class="headerlink" title="更新分机号响应"></a>更新分机号响应</h4><p>异步响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "id": "892348jk234236",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">    "action": "set-exten",  -------字符串：动作名称：停止播放</span><br><span class="line">    "status": "completed" ------字符串：状态：completed(已完成) error(错误)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><h5 id="更新分机号"><a href="#更新分机号" class="headerlink" title="更新分机号"></a>更新分机号</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "id": "892348jk234236",  -------字符串：任务id，也是和响应使用的id</span><br><span class="line">  "action": "set-exten",  -------字符串：动作名称：设置分机号</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "host": "192.168.1.100",  -------字符串： sip服务器ip地址</span><br><span class="line">    "exten": "800",  -------字符串：分机号码</span><br><span class="line">    "password": "Ab123456"  ------字符串：分机密码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><h4 id="初始化报告x30的各状态"><a href="#初始化报告x30的各状态" class="headerlink" title="初始化报告x30的各状态"></a>初始化报告x30的各状态</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "action": "init",  ------字符串  数据类型：响应</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "solf-volume": 75,  -------整型：系统软件音量</span><br><span class="line">    "hard-volume": 100,  -------整型：系统硬件音量</span><br><span class="line">    "exten": "800", ------字符串：系统当前分机号</span><br><span class="line">    "status": "idle",  --------字符串：系统当前的播放状态 playing(正在播放) idle(停止) error(错误)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%B7%A5%E4%BD%9C-Esp32/"/>
      <url>/2020/03/16/%E5%B7%A5%E4%BD%9C-Esp32/</url>
      <content type="html"><![CDATA[<p>esp32<br>esp32 是一款非常流行的物联网开发基础芯片，支持 wifi, 蓝牙, gpio 等。 更多介绍查看 <a href="https://www.espressif.com/zh-hans/products/hardware/esp32/overview" target="_blank" rel="noopener">ESP32</a>。 由于我也是才入门，所以记录一些学习资料与大家共享.</p><ul><li><a href="https://www.espressif.com/zh-hans/support/iot-college/courses?field_type_tid=13&amp;field_course_language_tid=All" target="_blank" rel="noopener">课程</a> 在这里能有很多相关的课程/书籍/代码.</li><li><a href="https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-mac-and-linux-instructions/" target="_blank" rel="noopener">esp32 Arduino 开发配置（OSX）</a></li><li><a href="https://randomnerdtutorials.com/esp32-web-server-arduino-ide/" target="_blank" rel="noopener">实现一个 web server 控制灯的开/关</a></li><li><a href="https://www.arduino.cc/en/Main/software" target="_blank" rel="noopener">arduino 下载</a> arduino 可以作为 esp32 的开发 ide， 也可以使用 eclipse.</li><li><a href="https://github.com/espressif/esp-idf/blob/master/README_CN.md" target="_blank" rel="noopener">Esp IDF</a> esp 开发环境</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/get-started/index.html#" target="_blank" rel="noopener">Esp IDF 入门指南</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%80%9D%E8%80%83-%E5%8D%95%E5%8F%8D/"/>
      <url>/2020/03/16/%E6%80%9D%E8%80%83-%E5%8D%95%E5%8F%8D/</url>
      <content type="html"><![CDATA[<p>单反<br>  作为一个没有什么啥子爱好的少年（中年），一次冲动消费买了一个单反。 吃灰两年，由于没有时间缺少拍的事物所以就放弃了。 但是学习是终身的，记录一些单反学习资料.</p><ul><li>视频课程 <a href="https://www.bilibili.com/video/av1114448" target="_blank" rel="noopener">摄影吴师自通</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E7%BF%BB%E8%AF%91-Asterisk-Definitive-AMI/"/>
      <url>/2020/03/16/%E7%BF%BB%E8%AF%91-Asterisk-Definitive-AMI/</url>
      <content type="html"><![CDATA[<p>#Asterisk Manager Interface(AMI)</p><p>The Asterisk Manager Interface (AMI) is a system monitoring and management inter‐face provided by Asterisk. It allows live monitoring of events that occur in the system,as well as enabling requests for Asterisk to perform some action. The available actions are wide-ranging and include things such as returning status information and origi‐nating new calls. Many interesting applications have been developed on top of Asteriskthat use the AMI as their primary interface to Asterisk.</p><p>Asterisk提供AMI作为系统监控和管理接口. 它能实时监控系统中产生的事件消息, 而且能够向Astreisk发起一些操作请求. 可以实现很多的操作, 例如返回状态消息或发起新的呼叫. 基于Asterisk的AMI作为主要的接口实现出很多有用的程序.</p><p>This chapter also includes documentation on the use of call files. Asterisk’s call files are an easy way to originate a few calls. Once call origination volume increases or your needs become otherwise more complex, you can move on to using the AMI. Details can be found in “Call Files” on page 569.</p><p>这章还包括了对呼叫文档的使用方法. 通过Asterisk的呼叫配置文件可以很容易的发起电话呼叫.AMI可以实现音量增加等复杂操作.在569页可以看见更详细的关于Call Files的内容.</p><p>##Quick Start 快速开始</p><p>This section is for getting your hands dirty with the AMI as quickly as possible. First,put the following configuration in /etc/asterisk/manager.conf:</p><p>本小节让你尽可能快的使用AMI, 首先，将下面的配置文件放到/etc/asterisk/manager.conf文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; Turn on the AMI and ask it to only accept connections from localhost.</span><br><span class="line">;</span><br><span class="line">[general]</span><br><span class="line">enabled = yes</span><br><span class="line">webenabled = yes</span><br><span class="line">bindaddr = 127.0.0.1</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">; Create an account called &quot;hello&quot;, with a password of &quot;world&quot;</span><br><span class="line">;</span><br><span class="line">[hello]</span><br><span class="line">secret=world</span><br><span class="line">read=all  ; Receive all types of events</span><br><span class="line">write=all ; Allow this user to execute all actions</span><br></pre></td></tr></table></figure><p>Once the AMI configuration is ready, enable the built-in HTTP server by putting the following contents in /etc/asterisk/http.conf:</p><p>当完成AMI的配置后，将下面的内容添加到/etc/asterisk/http.conf从而开启内置的HTTP服务器.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">;</span><br><span class="line">; Enable the built-in HTTP server, and only listen for connections on localhost.</span><br><span class="line">;</span><br><span class="line">[general]</span><br><span class="line">enabled = yes</span><br><span class="line">bindaddr = 127.0.0.1</span><br></pre></td></tr></table></figure><p>###AMI over TCP 基于TCP实现的AMI</p><p>There are multiple ways to connect to the AMI, but a TCP socket is the most common.We will use telnet to demonstrate AMI connectivity. This example shows these steps:</p><p>可以通过多种方式连接到AMI, 但是常见方式是使用TCP套接字实现. 我们将使用Telnet的方式去展示AMI连接.通过下面的步骤实现一个例子.</p><ol><li>Connect to the AMI over a TCP socket on port 5038. //通过基于TCP套接字的5038的端口连接到AMI</li><li>Log in using the Login action. //使用Login实现登录</li><li>Execute the Ping action. //执行Ping</li><li>Log off using the Logoff action. //使用Logoff实现注销</li></ol><p>Here’s how the AMI responds to those actions:</p><p>下面是AMI对于这些操作的响应:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ telnet localhost 5038</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">Asterisk Call Manager/1.1</span><br><span class="line">Action: Login</span><br><span class="line">Username: hello</span><br><span class="line">Secret: world</span><br><span class="line">Response: Success</span><br><span class="line">Message: Authentication accepted</span><br><span class="line"></span><br><span class="line">Action: Ping</span><br><span class="line">Response: Success</span><br><span class="line">Ping: Pong</span><br><span class="line">Timestamp: 1282739190.454046</span><br><span class="line"></span><br><span class="line">Action: Logoff</span><br><span class="line">Response: Goodbye</span><br><span class="line">Message: Thanks for all the fish.</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>Once you have this working, you have verified that AMI is accepting connections via a TCP connection.</p><p>当实现上面的步骤, 你就可以确认AMI通过TCP连接建立连接.</p><p>###AMI over HTTP 基于HTTP实现AMI</p><p>It is also possible to use the AMI over HTTP. In this section we will perform the same<br>actions as before, but over HTTP instead of the native TCP interface to the AMI. AMI<br>over HTTP is covered in more detail in “AMI over HTTP” on page 564.</p><p>另外, 可以使用基于HTTP和AMI通信.在本节我们会执行前面相同的操作, 但是通过的方式是HTTP而不是AMI的本地的TCP接口.在564页的”AMI over HTTP”包含了更详细的关于基于HTTP实现的AMI。</p><p>This example demonstrates how to access the AMI over HTTP, log in, execute the Ping action, and log off:</p><p>这个例子会展示如何通过HTTP去访问AMI,并实现登录，执行Ping,注销操作.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ wget &quot;http://localhost:8088/rawman?action=login&amp;username=hello&amp;secret=world&quot; \</span><br><span class="line">&gt; --save-cookies cookies.txt -O -</span><br><span class="line">--2010-08-31 12:34:23--</span><br><span class="line">Resolving localhost... 127.0.0.1</span><br><span class="line">Connecting to localhost|127.0.0.1|:8088... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 55 [text/plain]</span><br><span class="line">Saving to: `STDOUT&apos;</span><br><span class="line">Response: Success</span><br><span class="line">Message: Authentication accepted</span><br><span class="line">2010-08-31 12:34:23 (662 KB/s) - written to stdout [55/55]</span><br><span class="line"></span><br><span class="line">//实验不成功</span><br><span class="line">$ wget &quot;http://localhost:8088/rawman?action=ping&quot; --load-cookies cookies.txt -O -</span><br><span class="line">--2010-08-31 12:34:23--</span><br><span class="line">Resolving localhost... 127.0.0.1</span><br><span class="line"></span><br><span class="line">Connecting to localhost|127.0.0.1|:8088... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 63 [text/plain]</span><br><span class="line">Saving to: `STDOUT&apos;</span><br><span class="line">Response: Success</span><br><span class="line">Ping: Pong</span><br><span class="line">Timestamp: 1283258063.040293</span><br><span class="line">2010-08-31 12:34:23 (775 KB/s) - written to stdout [63/63]</span><br><span class="line"></span><br><span class="line">$ wget &quot;http://localhost:8088/rawman?action=logoff&quot; --load-cookies cookies.txt -O -</span><br><span class="line">--2010-08-31 12:34:23--</span><br><span class="line">Resolving localhost... 127.0.0.1</span><br><span class="line">Connecting to localhost|127.0.0.1|:8088... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 56 [text/plain]</span><br><span class="line">Saving to: `STDOUT&apos;</span><br><span class="line">Response: Goodbye</span><br><span class="line">Message: Thanks for all the fish.</span><br><span class="line">2010-08-31 12:34:23 (696 KB/s) - written to stdout [56/56]</span><br></pre></td></tr></table></figure><p>The HTTP interface to AMI lets you integrate Asterisk call control into a web service.</p><p>AMI的HTTP接口将呼叫控制整合进一个web服务.</p><p>##Configuration 配置</p><p>The section “Quick Start” on page 553 showed a very basic set of configuration files to get you started. However, there are many more options available for the AMI.</p><p>在553的”快速开始”一节展现了一个非常基本的配置文件来帮助开始使用, 然而, AMI包含了更多可用的选项设置.</p><p>###manager.conf</p><p>The main configuration file for the AMI is /etc/asterisk/manager.conf. The [general] section contains options (listed in Table 20-1) that control the overall operation of the AMI. Any other sections in the manager.conf file will define accounts for logging in and using the AMI.</p><p>AMI的主要配置文件是/etc/asterisk/manager.conf. [general]段包含的选项对AMI的整体运行都起作用. </p><p>###http.conf</p><p>As we’ve seen, the Asterisk Manager Interface can be accessed over HTTP as well as TCP. To make that work, a very simple HTTP server is embedded in Asterisk. All of the options relevant to the AMI go in the [general] section of /etc/asterisk/http.conf.</p><p>正象我们看到的这样, AMI可以象使用TCP一样通过HTTP访问. 开启Asterisk上的一个简单的HTTP Server就可以正常工作. 在/etc/asterisk/http.conf中的[general]段可以设置相关选项.</p><p>##Protocol Overview 协议概述</p><p>###Message Encoding 消息编码</p><p>###Events 事件</p><p>###Actions 动作</p><p>##AMI over HTTP</p><p>###Manager events</p><p>##Call Files</p><p>##Example Usage</p><p>Most of this chapter so far discussed the concepts and configuration related to the AMI.<br>This section will provide some example usage.</p><p>这章讨论了很多关于AMI的概念和配置, 本小结将提供一个使用例子.</p><p>###Originating a Call 发起拨号</p><p>The AMI has the Originate manager action that can be used to originate a call. Many of the accepted headers are the same as the options placed in call files. Table 20-6 lists the headers accepted by the Originate action.</p><p>AMI的Originate操作可以用来发起拨号操作. </p><p>The simplest example of using the Originate action is via telnet:<br>下面是一个通过telent执行Originate操作的简单例子.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ telnet localhost 5038</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">Asterisk Call Manager/1.3</span><br><span class="line">Action: Login</span><br><span class="line">Username: hello</span><br><span class="line">Secret: world</span><br><span class="line">Response: Success</span><br><span class="line">Message: Authentication accepted</span><br><span class="line">Action: Originate</span><br><span class="line">Channel: Local/loop@test</span><br><span class="line">Application: Playback</span><br><span class="line">Data: demo-congrats</span><br><span class="line">Response: Success</span><br><span class="line">Message: Originate successfully queued</span><br><span class="line">^]</span><br><span class="line">telnet&gt; quit</span><br><span class="line">Connection closed</span><br></pre></td></tr></table></figure><p>###Redirecting a Call 呼叫转移</p><p>Redirecting (or transferring) a call from the AMI is another feature worth mentioning. The Redirect AMI action can be used to send one or two channels to any other exten‐sion in the Asterisk dialplan. If you need to redirect two channels that are bridged together, do them both at the same time. Otherwise, once one channel has been redi‐rected, the other will be hung up.</p><p>AMI另外一个很有价值的特性是重定向, 在Asterisk的拨号方案中，AMI的重定向可以用于发送一个或两个通道到其他扩展. 当需要将两个通道在一起重定向时，必须在相同的时间执行. 否则，当一个通道被重定向时，另一个就会挂断. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">To redirect a single channel:</span><br><span class="line">Action: Redirect</span><br><span class="line">Channel: SIP/myphone-0011223344</span><br><span class="line">Exten: 1234</span><br><span class="line">Context: default</span><br><span class="line">Priority: 1</span><br><span class="line">To redirect two channels:</span><br><span class="line">Action: Redirect</span><br><span class="line">Channel: SIP/myphone-0011223344</span><br><span class="line">Context: default</span><br><span class="line">Exten: 1234</span><br><span class="line">Priority: 1</span><br><span class="line">ExtraChannel: SIP/otherphone-0011223344</span><br><span class="line">ExtraContext: default</span><br><span class="line">ExtraExten: 5678</span><br><span class="line">ExtraPriority: 1</span><br></pre></td></tr></table></figure><p>One fairly common use of the redirect action from an external application is to redirect both parties of a call into a conference bridge. Place this context in your dialplan:</p><p>一个更常用的使用重定向的时候是外部程序将通话双方重定向到一个会议中.将下面的内容添加到你的拨号方案中.</p><pre><code>[confbridge]exten =&gt; _X.,1,ConfBridge(${EXTEN})</code></pre><p>You could now redirect any two callers into a conference bridge using something like this:</p><p>你可以像下面的方式去重定向任意两个通话的人到会议中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Action: Redirect</span><br><span class="line">Channel: SIP/myphone-0011223344</span><br><span class="line">Context: confbridge</span><br><span class="line">Exten: 1234</span><br><span class="line">Priority: 1</span><br><span class="line">ExtraChannel: SIP/otherphone-0011223344</span><br><span class="line">ExtraContext: confbridge</span><br><span class="line">ExtraExten: 1234</span><br><span class="line">ExtraPriority: 1</span><br></pre></td></tr></table></figure><p>Now other callers could join this bridge, or the external application using the AMI could proceed to redirect other channels to this bridge.</p><p>现在其他的通话者就可以加入到这个桥接中， 或者使用扩展程序将其他的通道重定向到这个桥接中.</p><p>###Originating a Call Using Python and StartPy</p><p>To help further demonstrate the use of the Originate action, we have provided a script that uses it. The full script is in Example 20-1.  It can be downloaded from <a href="https://github.com/russellb/amiutils" target="_blank" rel="noopener">https://github.com/russellb/amiutils</a>. To get an idea of the usage of the example application, here is the help output:</p><p>为了帮助更容易的展示如何发起一个操作, 我们提供了一个脚本来实现这个步骤. 完整的脚本在例20-1. 也可以在从<a href="https://github.com/russellb/amiutils" target="_blank" rel="noopener">https://github.com/russellb/amiutils</a>下载. 为了容易使用这个脚本程序， 下面是帮助文档的输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ./amioriginate.py --help //输出省略</span><br></pre></td></tr></table></figure><p>If you run the utility in debug mode, you can see the raw AMI message exchange. First, here is an example of using the script to originate a call and connect it to an application. The MSG OUT and Line In lines in the output identify the AMI exchange. The MSG OUT lines are showing the AMI action in an internal format to the application instead of the raw AMI format, but you can still see the headers and their values. The Line In lines show the raw TCP response from Asterisk. The output shows:</p><p>如果你在调试模式运行这个脚本, 你会看见AMI交互的原始消息. 首先, 这是一个使用脚本发起呼叫并连接它到一个程序的例子. MSG OUT 和 Line In 在输出的每行中标示AMI信息. MSG OUT 用内部格式去替换了原始AMI的格式显示AMI的操作, 但是你仍然可以得到标题和值的信息. Line In 显示了从Asterisk得到的原始TCP响应信息. 输出显示如下:</p><ol><li>The application requests to log into the AMI.  //    程序请求登录到AMI</li><li>Asterisk responds, accepting the authentication request.  //Asterisk的响应消息, 接受认证请求</li><li>The application sends a request to originate a call.  // 程序请求发起电话呼叫</li><li>Asterisk responds indicating that the origination request has been successfully  //Asterisk响应表明请求成功</li></ol><p>processed. The call will occur asynchronously since the originate request included Async: True . Otherwise, we would not get a response until the outbound call either answers or fails for some reason.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ./amioriginate.py -d -u hello -p world \</span><br><span class="line">&gt; -a playback -D demo-congrats SIP/myphone</span><br><span class="line">DEBUG:AMI:MSG OUT: &#123;&apos;action&apos;: &apos;login&apos;, &apos;username&apos;: &apos;hello&apos;, &apos;secret&apos;: &apos;world&apos;,</span><br><span class="line">&apos;actionid&apos;: &apos;rhel6.3-server-28064728-1&apos;&#125;</span><br><span class="line">DEBUG:AMI:Line In: &apos;Asterisk Call Manager/1.3&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;Response: Success&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;ActionID: rhel6.3-server-28064728-1&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;Message: Authentication accepted&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;&apos;</span><br><span class="line">DEBUG:AMI:MSG OUT: &#123;&apos;application&apos;: &apos;playback&apos;,</span><br><span class="line">&apos;actionid&apos;: &apos;rhel6.3-server-28064728-2&apos;,</span><br><span class="line">&apos;variable&apos;: &apos;&apos;, &apos;async&apos;: &apos;True&apos;, &apos;data&apos;: &apos;demo-congrats&apos;,</span><br><span class="line">&apos;action&apos;: &apos;originate&apos;, &apos;channel&apos;: &apos;SIP/myphone&apos;&#125;</span><br><span class="line">DEBUG:AMI:Line In: &apos;Response: Success&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;ActionID: rhel6.3-server-28064728-2&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;Message: Originate successfully queued&apos;</span><br><span class="line">DEBUG:AMI:Line In: &apos;&apos;</span><br></pre></td></tr></table></figure><p><em>Example 20-1 amioriginate.py //省略</em></p><p>##Development Frameworks</p><p>##CSTA</p><p>##Interesting Applications 有用的应用<br>Many useful applications have been developed that take advantage of the AMI. Here is one example.</p><p>###Flash Operator Panel</p><p>##Conclusion 总结<br>The Asterisk Manager Interface provides an API for monitoring events from an Asterisk system, as well as requesting that Asterisk perform a wide range of actions. An HTTP interface has been provided and a number of frameworks have been developed that<br>make it easier to develop applications. All of this information, as well as the examples we looked at at the end of this chapter, should get you thinking about what new appli‐cations you might be able to build using the Asterisk Manager Interface</p><p>AMI提供了监控Asterisk事件的API， 从而请求Asterisk执行很多的功能操作.通过提供的框架和HTTP接口可以很容易的开发应用. 通过本章的信息和前面的例子，思考基于AMI建立新的应用. </p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E7%BF%BB%E8%AF%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/"/>
      <url>/2020/03/16/%E7%BF%BB%E8%AF%91-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h1 id="Asterisk-与数据库集成"><a href="#Asterisk-与数据库集成" class="headerlink" title="Asterisk 与数据库集成"></a>Asterisk 与数据库集成</h1><p>原文包含了两种系统( Ubuntu 与 RHEL )，两种数据库( MySQL 与 PostgreSQL )的使用介绍, 本文测试使用 Ubuntu 与 MySQL</p><h2 id="ubuntu-下安装-mysql"><a href="#ubuntu-下安装-mysql" class="headerlink" title="ubuntu 下安装 mysql"></a>ubuntu 下安装 mysql</h2><h2 id="ubuntu-安装配置-ODBC"><a href="#ubuntu-安装配置-ODBC" class="headerlink" title="ubuntu 安装配置 ODBC"></a>ubuntu 安装配置 ODBC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install unixodbc unixodbc-dev libmyodbc</span><br></pre></td></tr></table></figure><p> 在 ubuntu 16.4 的版本中不能正常安装 libmyodbc, 参考链接<br> <a href="http://askubuntu.com/questions/800216/installing-ubuntu-16-04-lts-how-to-install-odbc" target="_blank" rel="noopener">http://askubuntu.com/questions/800216/installing-ubuntu-16-04-lts-how-to-install-odbc</a><br> <a href="https://bugs.launchpad.net/ubuntu/+source/asterisk/+bug/1591086" target="_blank" rel="noopener">https://bugs.launchpad.net/ubuntu/+source/asterisk/+bug/1591086</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E8%BD%AF%E4%BB%B6-Android-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/16/%E8%BD%AF%E4%BB%B6-Android-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="Android-软件安装"><a href="#Android-软件安装" class="headerlink" title="Android 软件安装"></a>Android 软件安装</h1><p>国内手机使用 google 服务， 已经一些相关软件。</p><ul><li>谷歌安装器 安装服务相关框架</li><li>shadowsocks</li><li>youtube</li><li>twitter</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E8%BD%AF%E4%BB%B6-Fathom/"/>
      <url>/2020/03/16/%E8%BD%AF%E4%BB%B6-Fathom/</url>
      <content type="html"><![CDATA[<h1 id="Fathom"><a href="#Fathom" class="headerlink" title="Fathom"></a><a href="https://usefathom.com/" target="_blank" rel="noopener">Fathom</a></h1><p>类似谷歌的网址访问统计。对，这又是一个自建软件。相对谷歌分析的优势</p><ul><li>数据更安全</li><li>对于墙内的人用了 google 统计可能会导致访问网页缓慢</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/usefathom/fathom" target="_blank" rel="noopener">Github</a> 见详细步骤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f, a, t, h, o, m</span>)</span>&#123;</span><br><span class="line">a[h]=a[h]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">(a[h].q=a[h].q||[]).push(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;;</span><br><span class="line">o=f.createElement(<span class="string">'script'</span>),</span><br><span class="line">m=f.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</span><br><span class="line">o.async=<span class="number">1</span>; o.src=t; o.id=<span class="string">'fathom-script'</span>;</span><br><span class="line">m.parentNode.insertBefore(o,m)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>, <span class="string">'//my-fathom-site.com/tracker.js'</span>, <span class="string">'fathom'</span>);</span><br><span class="line">fathom(<span class="string">'trackPageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注意添加端口</p><h2 id="问题-amp-解决"><a href="#问题-amp-解决" class="headerlink" title="问题&amp;解决"></a>问题&amp;解决</h2><ul><li>若浏览器开启 <strong>Do Not Track</strong>, 会导致不能收集数据。</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E8%BD%AF%E4%BB%B6-%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2/"/>
      <url>/2020/03/16/%E8%BD%AF%E4%BB%B6-%E7%BD%91%E7%BB%9C%E5%97%85%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>#网络嗅探</p><p>##Wireshark</p><p>##网卡四种工作模式</p><p>##<a href="http://www.tcpdump.org/" target="_blank" rel="noopener">libpcap</a><br>数据包捕获函数库,<a href="https://github.com/the-tcpdump-group/libpcap" target="_blank" rel="noopener">https://github.com/the-tcpdump-group/libpcap</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E8%BD%AF%E4%BB%B6-Pm2-%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/16/%E8%BD%AF%E4%BB%B6-Pm2-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Pm2-使用"><a href="#Pm2-使用" class="headerlink" title="Pm2 使用"></a>Pm2 使用</h1><p>Pm2 是由 Node.js 实现的后台守护管理工具，并且具有日志/状态上报等功能。</p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start -x <span class="string">'/CC-System/frp/frpc'</span> -n frpc -- -c /CC-System/frp/frpc.ini</span><br><span class="line">$ pm2 startup</span><br><span class="line">$ pm2 save</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E8%BD%AF%E4%BB%B6-%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
      <url>/2020/03/16/%E8%BD%AF%E4%BB%B6-%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      <content type="html"><![CDATA[<h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h1><p>树莓派可以安装官方系统或其他特殊系统例如 osmc等。</p><h2 id="官方系统安装"><a href="#官方系统安装" class="headerlink" title="官方系统安装"></a>官方系统安装</h2><ul><li><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">下载</a> 桌面版不成功可以尝试 lite 版。</li><li><p>使用 dd 安装系统 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diskutil list //查看磁盘</span><br><span class="line">diskutil unmountDisk /dev/disk2? //卸载</span><br><span class="line">sudo dd <span class="keyword">if</span>=*.img of=/dev/disk2 //写入镜像</span><br></pre></td></tr></table></figure></li><li><p>开启远程登录 <strong>创建 ssh 文件</strong></p></li></ul><h2 id="替换安装源"><a href="#替换安装源" class="headerlink" title="替换安装源"></a>替换安装源</h2><p>注意替换对应版本的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt </span><br><span class="line">nano sources.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> sources.list.d </span><br><span class="line">nano raspi.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</span><br><span class="line"></span><br><span class="line">sudo apt-get update -y </span><br><span class="line">sudo apt-get dist-upgrade -y</span><br></pre></td></tr></table></figure><h2 id="node-nvm"><a href="#node-nvm" class="headerlink" title="node/nvm"></a>node/nvm</h2><p>wget -qO- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh</a> | bash</p><h2 id="USB-摄像头"><a href="#USB-摄像头" class="headerlink" title="USB 摄像头"></a>USB 摄像头</h2><p><a href="https://blog.csdn.net/dearwind153/article/details/52563141" target="_blank" rel="noopener">https://blog.csdn.net/dearwind153/article/details/52563141</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E6%80%9D%E8%80%83-%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E8%87%AA%E5%B7%B1/"/>
      <url>/2020/03/16/%E6%80%9D%E8%80%83-%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<h1 id="如何改变自己"><a href="#如何改变自己" class="headerlink" title="如何改变自己"></a>如何改变自己</h1><p>许士伟 在极客时间里面说到，做一个技术人员要有足够的宽度。 如果不懂业务也就做不好开发。 所有以后我要强迫自己走出去，多交流。如下方式参考:</p><ul><li>多看相关视频</li><li>相关论坛活跃</li><li>建立自己的开源生态</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/Node-JavaScript/"/>
      <url>/2020/03/16/Node-JavaScript/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><p>通过 object.keys() 可以容易将 map 的键构建一个新的数组。在循环中可以避免调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hasOwnProperty()</span><br></pre></td></tr></table></figure></p><p>判断是否是当前对象的属性。</p><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var let const"></a>var let const</h2><p>var 没有块作用域限制，对变量的声明周期容易困惑。<br><strong>坚持使用新关键字声明变量</strong></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>对 this 的处理更好</li></ul><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><p>使用模版字符串可以更容易的拼接需要的字符串格式。</p><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>参数使用 … 传递，可以在函数内部得到一个参数数组。<br>也可以在传递参数时通过 … 解开参数</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>通过关键字 class 在原型基础上实现 oo。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/Vue-%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/03/16/Vue-%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="进程-线程"><a href="#进程-线程" class="headerlink" title="进程/线程"></a>进程/线程</h1><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁发生在一个服务器和客服端同时向一个连接读或写</p><ul><li>send 和 recv交叉进行</li><li>连续send发送的数据不能太大</li><li>多线程</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/Vue-TCP-IP/"/>
      <url>/2020/03/16/Vue-TCP-IP/</url>
      <content type="html"><![CDATA[<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><h2 id="TCP基础"><a href="#TCP基础" class="headerlink" title="TCP基础"></a>TCP基础</h2><p>Internet是在一些共享的线路上发送数据，为实现共享，TCP是通过把需要发送的数据流分解为很多的小信息包在Internet上传输,而这些信息包在接受者的地方会再次重新合成在一起，因为信息包很小，会用很少的时间发送数据，从而其他程序的信息包可以同时传送。</p><h3 id="寻址-每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。"><a href="#寻址-每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。" class="headerlink" title="寻址:每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。"></a>寻址:每个TCP连接的端点是由一个IP地址和一个端口号来唯一标识的。</h3><p>TCP是可靠的协议，通过几个规则来实现：</p><ul><li>防止数据在传输过程中被损坏， 每个信息包都包含一个校验码.</li><li>防止信息包丢失，TCP会要求接受方每收到一个信息包都要反馈一下， 否则自动重发。</li><li>防止信息包重复和顺序出错，TCP每传送一个信息不都会传送一个序号。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>在Internet上负责接收信息包并决定如何把他们传送到目的地的设备叫路由器。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>SSL,TLS。SSL是在TCP上连接的，与程序代码混合在一起。提供服务器的认证，加密，数据完整性。TLS只包含在协议堆栈中。</p><h3 id="S-C"><a href="#S-C" class="headerlink" title="S/C"></a>S/C</h3><p>客服端总是最开始连接的一端，服务器是等待客服端连接的一端</p><h3 id="端口列表"><a href="#端口列表" class="headerlink" title="端口列表"></a>端口列表</h3><p>/etc/services, 最大端口：65535， Linux系统请求小于1024的端口需要root</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>只保证收到的数据是完整的，不保证数据是否收到，是否只有一次， 次序是否一致。UDP长用在向服务器申请一个bite的数据,如果没有收到就继续申请。（DNS系统， 音频， 视频， 网络文件系统）.UDP限制一个信息包不能超过64ＫＢ.</p><p>软件通过检查源计算机和目的计算机的ＩＰ地址的头几位判断是本地还是远程。<br>服务器需要通过事先知道的端口来监听连接， 当客服端发起连接时，它的操作系统会选择一个事先不知道的端口号建立socket需要两部：</p><p>1.建立一个socket对象,通信类型(IPv4, IPv6, IPX/SPX, AFP)和协议家族(定义数据如何传输， SOCK_STREAM, SOCK_DGRAM)例如：s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   ipv4,tcp</p><p>2.连接到远程的服务器上s.connect((‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">www.example.com&#39;</a>, 80))    need a tuple<br>    C语言的connect()函数需要远程机器的ip地址， Python会利用DNS把域名自动的转换为IP地址<br>    Python的socket库包含一个getservbyname()的函数， 他可以自动查询,需要两个参数端口名和协议名</p><pre><code>port = socket.getservbyname(&apos;ftp&apos;,&apos;tcp&apos;)socketIml.getsockname() 得到本身的ip地址和端口号socketIml.getpeername()    得到远程的ip地址和端口号</code></pre><h3 id="socket对象和文件对象的比较"><a href="#socket对象和文件对象的比较" class="headerlink" title="socket对象和文件对象的比较"></a>socket对象和文件对象的比较</h3><ul><li>socket对象:读写数据时，需要协议可以详细地控制，使用二进制协议传送固定大小数据，数据超时需要处理，ＵＤＰ</li><li>文件对象: 面向线性的协议，一般只对TCP连接工作很好</li></ul><p>数据只有在调用了shutdown()函数后才能确保被发送,创建文件对象时如果指定了缓冲区，就需要调用flush(),即使有了文件对象也要保存socket对象，shutdown()只有socket对象才有.不同协议(TCP,UDP)可以使用相同的端口. recvfrom()调用返回一个tuple, 包括接受的数据和发送数据的地址,一个服务器进程终止后，操作系统会保留几分钟他的端口，防止其他的进程在超时前使用这个端口。</p><p>SO_REUSEADDR为true,会立刻释放端口不同平台的Pytho支持的socket选项不同。通过dir(socket)查看bind()第一个参数为空，表示绑定所有的接口和地址syslog优先权</p><pre><code>LOG_EMERG 紧急情况，系统非正常关机或不能用LOG_ALERT 向管理员发送警报LOG_CRIT  产生了一个致命错误LOG_ERR      产生了一个普通错误LOG_WARNING 一个警告LOG_NOTICE 重要的正常通知LOG_INFO 普通信息L0G_DEBUG 调试信息</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-%E6%96%87%E4%BB%B6%E4%BC%A0%E9%80%81/</url>
      <content type="html"><![CDATA[<h1 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h1><p>在多台电脑直接文件传送的方式主要包括移动存储和网络.由于 fat32 格式的限制不能存储超过 4g 的文件，当需要在两台电脑直接进行复制时有两种方式.</p><ol><li>对移动存储格式化为非 fat32 的格式.</li><li>通过局域网络传送.</li></ol><h2 id="局域网文件传送"><a href="#局域网文件传送" class="headerlink" title="局域网文件传送"></a>局域网文件传送</h2><p>将多台电脑连接在相同的局域网是一件简单的事情, 然后对于传送软件可以有如下选择:</p><ol><li>scp 主要针对 Linux 系统.</li><li>建立一个简单的 Http 服务器, 然后通过网络打开对应页面后进行下载. 对于不同的编程语言大多有一句命令实现 http 服务器的方式。 Node.js 可以直接通过如下命令安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br></pre></td></tr></table></figure><p>然后运行到需要下载的页面运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure><p>就可以了。</p><ol start="3"><li>利用 QQ 等其它软件.<a href="https://github.com/RobinLinus/snapdrop" target="_blank" rel="noopener">snapdrop</a> 是一种类似 AirDrop 的局域网传送,不需要安装任何软件。</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-http-XSS/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-http-XSS/</url>
      <content type="html"><![CDATA[<p>title:XSS<br>date:2018-09-26<br>tags:http, xss</p><hr><p>XSS，即 Cross Site Script，中译是跨站脚本攻击。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting" target="_blank" rel="noopener">跨站脚本攻击(Cross-site scripting)</a></li><li><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html" target="_blank" rel="noopener">CSRF 攻击的应对之道</a></li><li><a href="https://github.com/dwqs/blog/issues/68" target="_blank" rel="noopener">浅说 XSS 和 CSRF</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-DNS/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-DNS/</url>
      <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><ul><li>DNS是一个全球分布式数据库</li><li>操作系统先查询/etc/hosts/， 然后去DNS查询</li><li>操作系统提供一个方法为名称服务器(DNS服务器)指定IP地址  /etc/resolv.conf</li><li>Python定义socket.getaddrinfo()返回一个tuple的list, 根据所支持的不同协议产生一个结果<br>  host is a simple utility for performing DNS lookups 对于一个IP地址，完全可能不存在反向的映射。反向查找时需要捕获socket.herror()异常,反向查询存在欺骗，由于ＤＮＳ信息的授权方式，反向查询的授权是基于ＩＰ地址的.先反向再正向，确定结果</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>C# 语法</title>
      <link href="/2020/03/16/%E5%85%B6%E4%BB%96-C-%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/16/%E5%85%B6%E4%BB%96-C-%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul><li>文件名可以与类名称不同</li><li>MSDN 教程</li></ul>]]></content>
      
      
        <tags>
            
            <tag> .Net C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TODO</title>
      <link href="/2018/10/23/%E5%85%B6%E4%BB%96-odoo/"/>
      <url>/2018/10/23/%E5%85%B6%E4%BB%96-odoo/</url>
      <content type="html"><![CDATA[<p>模仿网络教程 <a href="https://github.com/ruter/Odoo-Tutorial-Demo/tree/master/todo" target="_blank" rel="noopener">todo</a> 实现一个 odoo 模块。 并画图做详细描述。</p>]]></content>
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP</title>
      <link href="/2018/09/25/%E5%85%B6%E4%BB%96-http-HTTP/"/>
      <url>/2018/09/25/%E5%85%B6%E4%BB%96-http-HTTP/</url>
      <content type="html"><![CDATA[<p>http 协议基于 TCP, 是当前的互联网基石。</p><p><a href="https://github.com/jasonGeng88/blog/blob/master/201705/https.md" target="_blank" rel="noopener">基于此文</a>的理解图</p><p><img src="HTTP.png" alt="mindNode"></p><p><a href="https://legacy.gitbook.com/book/bagder/http2-explained/details" target="_blank" rel="noopener">http2 介绍</a><br><a href="https://github.com/bagder/http3-explained" target="_blank" rel="noopener">http3 介绍</a></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>REST</title>
      <link href="/2018/09/25/%E5%85%B6%E4%BB%96-http-REST/"/>
      <url>/2018/09/25/%E5%85%B6%E4%BB%96-http-REST/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/jasonGeng88/blog/blob/master/201706/rest-api.md" target="_blank" rel="noopener">REST API URI 设计的七准则</a></p><p> <img src="REST.png" alt="rest"></p>]]></content>
      
      
        <tags>
            
            <tag> rest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pi 相关项目</title>
      <link href="/2018/09/19/%E5%85%B6%E4%BB%96-%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
      <url>/2018/09/19/%E5%85%B6%E4%BB%96-%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      <content type="html"><![CDATA[<p>树莓派 硬件极客的选择，可以实现一些初步的想法。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>树莓派通过官方网站下载镜像文件，然后通过 DD 命令或其他工具写入 SD 卡。 这里包含两个重要步骤</p><ul><li>设置 wifi 密码</li><li>开启 ssh 登录</li></ul><p>设置 wifi ssh <a href="http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html" target="_blank" rel="noopener">无屏幕和键盘配置树莓派WiFi和SSH</a>sss<br><a href="https://github.com/mozilla-iot/wiki/wiki/Setting-up-Raspberry-Pi" target="_blank" rel="noopener">Setting-up-Raspberry-Pi</a></p><p>不然都把设备插上电源不能远程访问控制还是很崩溃吧。</p><h2 id="有趣的项目"><a href="#有趣的项目" class="headerlink" title="有趣的项目"></a>有趣的项目</h2><ul><li><a href="http://dingdang.hahack.com/" target="_blank" rel="noopener">对话机器人</a></li><li><a href="http://shumeipai.nxez.com/2018/08/12/facial-recognition-identification-on-raspberry-pi.html" target="_blank" rel="noopener">在树莓派上实现人脸识别</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> pi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包</title>
      <link href="/2018/09/18/Vue-%E9%97%AD%E5%8C%85/"/>
      <url>/2018/09/18/Vue-%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.6.html" target="_blank" rel="noopener">闭包</a> golang 闭包访问局部变量会导致局部变量变为堆分配。</p>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序开发</title>
      <link href="/2018/09/16/%E5%85%B6%E4%BB%96-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/16/%E5%85%B6%E4%BB%96-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>微信小程序开发， 基于微信强太的生态。 小程序的开发价值显而易见。 小程序开发资源</p><ul><li><a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">小程序</a></li><li><a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">wepy</a></li></ul><p>小程序可以注册个人账号，不认证的情况下可以体验开发流程。</p><p>调试模式不会对服务器进行验证，线上模式需要。 最好备案。</p>]]></content>
      
      
        <tags>
            
            <tag> mini program </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后端程序员面试题</title>
      <link href="/2018/09/15/Node-%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/09/15/Node-%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>  后端开发面试题 <a href="https://github.com/monklof/Back-End-Developer-Interview-Questions#general" target="_blank" rel="noopener">Back-End-Developer-Interview-Questions</a> 包含了面试中的常见问题，先做个小抄吧. <a href="http://xargin.com/backend-engineer-interview/" target="_blank" rel="noopener">一个不完全的回答</a></p><h2 id="通用问题"><a href="#通用问题" class="headerlink" title="通用问题"></a>通用问题</h2><ul><li><p>语言设计中空引用(null reference)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？</p><p>在 C, Java, go, Js 中使用 <strong>空引用</strong> 对应会出现 断错误, nullpointer Exception, panic, undefined. 出现这些错误时如果没有对异常处理程序会终止工作。  在不同语言中移除的后果</p><ul><li>Js, 在数据初始化时必须制定数据，缺少灵活性。与其他语言对接时会缺少对应的语义。 例如 web 不传参数可以用 null 表示。</li></ul></li><li><p>封装的重要性体现在哪儿？<br>  通过封装可以屏蔽内部实现细节， 让业务开发逻辑清晰。 通用功能封装为模块可以反复使用。 一个成功的语言必然有对应成功的包管理器， 通过包管理引用封装好的模块即减少工作量又更稳定。</p></li><li><p>不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助<br>  不同语言对不变的变量都有对应的关键字。 不变性可解决并发时的读写冲突问题。</p></li><li><p>在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？<br>web 由原来的 jsp 发展到现在的前后端分离再到 next.js 框架的诞生。 客服端渲染由浏览器实现网页的显示。 主要包含了数据的读取等。 服务端渲染是在一个网页请求后 html 就生成完毕。 客服端渲染对客户的电脑配置要求更高，体验更好。 服务端渲染对 seo 更友好。并且加载更快。但是每一次访问都需要重复加载 js/css.</p></li><li><p>当你在浏览器地址栏输入google.com回车之后都发生了什么?<br>首先通过 dns 获取服务器 ip 地址，然后建立 tcp 连接。 在 tcp 连接上进行 http 协议通信。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mongodb</title>
      <link href="/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mongodb/"/>
      <url>/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mongodb/</url>
      <content type="html"><![CDATA[<p>mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。所有实体都是在首次使用时创建。</p><p>没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。也没有固定的数据模型,mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。</p><p>mongo本身支持集群和数据分片, mongo是c++实现的，支持windows mac linux等主流操作系统. 性能优越，速度快</p>]]></content>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql</title>
      <link href="/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/"/>
      <url>/2018/09/15/%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/</url>
      <content type="html"><![CDATA[<p>Mysql 是免费的关系数据库。</p><h2 id="数据库使用的最佳方式"><a href="#数据库使用的最佳方式" class="headerlink" title="数据库使用的最佳方式"></a>数据库使用的最佳方式</h2><ul><li>尽量使用预处理.</li><li>多条记录操作使用批处理.</li><li>不使用外连接</li><li>使用 not exist 替换 not in</li><li>or 不能太多</li><li>更新操作放在事务最后</li><li>少用临时表</li><li>distinct 导致不必要的排序</li></ul><h2 id="数据库优化方式"><a href="#数据库优化方式" class="headerlink" title="数据库优化方式"></a>数据库优化方式</h2><ul><li>show status</li><li>explain</li><li>show profile</li><li>trace</li></ul>]]></content>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>短网址</title>
      <link href="/2018/09/13/%E5%85%B6%E4%BB%96-%E7%9F%AD%E7%BD%91%E5%9D%80/"/>
      <url>/2018/09/13/%E5%85%B6%E4%BB%96-%E7%9F%AD%E7%BD%91%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>短网址指将长链接转换成易分享的短地址(6位左右)。 <a href="https://segmentfault.com/a/1190000012088345" target="_blank" rel="noopener">短网址(short URL)系统的原理及其实现</a></p><p>主要两种算法</p><ul><li>自增序列算法，将网址写入数据库，然后将记录id 通过 64 进制显示。</li><li>md5后取其中一部分的一系列算法。</li></ul><h2 id="开源实现"><a href="#开源实现" class="headerlink" title="开源实现"></a>开源实现</h2><ul><li><a href="https://github.com/prologic/shorturl" target="_blank" rel="noopener">shorturl</a> </li><li><a href="https://github.com/Youthink/short_url" target="_blank" rel="noopener">short_url</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> net </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内网穿透</title>
      <link href="/2018/09/12/%E5%85%B6%E4%BB%96-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2018/09/12/%E5%85%B6%E4%BB%96-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<p>由于 ipv4 地址总量少， 当前互联网是多个用户使用一个局域网。 在接入公网时候才使用共同的一个公网 IP。 通过 NAT 可以解决 IP 地址稀少的问题。 但是对于在内网中架设 web 服务器需要非局域网用户访问时就需要内网穿透代理。</p><h2 id="内网穿透代理"><a href="#内网穿透代理" class="headerlink" title="内网穿透代理"></a>内网穿透代理</h2><p>当前主要有两种方式 </p><ol><li>通过 vpn 方式将管理设备放在一个局域网中。</li><li>通过 vps 建立中央代理， frp 使用的方式。 在 socket  上代理 http 协议。</li></ol><ul><li><a href="https://www.zerotier.com" target="_blank" rel="noopener">zerotier</a></li><li><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a></li></ul><p>HTTP 内网穿透</p><h2 id="对内网穿透软件进行相关讨论"><a href="#对内网穿透软件进行相关讨论" class="headerlink" title="对内网穿透软件进行相关讨论"></a><a href="https://tkv.io/posts/picojs-intro/" target="_blank" rel="noopener">对内网穿透软件进行相关讨论</a></h2><ol><li>ngrok1.x 存在内存泄漏问题</li><li>localtunel 原理是客户端与服务端建立 socket 连接， 外部请求先到服务端，服务端从建立的 socket 将数据发送到客户端，最后客户端发送数据到绑定的端口。 golang 客户端与js  服务端之间存在不稳定（socket 自动就断了）。</li><li>推荐使用  frp</li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="http://einverne.github.io/post/2018/06/zerotier.html" target="_blank" rel="noopener">使用 Zerotier 组建虚拟局域网实现内网穿透</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC dial</title>
      <link href="/2018/09/11/%E5%85%B6%E4%BB%96-WebRTC-Dial/"/>
      <url>/2018/09/11/%E5%85%B6%E4%BB%96-WebRTC-Dial/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://github.com/vialer/vialer-js" target="_blank" rel="noopener">vialer-js 源码</a></li><li><a href="https://vialer-js.io" target="_blank" rel="noopener">vialer-js 文档</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 面试</title>
      <link href="/2018/09/09/Node-Node-%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/09/09/Node-Node-%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote><p>面试造火箭，工作拧螺丝</p></blockquote><p>下面是一部分造火箭的步骤，工作上帮助不大。 是否有用自行思考。</p><ul><li><a href="https://changchen.me/blog/20180908/db-index/" target="_blank" rel="noopener">常见的数据库查询索引原理介绍</a>。 索引与存储引擎相关。 看看<a href="https://www.cnblogs.com/weizhixiang/p/5914120.html" target="_blank" rel="noopener">MySql数据库索引原理</a>。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>API Swagger</title>
      <link href="/2018/09/05/Node-API-Swagger/"/>
      <url>/2018/09/05/Node-API-Swagger/</url>
      <content type="html"><![CDATA[<p>Node.js 做服务端越来越流行, 如何提供简单明了的 API。 swagger / Open API 定义参数和响应。</p><p>由于 JS 是动态语言不能像 <a href="https://github.com/springfox/springfox" target="_blank" rel="noopener">stringfox</a> 那样基于注解自动生成。 自定义 yaml 是不可避免的选择。</p><p>参考 <a href="https://github.com/BiteBit/koa-oai-router" target="_blank" rel="noopener">koa-oai-router</a> 实现 koa api 文档化.</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Koa</title>
      <link href="/2018/09/04/Node-Koa/"/>
      <url>/2018/09/04/Node-Koa/</url>
      <content type="html"><![CDATA[<p>Koa 是一个小型，易扩展的 web 框架。 由于源码很少，是一个很好的 web 框架源码研究项目。</p><ul><li><a href="https://github.com/koajs/koa" target="_blank" rel="noopener">koa</a></li><li><a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/koa-vs-express.md" target="_blank" rel="noopener">koa express 比较</a></li><li><a href="https://github.com/koajs/koa/wiki" target="_blank" rel="noopener">koa 相关框架与中间件</a></li><li><a href="https://github.com/demopark/koa-docs-Zh-CN" target="_blank" rel="noopener">中文文档</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">koa 阮一峰</a></li></ul><h2 id="Koa-引用的包"><a href="#Koa-引用的包" class="headerlink" title="Koa 引用的包"></a>Koa 引用的包</h2><p>Koa 本身源代码极少, 可以通过依赖的包了解一个 web 服务器需要考虑的细节. 另外 koa 将常用 http 功能以 koa-* 的方式分割成中间件。</p><ul><li><a href="https://github.com/tj/node-only" target="_blank" rel="noopener">only</a> 将一个对象下划线开始的属性理解为私有，不暴露外部。 类似 loadh 中的 _.pickup</li><li><a href="https://github.com/jshttp/on-finished" target="_blank" rel="noopener">on-finished</a> http req/res 结束时执行。 类似 go defer 关键字。</li><li><a href="https://github.com/jshttp/statuses" target="_blank" rel="noopener">statuses</a> http 响应状态码规范化。</li><li><a href="https://github.com/dougwilson/nodejs-depd" target="_blank" rel="noopener">depd</a> 打印废弃通知(提示用户 api 变动)</li><li><a href="https://github.com/tj/node-delegates" target="_blank" rel="noopener">delegates</a> 原型修改. 将 req/res 方法绑定到 context.</li><li><a href="https://github.com/pillarjs/cookies" target="_blank" rel="noopener">cookies</a> 获取/设置 cookie</li><li><a href="https://github.com/jshttp/accepts" target="_blank" rel="noopener">accepts</a> http 响应类型</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>定义函数名对调试和日志更友善</li><li>koa-compose 用于合并多个中间件</li><li>DEBUG=koa*  开启调试</li><li>错误处理 try-catch -&gt; app.on(‘error’) -&gt;app.onerror</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Egg</title>
      <link href="/2018/09/02/Node-EGG/"/>
      <url>/2018/09/02/Node-EGG/</url>
      <content type="html"><![CDATA[<p>EGG 与 KOA 比较, EGG 基于 KOA, 有更多的 MVC 限制(方便)。 koa 只是基础框架，一个完整的 http 至少包括如下部分</p><ul><li>静态目录挂载 kao-static</li><li>路由请求 koa-router</li><li>参数解析 koa-bodyparser</li></ul><p>另外 EGG 框架支持多进程, 效率更高。</p>]]></content>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 错误处理</title>
      <link href="/2018/09/02/Node-Node-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/02/Node-Node-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>Node 有多种错误处理方式， 异步与同步使用不同的方式捕获异常。 在写 web 框架时需要保证异常的处理不能出现内存泄漏或者因为单次请求异常导致服务终止。</p><ul><li>try catch, 不能处理 promise 错误</li><li>.catch(), 处理 promise 错误</li></ul><p>Http 服务最重要是即使一个请求导致内部错误，但是服务端不能停止。 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.on(&apos;uncaughtException&apos;, (err) =&gt; &#123;</span><br><span class="line">      console.error(&apos;uncaughtException&apos;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>保持服务器不中断, 另外可以使用 pm2 保活.</p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>assert 两种模式, 建议strict.</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Strapi</title>
      <link href="/2018/09/02/Node-Strapi/"/>
      <url>/2018/09/02/Node-Strapi/</url>
      <content type="html"><![CDATA[<p>自 2015 年开始从 Java (Android) 转 Web(Node.js 前后端), 第一次使用 MVC 框架 Sails。 到现在了解使用 Strapi.</p><p>Sails 是一个全面的 MVC 框架。 在那个时候(2015) 高居 Github 关注前列。 由于缺少经验的原因. Sails 使用中出现如下问题</p><ul><li>ORM 效率低， Waterline 虽然使用方便，但是使用简单的 count 会读取所有数据到内存。 这是完全不能接受。</li><li>内存泄漏, 由于其他原因整个项目是运行在类似树莓派的嵌入式环境下。 当多用户登录会导致内存居高不下。</li></ul><p>为什么又要了解 Strapi 一个与 Sails 类似的框架。</p><ul><li>loopback IBM 推动, 细节更多。 loopback4 完全使用 Spring 注解方式(不喜欢)。</li><li>egg 基于 KOA, 比 KOA 更全面的 WEB 框架。 至少不需要找那么多中间件。</li><li>fastify 直接基于 Node.js. 在 json 序列化和 路由查询方便有特别的优化。 </li></ul><p>上面的框架都很好，但是我需要一个前端更灵活的。 上面框架使用 ant-pro 可以写出高效的 admin 后台。 但是 strapi 有他独特的方式。 我没有使用过老版本直接使用新版本 3.0</p><ul><li>插件化， 前后端插件化。</li><li>CRUD 自动生成, 支持分页/查询/过滤。</li></ul><p>strapi 模块化，基本界面在 admin 目录， 通过 nam run build 打包。 插件界面在对应目录下， 也需要 nam run build 。</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis</title>
      <link href="/2018/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/"/>
      <url>/2018/09/02/%E6%95%B0%E6%8D%AE%E5%BA%93-Redis/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://itbilu.com/database/redis/4JoBoVuKb.html" target="_blank" rel="noopener">https://itbilu.com/database/redis/4JoBoVuKb.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS</title>
      <link href="/2018/08/31/Node-JS/"/>
      <url>/2018/08/31/Node-JS/</url>
      <content type="html"><![CDATA[<ul><li><p>生成指定数量的数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(Array(N).keys());</span><br></pre></td></tr></table></figure></li><li><p>IPV6 通过 <strong>[]</strong>包括地址</p></li><li></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CNode 部署</title>
      <link href="/2018/08/25/Node-CNode/"/>
      <url>/2018/08/25/Node-CNode/</url>
      <content type="html"><![CDATA[<p>CNode 是国内基于 node, mongodb, redis, express, ers 技术栈构建的一个论坛程序。 egg-cnode 将 express 替换为 egg.js 框架.</p><h2 id="egg-cnode"><a href="#egg-cnode" class="headerlink" title="egg-cnode"></a><a href="https://github.com/cnodejs/egg-cnode" target="_blank" rel="noopener">egg-cnode</a></h2><p>cnode 论坛的 egg 实现版本， 后端服务由原来的 Express 切换为 Node. 在部署过程中主要安装如下软件。</p><ul><li>redis</li><li>mongoldb</li><li>nvm</li><li>node</li></ul><h2 id="调试模式不发送邮件-多种原因导致"><a href="#调试模式不发送邮件-多种原因导致" class="headerlink" title="调试模式不发送邮件(多种原因导致)"></a>调试模式不发送邮件(多种原因导致)</h2><ul><li>发送邮件被屏蔽</li><li>调试模式下发送邮件直接返回</li><li>163 需要授权码登录</li><li>激活回调地址 config.host 配置</li></ul><p>可以直接修改数据库为激活模式登录</p>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web Fastify</title>
      <link href="/2018/08/25/Node-Fastify/"/>
      <url>/2018/08/25/Node-Fastify/</url>
      <content type="html"><![CDATA[<p>Web 框架 或 Node.js Web 框架多如牛毛，开始学习 Node.js 时被 MVC 框架 sails 惊叹。 原来 Web 可以如此简单，计划不用写代码就能完成 CRUD。 但是也被 Waterline 的性能问题折磨得痛苦，反复重构。 </p><h2 id="我了解的-node-js-web-框架"><a href="#我了解的-node-js-web-框架" class="headerlink" title="我了解的 node.js web 框架"></a>我了解的 node.js web 框架</h2><ul><li>egg 阿里开源，基于 koa. 根据内核启动多进程， koa 的增强版.</li><li>express, koa 好像都知道了吧。</li><li>strapi 被它的模块设计折服，用于构建收费插件可以参考。 基于 koa.</li><li>sails 预期中的 mvc, orm 有坑.</li></ul><h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><ul><li><a href="https://github.com/fastify/docs-chinese/blob/master/docs/Getting-Started.md" target="_blank" rel="noopener">中文文档</a></li><li>fastify 在路由, json 序列号等方面优化</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cnodejs.org/topic/575f61555e870b5a02066aa8" target="_blank" rel="noopener">web 框架讨论</a><br><a href="http://delved.org/What-if-I-told-you-that-HTTP-can-be-fast/#/34" target="_blank" rel="noopener">fastify ppt1</a><br><a href="https://mcollina.github.io/take-your-http-server-to-ludicrous-speed/#1" target="_blank" rel="noopener">fastify ppt2</a></p>]]></content>
      
      
        <tags>
            
            <tag> javascript Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js 坑</title>
      <link href="/2018/08/25/Node-Node-js-%E5%9D%91/"/>
      <url>/2018/08/25/Node-Node-js-%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>Node 由于其入门简单，语法少广受程序猿欢迎。 但是 Node 本身的缺陷或使用者不熟悉在一下方面会出现一些意料之外的事情。</p><ul><li>不用用于处理复杂任务，如果非做不可。开启多线程模式。</li><li><a href="https://github.com/mcollina/make-promises-safe" target="_blank" rel="noopener">https://github.com/mcollina/make-promises-safe</a> 内存泄露。</li><li>sails orm wterline 查询缓慢。</li><li>koa sttic 中间件浏览器访问不显示目录，实际能正常读取(缺少 index.html)。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> javascript Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LinPhone 编译</title>
      <link href="/2018/05/20/%E5%B7%A5%E4%BD%9C-LinPhone/"/>
      <url>/2018/05/20/%E5%B7%A5%E4%BD%9C-LinPhone/</url>
      <content type="html"><![CDATA[<p>LinPhone 是跨平台开源软电话。 桌面端通过 QT 实现， 移动端使用对应的移动端语言实现。</p><h2 id="Linphone-desktop"><a href="#Linphone-desktop" class="headerlink" title="Linphone-desktop"></a><a href="https://github.com/BelledonneCommunications/linphone-desktop" target="_blank" rel="noopener">Linphone-desktop</a></h2><p>QT 实现，支持跨平台。</p><ol><li>osx 下编译，依次通过 brew 安装软件。</li><li>window 下编译，依次下载软件并添加环境变量。 vpx.cmake 报错导致 vs 不能识别项目文件. <strong>临时方法注释报错行</strong></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>浏览器扩展</title>
      <link href="/2018/04/27/Chrome-%E6%89%A9%E5%B1%95-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
      <url>/2018/04/27/Chrome-%E6%89%A9%E5%B1%95-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>油猴脚本对 web 进行简单扩展。 实现自动点击，抢红包，点赞等。<br>如果封装为扩展就有界面交互，更易操作。</p><blockquote><p><a href="http://blog.iderzheng.com/introduction-to-chrome-extension-development/" target="_blank" rel="noopener">Chrome扩展程序开发基础介绍</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Node.js API</title>
      <link href="/2018/04/21/Node-NodeAPI/"/>
      <url>/2018/04/21/Node-NodeAPI/</url>
      <content type="html"><![CDATA[<p>Node API 提供了网络编程，文件读取等。 通过 API 才能将 Node 用于实际业务开发中。 本文记录常使用的 API.</p><p>==</p><p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">API</a> Nodejs 中文 api</p><h1 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h1><p>交换模式下 一旦你开启了这个模块，node 程序将不会终止，直到你关闭接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: fs.createReadStream(<span class="string">'demo.txt'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">rl.on(<span class="string">'line'</span>, <span class="keyword">async</span>(line) =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line)</span><br><span class="line">&#125;)</span><br><span class="line">rl.on(<span class="string">'close'</span>, <span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://itbilu.com/nodejs/core/NyIjmp0wZ.html" target="_blank" rel="noopener">Node.js Buffer与JavaScript TypeArray类型数组的异同</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Iot 系统</title>
      <link href="/2018/03/31/%E5%85%B6%E4%BB%96-%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>/2018/03/31/%E5%85%B6%E4%BB%96-%E7%89%A9%E8%81%94%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>iot 系统比较</p><ol><li>android thing</li><li><a href="https://docs.microsoft.com/en-us/windows/iot-core/windows-iot" target="_blank" rel="noopener">windows</a></li><li><a href="https://github.com/mozilla-iot/gateway" target="_blank" rel="noopener">gateway</a> 一个 web 程序，对内连接设备。 对外通过代理在任意地点都能访问。</li></ol><p>iot 相关资源</p><p><a href="https://github.com/rwaldron/johnny-five" target="_blank" rel="noopener">https://github.com/rwaldron/johnny-five</a></p><p>串口</p><p><a href="https://github.com/node-serialport/node-serialport" target="_blank" rel="noopener">https://github.com/node-serialport/node-serialport</a></p><h3 id="Home-assistant-io"><a href="#Home-assistant-io" class="headerlink" title="Home-assistant.io"></a><a href="https://github.com/home-assistant/home-assistant" target="_blank" rel="noopener">Home-assistant.io</a></h3><p>用 python 构建的家庭智能中心 <strong>命令安装会有一个下载过程，需要耐心等待</strong></p>]]></content>
      
      
        <tags>
            
            <tag> pi, iot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Asterisk</title>
      <link href="/2018/03/31/%E5%B7%A5%E4%BD%9C-Asterisk-%E5%AE%89%E8%A3%85/"/>
      <url>/2018/03/31/%E5%B7%A5%E4%BD%9C-Asterisk-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>Asterisk 是开源电话系统软件，内置软件源中。 可通过源码编译，在编译的过程中首先需要安装编译依赖然后编译菜单选择。 这个过程十分繁琐，可以直接通过 apt install asterisk 安装. 且版本也不会太老。 asterisk 缺少一个可用的 UI. 如果是 FreeSwitch 可以尝试 YouPBX. 若只是需要测试电话系统， mac 可以直接通过 brew 安装  FreeSwitch 或 opensips.</p><p>通过树莓派安装 Asterisk 是一个快速的方式。</p><ul><li>分机创建</li><li>AMI 配置</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Kamailo</title>
      <link href="/2017/09/22/%E5%B7%A5%E4%BD%9C-kamailo/"/>
      <url>/2017/09/22/%E5%B7%A5%E4%BD%9C-kamailo/</url>
      <content type="html"><![CDATA[<p>kamailo 与 Asterisk 类似的软交换系统。</p><ol><li>osx 可以使用 brew  直接安装</li><li>安装后需要修改path  /usr/local/sbin/</li><li>make include_modules=db_mysql cfg   ／／配置mysql</li><li>/usr/local/etc/kamailio 配置文件地址</li></ol>]]></content>
      
      
        <tags>
            
            <tag> sip; voip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>黑苹果</title>
      <link href="/2017/02/02/%E5%85%B6%E4%BB%96-%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
      <url>/2017/02/02/%E5%85%B6%E4%BB%96-%E9%BB%91%E8%8B%B9%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p><strong>如果不喜欢折腾请选择白苹果, 如果预算有限或高性能可以尝试</strong><br>黑苹果安装需要适合的硬件与教程。 下面是此次记录<a href="https://www.tonymacx86.com" target="_blank" rel="noopener">安装教程</a></p><h2 id="出现的问题以及解决方法"><a href="#出现的问题以及解决方法" class="headerlink" title="出现的问题以及解决方法"></a>出现的问题以及解决方法</h2><ol><li>声卡驱动若无对应驱动可以安装最新的万能驱动(可以尝试不同芯片的驱动)。</li><li>不要乱安装显卡驱动会导致不能正常启动。</li><li>不能正常安装时可以先扒出独立显卡。</li><li>四叶草配置注意备份。</li><li><a href="https://www.reddit.com/r/hackintosh/comments/56gbz7/unibeast_701_selected_mac_os_x_installer_is/" target="_blank" rel="noopener">Selected Mac OSX Installer is Incomplete</a></li><li><a href="https://www.tonymacx86.com/threads/how-to-fix-imessage.110471/#TOP3.2" target="_blank" rel="noopener">不能正常登陆苹果账号</a> 更新 DNS</li><li>点击启动项反应慢是由于显卡驱动没正常安装。</li><li>hd4400 显卡不要使用 vga。</li></ol><p>另外苹果系统外接 4k 显示器需要注意自己的机器是否支持 4k@60hz。</p>]]></content>
      
      
        <tags>
            
            <tag> 基本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring</title>
      <link href="/2017/01/16/%E5%85%B6%E4%BB%96-Spring/"/>
      <url>/2017/01/16/%E5%85%B6%E4%BB%96-Spring/</url>
      <content type="html"><![CDATA[<p>Spring 是 Java  MVC 框架等库集合。 利用 Spring boot 可以快速开发应用。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh" target="_blank" rel="noopener">spring boot 中文翻译</a></li><li><a href="https://github.com/netgloo/spring-boot-samples" target="_blank" rel="noopener">spring 例子</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>交叉编译</title>
      <link href="/2017/01/10/%E5%85%B6%E4%BB%96-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/2017/01/10/%E5%85%B6%E4%BB%96-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>go 原声支持交叉编译，但是若代码中包含 c 语言，就需要考虑如下步骤了。</p><h1 id="交叉编译-arm-版本"><a href="#交叉编译-arm-版本" class="headerlink" title="交叉编译 arm 版本"></a>交叉编译 arm 版本</h1><p>若 golang 项目代码中包含 cgo 最好在目标平台编译。 若目标环境不支持需要使用正确的交叉编译工具。 对 arm 平台需要判断对应架构</p><ul><li>soft   : 不用fpu进行浮点计算，即使有fpu浮点运算单元也不用,而是使用软件模式。</li><li>softfp : armel架构(对应的编译器为gcc-arm-linux-gnueabi)采用的默认值，用fpu计算，但是传参数用普通寄存器传，这样中断的时候，只需要保存普通寄存器，中断负荷小，但是参数需要转换成浮点的再计算。</li><li>hard   : armhf架构(对应的编译器gcc-arm-linux-gnueabihf)采用的默认值，用fpu计算，传参数也用fpu中的浮点寄存器传，省去了转换, 性能最好，但是中断负荷高。</li></ul><p><strong>OSX 安装教程编译器很麻烦</strong>, 所以直接在 linux 下编译， 选择正确架构即可。</p>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>golang 库</title>
      <link href="/2016/12/14/Golang-Web/"/>
      <url>/2016/12/14/Golang-Web/</url>
      <content type="html"><![CDATA[<p>Go 语言自带 http 库本身已是很高效，当前 web 库主要分完整的框架或路由库两种。若希望后期完全可控选库可能更好。</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ul><li>Web 框架 gin, golang 在微服务/web 开发都有很多选择。 我选择 gin 因为它功能够全。 当然其他框架也有不同的优势。</li></ul><h1 id="软件库"><a href="#软件库" class="headerlink" title="软件库"></a>软件库</h1><ul><li><p><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm.io</a> Simple and Powerful ORM for Go, support mysql,postgres,tidb,sqlite3,mssql,oracle。 关系数据库 ORM， 现在 WEB 纯手写 SQL 很少了吧。</p></li><li><p><a href="https://github.com/go-macaron/captcha" target="_blank" rel="noopener">captcha</a> macaron 验证码中间件(不适用于 gin)</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node</title>
      <link href="/2016/12/13/Node-Node/"/>
      <url>/2016/12/13/Node-Node/</url>
      <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>生成指定数量的数组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(Array(N).keys());</span><br></pre></td></tr></table></figure></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li>const, let 替换 var 。 var 会提升作用域, for 循环慎用.</li><li>模版字符串, 实现字符串格式化/字符串多行显示.</li><li>新加函数: includes, startsWith, endsWith, padStart, padEnd.</li><li>函数默认值. num = num || 2000. 实际值为 0时会出错。</li><li>箭头函数: 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象.</li><li><h2 id="Node-js-配置"><a href="#Node-js-配置" class="headerlink" title="Node.js 配置"></a>Node.js 配置</h2></li><li>代码中常用 <strong><em> process.env.NODE_ENV </em></strong> 判断当前是开发环境, 启动程序时通过如下方式配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> NODE_ENV=development&amp;&amp; nodemon --harmony --use_strict index.js  -w</span><br><span class="line">set NODE_ENV=development&amp;&amp; nodemon --harmony --use_strict index.js  -w</span><br></pre></td></tr></table></figure></li></ul><p>另外参考 <a href="https://github.com/kentcdodds/cross-env" target="_blank" rel="noopener">cross-env</a> 实现跨平台环境变量设置。</p><h2 id="Node-js-学习文档"><a href="#Node-js-学习文档" class="headerlink" title="Node.js 学习文档"></a>Node.js 学习文档</h2><ul><li><a href="https://github.com/nswbmw/node-in-debugging" target="_blank" rel="noopener">Node.js 调试指南</a></li><li><a href="https://github.com/maxogden/art-of-node/blob/master/readme.zh-cn.md" target="_blank" rel="noopener">Node的艺术</a></li><li><a href="http://nikhilm.github.io/uvbook/" target="_blank" rel="noopener">An Introduction to libuv</a></li><li><a href="http://liubin.org/promises-book/#promise-polyfill" target="_blank" rel="noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">awesome-nodejs</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="noopener">ECMAScript® 2015 Language Specification</a></li><li><a href="https://github.com/jabez128/stream-handbook" target="_blank" rel="noopener">nodejs stream 手册</a></li><li><a href="https://github.com/azu/promises-book" target="_blank" rel="noopener">promises-book</a></li><li><a href="https://github.com/maxogden/art-of-node" target="_blank" rel="noopener">art-of-node</a></li><li><a href="https://pugjs.org/zh-cn/api/getting-started.html" target="_blank" rel="noopener">pug 中文</a></li><li><a href="https://github.com/ruanyf/jstraining" target="_blank" rel="noopener">全栈工程师培训材料</a></li></ul><h2 id="ReactiveX"><a href="#ReactiveX" class="headerlink" title="ReactiveX"></a>ReactiveX</h2><ul><li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="noopener">RxJava文档中文版</a></li></ul><h2 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></li></ul><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><ul><li><a href="https://javascript30.com/" target="_blank" rel="noopener">javascript30</a></li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><a href="https://github.com/versatica/tryit-jssip" target="_blank" rel="noopener">jssip-demo</a> 官方demo</li></ul><h2 id="Node-编译"><a href="#Node-编译" class="headerlink" title="Node 编译"></a>Node 编译</h2><p><a href="https://github.com/nodejs/node/blob/master/BUILDING.md" target="_blank" rel="noopener">Node 编译</a> </p>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron</title>
      <link href="/2016/11/07/Node-Electron/"/>
      <url>/2016/11/07/Node-Electron/</url>
      <content type="html"><![CDATA[<p><a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron</a> 是桌面端跨平台解决方案。</p><blockquote><p>If you can build a website, you can build a desktop app. Electron is a framework for creating native applications with web technologies like JavaScript, HTML, and CSS. It takes care of the hard parts so you can focus on the core of your application.</p></blockquote><p>根据 <a href="https://github.com/electron/electron" target="_blank" rel="noopener">electron</a> 查看源码。</p><h2 id="photon"><a href="#photon" class="headerlink" title="photon"></a><a href="https://github.com/connors/photon" target="_blank" rel="noopener">photon</a></h2><blockquote><p>The fastest way to build beautiful Electron apps using simple HTML and CSS <a href="http://photonkit.com" target="_blank" rel="noopener">http://photonkit.com</a></p></blockquote><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-electron</a> 汇聚了大量相关开源项目和学习资料</li><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-nodejs</a> 关于 node.js 的有趣项目</li><li><a href="https://auth0.com/blog/create-a-desktop-app-with-angular-2-and-electron/" target="_blank" rel="noopener">https://auth0.com/blog/create-a-desktop-app-with-angular-2-and-electron/</a></li><li><a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">https://github.com/angular/angular-cli</a></li><li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">https://github.com/electron/electron</a></li><li><a href="https://github.com/sindresorhus/awesome-electro" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome-electro</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bash 使用</title>
      <link href="/2016/11/07/Vue-bashguide/"/>
      <url>/2016/11/07/Vue-bashguide/</url>
      <content type="html"><![CDATA[<p>linux 命令可以提高软件的开发与部署，记录常用命令。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li><a href="#1-basic-operations">基本使用</a></li><li>[Shell 编程]</li><li>[技巧]</li><li>[调试]</li></ol><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h2 id="a-export"><a href="#a-export" class="headerlink" title="a. export"></a>a. <code>export</code></h2><p>显示所有的环境变量配置。如果需要获取指定环境变量使用 <code>echo $VARIABLE_NAME</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span></span><br><span class="line">AWS_HOME = /Users/adnanadnan/.aws</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$AWS_HOME</span></span><br><span class="line">/Users/adnanadnan/.aws</span><br></pre></td></tr></table></figure><h2 id="b-whatis"><a href="#b-whatis" class="headerlink" title="b. whatis"></a>b. <code>whatis</code></h2><p>whatis 用于显示用户命令, 系统调用, 库函数和数据手册相关的描述。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatis name</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ whatis bash</span><br><span class="line">bash(1)                  - GNU Bourne-Again SHell</span><br><span class="line">bashbug(1)               - report a bug <span class="keyword">in</span> bash</span><br></pre></td></tr></table></figure><h2 id="c-whereis"><a href="#c-whereis" class="headerlink" title="c. whereis"></a>c. <code>whereis</code></h2><h2 id="d-which"><a href="#d-which" class="headerlink" title="d. which"></a>d. <code>which</code></h2><h2 id="e-clear"><a href="#e-clear" class="headerlink" title="e. clear"></a>e. <code>clear</code></h2><p>清楚当前窗口显示</p><h2 id="1-1-文件操作"><a href="#1-1-文件操作" class="headerlink" title="1.1. 文件操作"></a>1.1. 文件操作</h2><p><a href="https://github.com/Idnan/bash-guide" target="_blank" rel="noopener">bash-guide</a><br><a href="https://raw.githubusercontent.com/Idnan/bash-guide/master/README.md" target="_blank" rel="noopener">bash-guide-raw</a></p>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序员</title>
      <link href="/2016/11/07/%E5%85%B6%E4%BB%96-%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
      <url>/2016/11/07/%E5%85%B6%E4%BB%96-%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      <content type="html"><![CDATA[<p>记录程序员需要了解和关注的方方面面。</p><h1 id="语义化版本-2-0-0"><a href="#语义化版本-2-0-0" class="headerlink" title="语义化版本 2.0.0"></a><a href="http://semver.org/lang/zh-CN/#spec-item-1" target="_blank" rel="noopener">语义化版本 2.0.0</a></h1><blockquote><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p></blockquote><h1 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h1><ul><li>HTTP API 设计指南<br><a href="https://geemus.gitbooks.io/http-api-design/content/en/" target="_blank" rel="noopener">英文</a><br><a href="https://github.com/ZhangBohan/http-api-design-ZH_CN" target="_blank" rel="noopener">中文</a></li></ul><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><ul><li><a href="https://github.com/jwasham/google-interview-university/blob/master/README-cn.md" target="_blank" rel="noopener">Google 面试</a></li></ul><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><ul><li><a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">中文技术文档的写作规范</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Asterisk 权威指南-数据库集成</title>
      <link href="/2016/11/07/%E5%B7%A5%E4%BD%9C-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/"/>
      <url>/2016/11/07/%E5%B7%A5%E4%BD%9C-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h1 id="Asterisk-与数据库集成"><a href="#Asterisk-与数据库集成" class="headerlink" title="Asterisk 与数据库集成"></a>Asterisk 与数据库集成</h1><p><a href="https://www.datasunrise.com/how-to-install-the-mysql-odbc-driver-on-ubuntu-16-04/" target="_blank" rel="noopener">原文</a>包含了两种系统( Ubuntu 与 RHEL )，两种数据库( MySQL 与 PostgreSQL )的使用介绍, 本文测试使用 Ubuntu 与 MySQL</p><h2 id="ubuntu-下安装-mysql"><a href="#ubuntu-下安装-mysql" class="headerlink" title="ubuntu 下安装 mysql"></a>ubuntu 下安装 mysql</h2><p>通过 aptitude 安装</p><h2 id="ubuntu-安装配置-ODBC"><a href="#ubuntu-安装配置-ODBC" class="headerlink" title="ubuntu 安装配置 ODBC"></a>ubuntu 安装配置 ODBC</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install unixodbc unixodbc-dev libmyodbc (在 ubuntu 16.4 的版本中不能正常安装 libmyodbc)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.datasunrise.com/how-to-install-the-mysql-odbc-driver-on-ubuntu-16-04/" target="_blank" rel="noopener">odbc 安装</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Asterisk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang HTTP 跟踪</title>
      <link href="/2016/11/07/%E7%BF%BB%E8%AF%91-Introducing-HTTP-Tracing/"/>
      <url>/2016/11/07/%E7%BF%BB%E8%AF%91-Introducing-HTTP-Tracing/</url>
      <content type="html"><![CDATA[<p>Go 官方博客之 <a href="https://blog.golang.org/http-tracing" target="_blank" rel="noopener">Introducing HTTP Tracing</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Go 1.7 版本我们介绍了 HTTP 跟踪功能，用于收集 HTTP 客户端整改生命周期下的请求信息。通过包 <strong>net/http/httptrace</strong> 实现 HTTP 跟踪功能。收集的信息可用于寻找隐藏的 bug，监控服务等方面。</p><h2 id="HTTP-事件"><a href="#HTTP-事件" class="headerlink" title="HTTP 事件"></a>HTTP 事件</h2><p><strong>httptrace</strong> 包对 HTTP 运行过程中的事件提供了钩子处理，这些事件包括:</p><ul><li>连接创建</li><li>连接被使用</li><li>DNS 查询</li><li>写请求</li><li>读响应</li></ul><h2 id="事件跟踪"><a href="#事件跟踪" class="headerlink" title="事件跟踪"></a>事件跟踪</h2><p>通过创建一个 <a href="https://golang.org/pkg/net/http/httptrace/#ClientTrace" target="_blank" rel="noopener">httptrace.ClientTrace</a>钩子函数并设置在<a href="https://golang.org/pkg/context/#Context" target="_blank" rel="noopener">context.Context</a>上开启 HTTP 跟踪。<br>通过<a href="https://golang.org/pkg/net/http/#RoundTripper" target="_blank" rel="noopener">http.RoundTripper</a>激活相关的事件和钩子函数。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://example.com"</span>, <span class="literal">nil</span>)</span><br><span class="line">trace := &amp;httptrace.ClientTrace&#123;</span><br><span class="line">      DNSDone: <span class="function"><span class="keyword">func</span><span class="params">(dnsInfo httptrace.DNSDoneInfo)</span></span> &#123;</span><br><span class="line">          fmt.Printf(<span class="string">"DNS Info: %+v\n"</span>, dnsInfo)</span><br><span class="line">      &#125;,</span><br><span class="line">      GotConn: <span class="function"><span class="keyword">func</span><span class="params">(connInfo httptrace.GotConnInfo)</span></span> &#123;</span><br><span class="line">          fmt.Printf(<span class="string">"Got Conn: %+v\n"</span>, connInfo)</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  req = req.WithContext(httptrace.WithClientTrace(req.Context(), trace))</span><br><span class="line">  <span class="keyword">if</span> _, err := http.DefaultTransport.RoundTrip(req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在请求中，http.DefaultTransport 会在每个事件发生时调用一次, 上面请求会在查询 DNS 结束时打印出相关信息,同样也会在连接建立时打印连接信息。</p><h2 id="跟踪-http-Client"><a href="#跟踪-http-Client" class="headerlink" title="跟踪 http.Client"></a>跟踪 http.Client</h2><p>这个跟踪功能是为跟踪单个 http.Transport.RoundTrip 的生命周期内事件设计。尽管如此, 客户端可能会为了完成一个 HTTP 请求而创建多个 round trips。例如, 当一个 URL 重定向时，相关的钩子函数会被调用多次并创建多个请求。<br>用户会在 http.Client 层识别响应时间，下面程序的请求即通过  http.RoundTripper 封装。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"net/http/httptrace"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// transport is an http.RoundTripper that keeps track of the in-flight</span></span><br><span class="line"><span class="comment">// request and implements hooks to report HTTP tracing events.</span></span><br><span class="line"><span class="keyword">type</span> transport <span class="keyword">struct</span> &#123;</span><br><span class="line">    current *http.Request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RoundTrip wraps http.DefaultTransport.RoundTrip to keep track</span></span><br><span class="line"><span class="comment">// of the current request.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *transport)</span> <span class="title">RoundTrip</span><span class="params">(req *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">    t.current = req</span><br><span class="line">    <span class="keyword">return</span> http.DefaultTransport.RoundTrip(req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GotConn prints whether the connection has been used previously</span></span><br><span class="line"><span class="comment">// for the current request.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *transport)</span> <span class="title">GotConn</span><span class="params">(info httptrace.GotConnInfo)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Connection reused for %v? %v\n"</span>, t.current.URL, info.Reused)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := &amp;transport&#123;&#125;</span><br><span class="line"></span><br><span class="line">    req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://google.com"</span>, <span class="literal">nil</span>)</span><br><span class="line">    trace := &amp;httptrace.ClientTrace&#123;</span><br><span class="line">        GotConn: t.GotConn,</span><br><span class="line">    &#125;</span><br><span class="line">    req = req.WithContext(httptrace.WithClientTrace(req.Context(), trace))</span><br><span class="line"></span><br><span class="line">    client := &amp;http.Client&#123;Transport: t&#125;</span><br><span class="line">    <span class="keyword">if</span> _, err := client.Do(req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序会从 google.com 重定向到 <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 并输出如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection reused for https://google.com? false</span><br><span class="line">Connection reused for https://www.google.com/? false</span><br></pre></td></tr></table></figure><p>Transport 位于 net/http 包，并支持 HTTP1 和 HTTP2 请求。</p><p>如果你需要定制  http.RoundTripper 的实现, 你可以支持对 *httptest.ClientTrace 的跟踪。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTTP 跟踪是一个对那些调试 HTTP 隐藏请求和网络流量很有价值的工具，开启这个功能让我们希望社区有更多相关的调试和可视化工具—例如<a href="https://github.com/davecheney/httpstat" target="_blank" rel="noopener">httpstat</a></p>]]></content>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Statsd</title>
      <link href="/2016/11/05/%E5%85%B6%E4%BB%96-Soft-copy/"/>
      <url>/2016/11/05/%E5%85%B6%E4%BB%96-Soft-copy/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/etsy/statsd" target="_blank" rel="noopener">StatsD</a> 是一个简单的网络守护进程，基于 Node.js 平台，通过 UDP 或者 TCP 方式侦听各种统计信息，包括计数器和定时器，并发送聚合信息到后端服务，例如  Graphite。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="http://www.oschina.net/p/statsd" target="_blank" rel="noopener">http://www.oschina.net/p/statsd</a></li><li><a href="http://www.oschina.net/p/graphite" target="_blank" rel="noopener">http://www.oschina.net/p/graphite</a></li><li><a href="http://blogs.asterisk.org/2016/02/03/integrating-asterisk-with-statsd/" target="_blank" rel="noopener">http://blogs.asterisk.org/2016/02/03/integrating-asterisk-with-statsd/</a> asterisk 与 statsd 集成</li></ul><p>##<br>记录开源聊天软件</p><ul><li><a href="https://github.com/sdelements/lets-chat" target="_blank" rel="noopener">https://github.com/sdelements/lets-chat</a></li><li><a href="https://github.com/mattermost/platform" target="_blank" rel="noopener">https://github.com/mattermost/platform</a></li><li><a href="https://github.com/RocketChat/Rocket.Chat" target="_blank" rel="noopener">https://github.com/RocketChat/Rocket.Chat</a> mateor </li></ul><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><a href="https://www.oschina.net/question/2012764_2141029" target="_blank" rel="noopener">https://www.oschina.net/question/2012764_2141029</a></li></ul><p>gogs 是类似于 github 的自建 git 服务器. 是一款开源自建的  git 服务端，你可以将他认为是一个 mini 版本的 github.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.<a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">安装文档</a></p><ol start="2"><li>默认配置文件包含在 二进制软件包中， 直接运行会生成自定义配置文件。 若配置需要修改可以直接修改配置文件 <strong>conf/app.ini</strong>。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>确定项目属于组织和用户， 后期就不会有修改 url 的困扰。</li></ol><p>shadowsocks 是一个安全的 socks5 代理。</p><ul><li><a href="https://github.com/orvice/ss-panel" target="_blank" rel="noopener">ss-panel</a> php 实现的 web 界面管理</li><li><a href="https://github.com/sendya/shadowsocks-panel" target="_blank" rel="noopener">shadowsocks-panel</a> 同上</li><li><a href="https://github.com/orvice/shadowsocks-go" target="_blank" rel="noopener">shadowsocks-go mu</a> 带多个用户管理的客户端</li><li><a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="noopener">shadowsocks-go</a> go 服务端</li></ul><p><a href="http://www.iterm2.com/" target="_blank" rel="noopener">iterm2</a> MacOS 更好使用的终端</p><ul><li>选中: 双击选中，三击选中整行，四击智能选中。</li><li>⌘ 键: 按住时同时点击文件夹或文件可以打开文件或文件夹。</li><li>分屏和切换。</li><li>自动补全和查看历史。</li></ul><p><a href="http://wulfric.me/2015/08/iterm2/" target="_blank" rel="noopener">iterm2 使用</a></p><blockquote><p>tmux is a terminal multiplexer<br>Tmux 是一个工具，用于在一个终端窗口中运行多个终端会话。</p></blockquote><h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a><a href="http://tmux.github.io/" target="_blank" rel="noopener">Tmux</a></h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>一个 Tmux 会话中可以包含多个窗口.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s &lt;name-of-my-session&gt; // 创建第一个会话</span><br><span class="line">Ctrl-b : &amp;&amp; new -s &lt;name-of-my-session&gt; // 创建新会话</span><br><span class="line">Ctrl-b s // 切换会话,列出所有会话</span><br><span class="line">tmux attach -t test //进入名为test的session</span><br><span class="line">C-b d // detach当前session(可以认为后台运行)</span><br></pre></td></tr></table></figure><h1 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h1><p>Window操作</p><p>  C-b c 创建一个新窗口<br>  C-b &amp; 关闭当前窗口<br>  C-b w 列出所有的窗口选择<br>  C-b p 切换到上一个窗口<br>  C-b n 切换到下一个窗口<br>  C-b 窗口号 使用窗口号切换窗口(例如窗口号为1的, 则C-b 1)<br>  C-b , 重命名当前窗口，便于识别各个窗口</p><p>Pane操作</p><p>  C-b % 横向分Terminal<br>  C-b “ 纵向分Terminal<br>  C-b 方向键 则会在自由选择各面板<br>  C-b x 关闭当前pane<br>  C-b q 显示面板编号</p><p>链接</p><p>/odoo/TODO.md</p><p>===</p><ul><li><a href="http://blog.jobbole.com/87584/" target="_blank" rel="noopener">http://blog.jobbole.com/87584/</a></li><li><a href="http://www.linuxidc.com/Linux/2015-07/119843.html" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-07/119843.html</a></li><li><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">https://github.com/gpakosz/.tmux</a> //   </li></ul>]]></content>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码评审</title>
      <link href="/2016/07/26/%E5%85%B6%E4%BB%96-CodeReview/"/>
      <url>/2016/07/26/%E5%85%B6%E4%BB%96-CodeReview/</url>
      <content type="html"><![CDATA[<p>代码评审是指对代码进行审核，当符合要求后才合并到主分支中。</p><p>代码评审需要借助评审工具完成，对评审进行管理。</p><h1 id="git-appraise"><a href="#git-appraise" class="headerlink" title="git-appraise"></a><a href="https://github.com/google/git-appraise" target="_blank" rel="noopener">git-appraise</a></h1><p>Go 实现的开源软件，与 Git 集成在一起。</p><p>在特性分支中执行 <code>git-appraise request</code> 将与主分支的差异作为评审的内容。 然后通过 <code>git-appraise comment</code> 对代码进行评价。 若接受代码修改通过 <code>git-appraise accept</code>. 最后要在特性分支中进行 <code>git-appraise submit</code>.</p><p><code>git-appraise list</code> 可以查看所有提交<br><code>git-appraise show id</code> 查看详细。</p><h2 id="git-appraise-web"><a href="#git-appraise-web" class="headerlink" title="git-appraise-web"></a><a href="https://github.com/google/git-appraise-web" target="_blank" rel="noopener">git-appraise-web</a></h2><blockquote><p>一个简单的只读 web 查看界面, 功能十分简单。</p></blockquote><p><strong><br>  代码通过 <code>go get</code> 而不是 <code>git clone</code> 方式安装。 需要加载 <code>Angualrjs.js</code> 所有需要翻墙。</strong></p><h1 id="gerrit"><a href="#gerrit" class="headerlink" title="gerrit"></a><a href="https://www.gerritcodereview.com/" target="_blank" rel="noopener">gerrit</a></h1><p>基于 JAVA 实现的开源软件。</p><ul><li><a href="https://gerrit-review.googlesource.com/Documentation/install-quick.html" target="_blank" rel="noopener">快速安装</a></li></ul><h1 id="crucible"><a href="#crucible" class="headerlink" title="crucible"></a><a href="https://www.atlassian.com/software/crucible" target="_blank" rel="noopener">crucible</a></h1><p>收费软件。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><a href="https://en.wikipedia.org/wiki/List_of_tools_for_code_review" target="_blank" rel="noopener">wiki</a></li></ul>]]></content>
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>自学</title>
      <link href="/2016/04/27/%E5%85%B6%E4%BB%96-Mooc/"/>
      <url>/2016/04/27/%E5%85%B6%E4%BB%96-Mooc/</url>
      <content type="html"><![CDATA[<p>关于程序员的自学方式和方法思考。</p><p>程序员是一个需要不断学习的职业，而视频学习是一个基本的方式。</p><p>关于学习的方式可以有如下选择</p><ul><li>官方博客或文档</li><li>开发牛人的博客文章</li><li>书籍</li><li>开源项目</li></ul><p>视频学习方式对初学是最好的方式，它可以强迫你去学习。然后视频学习与上课一样会出现走神等问题。 视频的选择需要注意如下方面</p><ul><li>容易走神， 如果课程简单非常容易走神。可以考虑 1.5 倍播放。</li><li>课程太难需要提前了解，一定要选择合适的课程。</li><li>主讲人的方式，主讲方式指主讲人是严肃还是活泼, 声音是否突然变大或变小, 视频的清晰度能否看见源码。</li><li>视频的内容是否有价值, 即视频所关注的技术点是否是你真需要的技术。</li></ul><p>对于视频学习，首先需要明确一点，你接受的知识是主讲人理解后的一次的内容。 如果主讲错误，你也难免会一直错误。</p>]]></content>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MBTI</title>
      <link href="/2016/04/17/%E5%85%B6%E4%BB%96-MBTI/"/>
      <url>/2016/04/17/%E5%85%B6%E4%BB%96-MBTI/</url>
      <content type="html"><![CDATA[<p>最近在一次 Mooc 课堂了解到 MBTI, 发现关于这个的研究还是比较靠谱的了。更多查看内容查看［wiki](<a href="https://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Myers%E2%80%93Briggs_Type_Indicator)</a>.</p><p>MBTI全称Myers-Briggs Type Indicator，是一种迫选型、自我报告式的性格评估工具，用以衡量和描述人们在获取信息、作出决策、对待生活等方面的心理活动规律和性格类型。它以瑞士心理学家Carl Jung的性格理论为基础，由美国的Katherine C Briggs和Isabel  Briggs Myers母女共同研制开发。<br>MBTI是当今世界上应用最广泛的性格测试工具。它已经被翻译成近20种世界主要语言，每年的使用者多达200多万，其中不乏世界500强之内的大型企业。</p><p>通过四个维度构成16种类型，对于每种类型有对应的职业建议。</p><blockquote><p>这大概属于心理学内容了， 以后了解了再说吧。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库</title>
      <link href="/2016/04/16/%E5%85%B6%E4%BB%96-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2016/04/16/%E5%85%B6%E4%BB%96-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>软件的数据存储离不开数据库。数据库主要有　</p><ul><li>关系数据库 mysql,sqlite, postgresql</li><li>非关系数据库 mongoDB, leveldb, rokcsDB, Realm</li><li>图形数据库</li></ul><p>另外最近发现一个时间序列数据库，基于 go 实现。</p><h2 id="leveldb"><a href="#leveldb" class="headerlink" title="leveldb"></a><a href="http://leveldb.org/" target="_blank" rel="noopener">leveldb</a></h2><p>谷歌开源的k-v数据库。支持主要平台，但缺少相关语言封装。主要封装为 <a href="https://github.com/Level/levelup" target="_blank" rel="noopener">levelup</a></p><h2 id="rocksDB"><a href="#rocksDB" class="headerlink" title="rocksDB"></a><a href="http://rocksdb.org/" target="_blank" rel="noopener">rocksDB</a></h2><p>Facebook 在 leveldb 的基础上开源的数据库。 据说更高效。<br><a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">github</a><br><a href="https://code.facebook.com/projects/577808328939952/rocksdb/" target="_blank" rel="noopener">rocksdb</a></p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><a href="https://realm.io/" target="_blank" rel="noopener">Realm</a></h2><p>主要面向移动端的现代数据库。 可以替换 ios 的 CocaData 和 Android 的 Sqlite;</p><ul><li>Realm for Android快速入门教程 <a href="http://www.tuicool.com/articles/V7ZFvuB" target="_blank" rel="noopener">中文</a> <a href="http://code.tutsplus.com/tutorials/up-and-running-with-realm-for-android--cms-25241" target="_blank" rel="noopener">英文</a></li><li><a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">github realm-java</a></li><li><a href="https://github.com/realm/realm-cocoa" target="_blank" rel="noopener">github realm-cocoa</a></li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>记录关系数据库 Mysql 的相关学习。</p><ul><li><a href="http://coolshell.cn/articles/1846.html" target="_blank" rel="noopener">MySQL性能优化的最佳20+条经验</a></li><li><a href="http://coolshell.cn/articles/652.html" target="_blank" rel="noopener">MySQL: InnoDB 还是 MyISAM?</a></li><li><a href="http://stackoverflow.com/questions/6479107/how-to-enable-mysql-query-log" target="_blank" rel="noopener">mysql set log</a> 数据配置已改变</li><li><a href="http://www.cnblogs.com/linjiqin/p/4125898.html" target="_blank" rel="noopener">mysql explain用法</a></li><li><a href="http://stackoverflow.com/questions/586381/mysql-not-using-indexes-with-where-in-clause" target="_blank" rel="noopener">MySQL not using indexes with WHERE IN clause?</a></li><li><a href="http://www.cnblogs.com/loveLearning/archive/2013/04/17/3025502.html" target="_blank" rel="noopener">mysql表切换引擎的几种方法</a></li></ul><blockquote><p>在项目的初期对数据库的选择十分重要，要进行压力测试。 另外一般的数据库 orm 会导致效率下降。 tqcenglish</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件</title>
      <link href="/2016/04/06/%E5%85%B6%E4%BB%96-Soft/"/>
      <url>/2016/04/06/%E5%85%B6%E4%BB%96-Soft/</url>
      <content type="html"><![CDATA[<p>一些有用的开源软件和工具。 </p><ul><li>自建服务类型，在自己 vps 上运行。</li><li>工具类型，参考实现二次开发。</li></ul><h1 id="Mailtrain-源码"><a href="#Mailtrain-源码" class="headerlink" title="Mailtrain 源码"></a><a href="https://mailtrain.org/" target="_blank" rel="noopener">Mailtrain</a> <a href="https://github.com/andris9/mailtrain" target="_blank" rel="noopener">源码</a></h1><p>基于 Express 实现群发邮件管理工具。 能上传 csv， 自定义字段。</p><h1 id="cockpit"><a href="#cockpit" class="headerlink" title="cockpit"></a><a href="https://cockpit-project.org/" target="_blank" rel="noopener">cockpit</a></h1><p>Red-hat开源 linux 系统状态监控。 用到的技术 C + react。 界面模块化开发，使用了 red-hat 自己的 ui 框架。</p><h1 id="Caddy-与-nginx-一样，作反向代理服务器-配置更简单"><a href="#Caddy-与-nginx-一样，作反向代理服务器-配置更简单" class="headerlink" title="Caddy 与 nginx 一样，作反向代理服务器. 配置更简单."></a>Caddy 与 nginx 一样，作反向代理服务器. 配置更简单.</h1><h2 id="不同请求域名代理到内部不同端口"><a href="#不同请求域名代理到内部不同端口" class="headerlink" title="不同请求域名代理到内部不同端口."></a>不同请求域名代理到内部不同端口.</h2><p>一台 vps 需要运行多个 web 服务，都想使用 80/443 端口，如何处理 ? 使用 caddy 代理所有请求， 然后通过访问的二级域名判断需要代理到内部的具体端口. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rewrite &#123;</span><br><span class="line">   if_op or</span><br><span class="line">   if &#123;&gt;Referer&#125; has /deluge</span><br><span class="line">   if &#123;&gt;Referer&#125; has mydomain.com/themes/css/</span><br><span class="line">   if &#123;&gt;Referer&#125; has mydomain.com/css/</span><br><span class="line">   to /deluge/&#123;path&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">proxy /deluge http://127.0.0.1:8112 &#123;</span><br><span class="line">   without /deluge   </span><br><span class="line">      transparent</span><br><span class="line">      header_upstream X-Forwarded-Host &#123;host&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://forum.deluge-torrent.org/viewtopic.php?t=54135" target="_blank" rel="noopener">Reverse Proxy with Caddy Server</a></p>]]></content>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发</title>
      <link href="/2016/04/03/Golang-%E5%B9%B6%E5%8F%91/"/>
      <url>/2016/04/03/Golang-%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>在探讨并发的问题上主要通过比较不同编程语言进行对比.</p><h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><p>并发与并行是两个不同的概念。<br>并发是在设计阶段考虑问题同时执行，并行是指问题多个部分同时执行。</p><blockquote><p>一个人同时做几件事可以理解为并发。几个人同时做一个任务可以理解为并行。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Linux 系统</title>
      <link href="/2016/03/26/%E5%85%B6%E4%BB%96-LinuxOS/"/>
      <url>/2016/03/26/%E5%85%B6%E4%BB%96-LinuxOS/</url>
      <content type="html"><![CDATA[<p>Linux 系统主要分几大系列，大多数的发行版本都是基于 redhat 或 debian. 在系统相关的命令上两种系统有很大的差别.</p><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><a href="http://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></h1><p>Ubuntu 系统是最适合用于桌面环境下的 Linux 系统，相关的软件都有对应的打包版本。</p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><ul><li>如果是比较新的硬件，不用安装老系统。</li><li>新版本(16.04) 没有以前的软件中心。</li></ul><h1 id="PearOS"><a href="#PearOS" class="headerlink" title="PearOS"></a><a href="https://sourceforge.net/projects/pearlinux/" target="_blank" rel="noopener">PearOS</a></h1><p>PearOS 基于 Ubuntu 并添加了 MacOS 主题。不需要手动添加主题设置等，安装成功后就是一个高仿的苹果系统。</p>]]></content>
      
      
        <tags>
            
            <tag> linux; os </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kindle</title>
      <link href="/2016/03/12/%E5%85%B6%E4%BB%96-Kindle/"/>
      <url>/2016/03/12/%E5%85%B6%E4%BB%96-Kindle/</url>
      <content type="html"><![CDATA[<h1 id="Kindle"><a href="#Kindle" class="headerlink" title="Kindle"></a>Kindle</h1><p>Kindle 是一款墨水屏的电子书。在强光下也能轻松阅读，并且耗电低。</p><h2 id="关于-Kindle-使用经验"><a href="#关于-Kindle-使用经验" class="headerlink" title="关于 Kindle 使用经验"></a>关于 Kindle 使用经验</h2><ul><li>淘宝二手 Kindle 不能直接使用亚马逊账号登录.但一般都自带多看系统。</li><li>新版本 Kindle 不能使用多看系统, 需要等待破解。</li><li>开启网络耗电严重，多看比原生耗电.</li><li>可以方便将笔记导出到印象笔记中。<strong>不喜欢印象笔记，现在还限制了免费账号最多两个设备登录</strong></li><li>如果是带灯版本，在白天阅读时记住关闭灯，节省电量。</li><li>mac 直接 ftp 不能上传文件到 Kindle (可能是操作错误), 在手机上用 FTP 可以正常连接。</li><li>弹出 Kindle 需要完全</li><li>直接向多看邮箱发送书籍实现推送. 邮箱格式为 账号<a href="mailto:_01@iduokan.com" target="_blank" rel="noopener">_01@iduokan.com</a>。</li></ul><h2 id="电子书下载"><a href="#电子书下载" class="headerlink" title="电子书下载"></a>电子书下载</h2><ul><li><a href="http://www.2epub.net/" target="_blank" rel="noopener">2Epub</a> 大部分都是网络小说</li><li><a href="http://www.gutenberg.org/" target="_blank" rel="noopener">gutenberg</a> 古登堡</li><li><a href="https://www.gitbook.com/explore" target="_blank" rel="noopener">gitbook</a></li><li>微信推送, 具体参考淘宝卖家介绍。一般图书的质量也不高。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> kindle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go</title>
      <link href="/2016/03/06/Golang-Go/"/>
      <url>/2016/03/06/Golang-Go/</url>
      <content type="html"><![CDATA[<h1 id="Go-语言资料"><a href="#Go-语言资料" class="headerlink" title="Go 语言资料"></a>Go 语言资料</h1><h2 id="资料索引"><a href="#资料索引" class="headerlink" title="资料索引"></a>资料索引</h2><ul><li><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">Go 语言学习资料与社区索引</a></li><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a></li></ul><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://golang.org/ref/spec" target="_blank" rel="noopener">The Go Programming Language Specification</a></li><li><a href="https://tour.golang.org/list" target="_blank" rel="noopener">a tour go</a></li><li><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://golang.org/ref/mem" target="_blank" rel="noopener">The Go Memory Model</a></li></ul><h2 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h2><ul><li><a href="https://codegangsta.gitbooks.io/building-web-apps-with-go/content/" target="_blank" rel="noopener">Building Web Apps with Go</a></li><li><a href="https://gobyexample.com/" target="_blank" rel="noopener">Go by Example</a></li></ul><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><ul><li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/" target="_blank" rel="noopener">Go Web 编程</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">Go编程基础</a></li><li><a href="https://github.com/Unknwon/go-rock-libraries-showcases" target="_blank" rel="noopener">Go名库讲解</a></li><li><a href="https://github.com/Unknwon/go-web-foundation" target="_blank" rel="noopener">Go Web基础</a></li></ul><blockquote><p>明白 Go 的应用方向， 了解主要开源的项目源码。</p></blockquote><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><ul><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">awesome-go</a> go 资料汇总</li><li><a href="https://github.com/mmcgrana/gobyexample" target="_blank" rel="noopener">gobyexample 源码</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="https://github.com/Unknwon/go-study-index" target="_blank" rel="noopener">Go 语言学习资料与社区索引</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">build-web-application-with-golang</a></li><li><a href="http://docs.ruanjiadeng.com/gopl-zh/index.html" target="_blank" rel="noopener">Go语言圣经</a></li><li><a href="https://github.com/golang/go/wiki/GoUsers" target="_blank" rel="noopener">GoUsers</a></li><li><a href="https://www.gitbook.com/book/victoriest/golang-tcp-server/details" target="_blank" rel="noopener">tcp echo</a></li><li><a href="https://github.com/go-training/training" target="_blank" rel="noopener">training</a></li><li><a href="https://www.gitbook.com/book/tiancaiamao/go-internals" target="_blank" rel="noopener">深入解析Go</a> 对 Go 语言的实现进行深入了分析。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> language </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS</title>
      <link href="/2015/12/02/Vue-CSS/"/>
      <url>/2015/12/02/Vue-CSS/</url>
      <content type="html"><![CDATA[<p>记录 CSS 相关的小知识点。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>em 用于宽度时指字符个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max-width: 36em; // 每行显示最大字符数</span><br></pre></td></tr></table></figure></p><p>margin 的顺序是 <strong>上右下左</strong>, 若为两位就是 <strong>上下与左右</strong></p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阅读</title>
      <link href="/2015/12/02/%E5%85%B6%E4%BB%96-%E4%B9%A6%E7%B1%8D/"/>
      <url>/2015/12/02/%E5%85%B6%E4%BB%96-%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<h2 id="在线书籍"><a href="#在线书籍" class="headerlink" title="在线书籍"></a>在线书籍</h2><ul><li><a href="tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a> alibaba在Nginx上进行分支开放出Tengine.</li><li><a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener">开源软件架构</a>介绍了49个开源程序,包括上下两本。图灵有翻译中文版本。</li><li><a href="producingoss.com/zh/index.html">制造开原软件</a>详细说明了开源的各方面注意事项</li><li><a href="http://cpp1x.org/" target="_blank" rel="noopener">cpp1x.org</a> 包含c++11内容</li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li></ul><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><ul><li>黑客与画家 感觉叫程序猿与画家更合适吧</li><li>程序员的思维训练</li><li>写给大家看的设计书</li><li>设计师要懂心理学</li><li>简约至上</li><li>认知与设计</li><li>swift开放指南</li><li>扩展及应用开放chrome</li><li>30 天自制操作系统</li><li>算法帝国</li><li>互联网思维的企业</li><li>社会工程</li><li>只是为了好玩 Linux之父</li><li>统计思维</li></ul><h2 id="编程相关类"><a href="#编程相关类" class="headerlink" title="编程相关类"></a>编程相关类</h2><ul><li>浪潮之巅</li><li>30天编写操作系统</li><li>大规模web服务开发</li><li>征服C指针</li><li>计算机程序设计艺术 The Art of Computer Programming</li><li>编程人生</li><li>具体数学：计算机科学基础（第2版）（Concrete Mathematics: A Foundation for Computer Science，2E）</li><li>计算机科学的基础，C版</li><li>世界是数字的（D is for Digital）</li><li>Windows编程（第六版）</li><li>编码</li><li>图灵的秘密</li><li>代码的未来</li><li>松本行弘的程序世界</li><li>第二版《Linux/Unix Philosophy》</li><li>宫本武藏的《五轮书》</li><li>程序员的职业素养</li><li>代码整洁之道</li><li>敏捷软件开发</li><li>Grady Booch（《UML用户指南》作者）</li><li>Tom DeMarco（《项目百态》作者）</li><li>Meilir Page-Jones（《UML面向对象设计基础》作者）</li><li>Erich Gamma（《设计模式》作者）</li><li>Martin Fowler（《重构》作者）</li><li>Bertrand Meyer（《面向对象软件构造》作者）</li><li>Kent Beck（《测试驱动开发》</li><li>计算机程序的构造和解释》</li><li>架构整洁之道</li><li>ThoughtWorks软件开发沉思录》</li><li>苹果应用开发与营销</li><li>简约至上</li><li>不守规则创意</li><li>写给大家看的设计书</li><li>the Little Mac Book</li><li>认知与设计</li><li>VOIP技术构架（第二版）</li><li>图解HTTP</li><li>java设计模式之禅 研磨设计模式 对比</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><ul><li>架构实战:软件架构设计过程</li><li>企业应用架构模式</li><li>Core J2EE Pattern</li></ul><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><ul><li>架构之美</li><li>特定领域应用框架</li><li>企业集成模式<h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4></li><li>Release It</li><li>面向模式的软件架构</li></ul><h3 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h3><h4 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h4><ul><li>从小工到专家</li><li>卓有成效的程序员</li><li>软件随想录</li><li>高效程序员的45个习惯</li></ul><h4 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h4><ul><li>代码大全</li></ul><h3 id="敏捷"><a href="#敏捷" class="headerlink" title="敏捷"></a>敏捷</h3><h4 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h4><ul><li>解析极限编程</li><li>硝烟中的Scrum和XP</li><li>ThoughtWorks文集</li></ul><h4 id="进阶-2"><a href="#进阶-2" class="headerlink" title="进阶"></a>进阶</h4><ul><li>持续集成:软件质量改进和风险降低之道</li><li>Scrum敏捷软件开发</li><li>用户故事和敏捷方法</li><li>重构极限编程</li><li>Kanban</li><li>敏捷估计和规划</li><li>测试人员和敏捷团队的实践指南</li><li>How Google test Software</li><li>持续交付－发布可靠软件的系统方法</li><li>精益思想</li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="入门-3"><a href="#入门-3" class="headerlink" title="入门"></a>入门</h4><ul><li>代码整洁之道</li><li>重构:改善既有代码的设计</li><li>单元测试之道</li><li>测试驱动开发</li><li>代码阅读方法和实践</li><li>The ART of Readable Code</li></ul><h4 id="进阶-3"><a href="#进阶-3" class="headerlink" title="进阶"></a>进阶</h4><ul><li>实现模式</li><li>修改代码的艺术</li><li>重构与模式</li><li>XUnit测试模式</li></ul><h4 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h4><ul><li>计算机程序的构造合解释</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><h4 id="入门-4"><a href="#入门-4" class="headerlink" title="入门"></a>入门</h4><ul><li>Head First 设计模式</li><li>UML与模式</li><li>面向对象分析与设计</li><li>敏捷软件开发:原则,模式,实践</li><li>设计模式解析</li><li>OO启示录</li></ul><h4 id="进阶-4"><a href="#进阶-4" class="headerlink" title="进阶"></a>进阶</h4><ul><li>设计模式:可复用面向对象软件的基础</li><li>Unix编程艺术</li><li>软件框架设计的艺术</li></ul><h4 id="高级-2"><a href="#高级-2" class="headerlink" title="高级"></a>高级</h4><ul><li>领域驱动设计:软件核心复杂性应对之道</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>你的灯亮着吗</li><li>学会提问</li><li>少有人走的路</li><li>系统思考</li><li>哪来天才</li><li>程序的思维修炼</li><li>第五项修炼</li><li>Change by Design</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>欢场女子回忆录</li><li>黄金时代</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读的书再多如果不写出来，就不能成为自己的东西。如果不能向别人说出来，就不能得到修正与反馈。</p>]]></content>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jade</title>
      <link href="/2015/12/01/%E5%85%B6%E4%BB%96-Jade/"/>
      <url>/2015/12/01/%E5%85%B6%E4%BB%96-Jade/</url>
      <content type="html"><![CDATA[<p><a href="http://jade-lang.com/" target="_blank" rel="noopener">Jade</a> 是前端模板, 与 Ejs 相比更简洁。Jade 已经更名为 <strong>pug</strong>.<br><a href="https://github.com/pugjs/pug/blob/master/Readme_zh-cn.md" target="_blank" rel="noopener">Pug - 模板引擎</a></p><h1 id="Jade-总结"><a href="#Jade-总结" class="headerlink" title="Jade 总结"></a>Jade 总结</h1><ul><li>Jade 用于服务端生成html,在单页应用中没有必要使用。</li><li>Jade 过于简洁，入门和阅读难度大。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> jade, html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web 全栈</title>
      <link href="/2015/11/25/Node-HTTP-%E6%A1%86%E6%9E%B6/"/>
      <url>/2015/11/25/Node-HTTP-%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="web-框架介绍"><a href="#web-框架介绍" class="headerlink" title="web 框架介绍"></a>web 框架介绍</h1><h2 id="relay"><a href="#relay" class="headerlink" title="relay"></a><a href="https://github.com/facebook/relay" target="_blank" rel="noopener">relay</a></h2><p>与查询一起使用。</p><h2 id="meteor"><a href="#meteor" class="headerlink" title="meteor"></a><a href="https://github.com/meteor/meteor/" target="_blank" rel="noopener">meteor</a></h2><p>适合实时引用，对 App 接口不友好。</p><h2 id="phoneix"><a href="#phoneix" class="headerlink" title="phoneix"></a><a href="http://www.phoenixframework.org/" target="_blank" rel="noopener">phoneix</a></h2><p>适合游戏的后端框架。</p><h2 id="sails"><a href="#sails" class="headerlink" title="sails"></a><a href="http://sailsjs.org/" target="_blank" rel="noopener">sails</a></h2><p>MVC 框架，Express 版本落后。</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li><a href="http://www.w3school.com.cn/html5/index.asp" target="_blank" rel="noopener">w3school html5</a></li><li><a href="http://diveintohtml5.info/" target="_blank" rel="noopener">DIVE INTO HTML5</a></li><li><a href="http://blog.csdn.net/freshlover/article/details/9310437" target="_blank" rel="noopener">关于Apple设备私有的apple-touch-icon属性详解</a> 可以直接将网站快捷访问添加到主屏幕。</li><li><a href="http://www.jb51.net/w3school/tags/att_link_media.htm" target="_blank" rel="noopener">HTML <link> 标签的 media 属性</a> media 属性用于为不同的媒介类型规定不同的样式。</li><li><a href="http://www.w3school.com.cn/js/js_howto.asp" target="_blank" rel="noopener">老旧的实例可能会在 <script> 标签中使用 type=”text/javascript”。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/09/package-management.html">前端模块管理器简介</a> Webpack 更好</li></ul></script></a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sails Policies</title>
      <link href="/2015/05/25/Node-Sails-Policies/"/>
      <url>/2015/05/25/Node-Sails-Policies/</url>
      <content type="html"><![CDATA[<p><a href="http://www.sailsjs.org/#!/documentation/concepts/Policies" target="_blank" rel="noopener">原文链接</a></p><h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>Policies在Sails中作为授权和访问控制的通用工具.它让你可以去在粒度基本上控制允许或拒绝访问你的控制器。例如，如果你建立了一个Dropbox,在让用户上传文件到文件夹前，你需要检查用户是否认证，是否有写文件的权限，最后你要去检查用户上传内容的文件夹是否有足够的空间。</p><p>Policies可以用于任何方面:HTTP基本认证,第三方程序单点登录， OAuth 2.0, 自定义授权/认证方案。</p><p><strong>Policies只能用于控制器而不能用于视图。如果你在routes.js配置文件中定义了一个路由去直接指向视图，将没有Policies会起作用。为了确信policies是可用的，你可以定义一个控制器去显示试图并在路由中配置action</strong></p><h2 id="实现你的第一个Policy"><a href="#实现你的第一个Policy" class="headerlink" title="实现你的第一个Policy"></a>实现你的第一个Policy</h2><p>Policies是定义在你的Sails程序的api/policies文件夹下的文件。每一个policy文件应该包含一个函数。</p><p>当运行时，policies是在控制器前运行的中间件功能。你可以将中间件串联在一起使用,这也是被设计为这样使用。每一个中间件应该只完成一个功能。</p><p>例如，象上面提到的可写权限策略。</p><p>  //policies/canWrite.js<br>  module.exports = function canWrite (req, res, next){<br>  var targetFolderId = req.param(‘id’);<br>  var userId = req.session.user.id;<br>  Permission<br>  .findOneByFolderId(targetFolderId)<br>  .exec( function foundPermission (err, permission) {<br>    //Unexpected error occurred – skip to the app’s default error(500) handler<br>    if(err) return next(err);<br>    //No permission exists linking this user to this folder. Maybe they got removed from it? Maybe they never had permission in the first place? Who cares?<br>    if(!permission) return res.redirect(‘/notAllowed’);<br>    //Ok, so a permission was found. Let’s be sure it’s a  “write”<br>    if(permission.type !== ‘write’) return res.redirect(‘/notAllowed’);<br>    //If we made it all the awy down here, looks like everything’s ok. so we’ll let the user through<br>    next();<br>    });<br>  };</p><p>##用Policies去保护控制器<br>Sails有内建一个ACL(访问控制表)位于config/policies.js文件。这个文件用于映射policies到你的控制器。</p><p>这个文件是声明，它描述了你的应用权限应该是什么，并不描述它是如何实现。这使得新开发者更容易的去理解发生了什么事。另外让你的应用更灵活因为你的要求是不可避免的不断改变。</p><p>你的config/policies.js文件应该导出一个Javascript对象，它的键名是控制器的名称(或’*’用于全部的policies).它的值是对象映射的操作名称和一个或多个policies.看下面获取更详细的说明和例子说明。</p><p>###应用一个policy到指定的控制器操作</p><p>  {<br>    ProfileController:{<br>      //Apply the ‘isLoggedIn’ policy to the ‘edit’ action of ‘ProfileController’<br>      edit:’isLoggedIn’<br>      //Apply the ‘isAdmin’ And ‘isLoggedIn’ policies , in the order, to the ‘create’ action<br>      create:[isAdmin’, ‘isLoggedIn’]<br>    }</p><p>  }</p><p>###应用一个policy到整个控制器</p><p>  {<br>    ProfileController:{<br>    //Apply ‘isLogged’ in by default to all actions that are Not specied below<br>    ‘*’: ‘isLoggedIn’,<br>    //If an action is explicitly listed, its policy list will override the default list<br>    //So, we have to list ‘isLoggedIn’ again for the ‘edit’ action if we want it to be applied<br>    edit: [‘isAdmin’, ‘isLoggedIn’]<br>  }</p><p><strong>默认的策略映射不会”cascade”或”trickle down”, 对于控制器的操作指定的策略映射会覆盖默认的映射</strong></p><blockquote><p>这是一般 Sails 关于权限控制的官方文档翻译。 后面再说吧。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Dart</title>
      <link href="/2015/05/25/%E5%85%B6%E4%BB%96-Dart/"/>
      <url>/2015/05/25/%E5%85%B6%E4%BB%96-Dart/</url>
      <content type="html"><![CDATA[<p>##<a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a><br>Dart is an open-source, scalable programming language, with robust libraries and runtimes, for building web, server, and mobile apps.</p><p>###安装</p><ul><li><a href="https://www.dartlang.org/downloads/mac.html" target="_blank" rel="noopener">Mac 安装</a> Dart编辑器大概是Eclipse＋插件.可以选择其他IDE+插件的方式。</li><li><a href="https://confluence.jetbrains.com/display/WI/Getting+started+with+Dart" target="_blank" rel="noopener">WebStorm Dart</a> WebStorm 中创建Dart项目</li><li><a href="https://dartpad.dartlang.org/" target="_blank" rel="noopener">Dartpad</a> Dart在线编辑/运行器</li><li><a href="https://www.dartlang.org/tools/" target="_blank" rel="noopener">Dart tools</a> Dart在相关IDE插件安装.</li></ul><p>###学习</p><ul><li><a href="https://www.dartlang.org/codelabs/darrrt/" target="_blank" rel="noopener">Learn Dart in Minutes</a> 对Dart的几分钟快速学习。可以直接通过Webstom创建新Dart项目并设置项目路径为本项目。<br>需要配置两个安装路径。</li><li><a href="http://dart.lidian.info/wiki/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">Dart Wiki</a></li><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="noopener">Dart 语言导览</a> 内容太老，一些函数已经被库移除。</li><li><a href="https://www.dartlang.org/docs/dart-up-and-running/ch02.html" target="_blank" rel="noopener">A Tour of the Dart Language</a></li></ul><p>###Mac默认安装路径</p><ul><li>/usr/local/Cellar/dartium/1.11.0-dev.0.0/Chromium.app</li><li>/usr/local/opt/dart/libexec</li></ul><blockquote><p>此语言当前还为流行，暂时还是不学了吧。 tqcenglish</p></blockquote>]]></content>
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SockJS-client</title>
      <link href="/2015/04/01/%E5%B7%A5%E4%BD%9C-2015-04-1-SockJS-client/"/>
      <url>/2015/04/01/%E5%B7%A5%E4%BD%9C-2015-04-1-SockJS-client/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noopener">原文链接</a></p><p>SockJS是浏览器端的JavaScript库,作为与WebSocket类似的东西。SockJS提供一个连贯,跨浏览器，可以创建低延迟，全双工，浏览器与Web服务器之间进行跨域通信通道的JavaScript API. SockJS的底层实现首先尝试调用本地WebSockets,如果它失败了就会调用各种浏览器指定的协议并且通过象WebSocket的方式抽象它们。<br>SockJS的目标是工作在任意浏览器和那些不支持WebSocket协议的环境–例如:落后的企业代理。SockJS客户端程序必须需要一个对应的服务端。</p><ul><li>SockJS-node 是一个通过Node.js实现的SockJS 服务端.</li></ul><p>设计理念</p><ul><li>这个API应该尽可能的遵循HTML5 Websockets API。</li><li>所有的传输必须支持跨域连接，建议部署SockJS服务端与你主站在不在一个服务器上。</li><li>对主流的浏览器支持至少一种流传输协议。流传输协议应该支持跨域和Cookies(基于 cookie 的粘性会话).</li><li>轮询传输的方式用于老旧设备或处于限制性代理下的主机。</li><li>建立连接应该尽可能的快和简单。</li><li>不象Flash</li></ul><p>##Getting Started<br>SockJS模仿WebSockets API,并用SockJS 对象取代WebSocket.首先你需要加载SockJS库，例如,放下面代码到你的Html页面</p><pre><code>&lt;script src=&quot;//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>当脚本加载后你可以通过和SockJS服务端建立连接。这是一个简单的例子:</p><pre><code>var sock = new SockJS(&apos;http://mydomain.com/my_prefix&apos;);sock.onopen = function() {console.log(&apos;open&apos;);};sock.onmessage = function(e) {console.log(&apos;message&apos;, e.data);};sock.onclose = function() {console.log(&apos;close&apos;);};sock.send(&apos;test&apos;);sock.close();</code></pre><p>##SockJS-client API</p><p>###SockJS class<br>与”WebSocket”API相似，SockJS构造函数需要一个或多个参数。</p><pre><code>var sockjs = new SockJS(url, reserved, options);</code></pre><p>其中options是一个包含如下内容的散列.</p><ul><li><p>server (string)<br>string是要追加到URL的实际数据连接。默认为随机4位数。</p></li><li><p>transports (string OR array of strings)<br>有时禁用一些备用的传输是非常有用的。此选项允许您提供可用于SockJS清单传输。默认所有可用传输将被使用。</p></li></ul><p>尽管 ‘SockJS’ 对象尝试去模拟’WebSocket’的功能,但是不可能去支持所有的WebSocket特性。事实上一个重要的限制就是SockJS你不能同时打开多个SockJS连接到一个域。这个限制的原因是由于一个浏览器限制向外连接-通常浏览器不允许同时打开两个以上的向同一个域的连接。单个SockJS会话要求两个连接-一个用于下载，一个用于发送消息。在同一时间打开第二个SockJS会话很可能阻塞，并导致两个会话超时。同一时间打开超过一个的SockJS连接通常是错误的方法。如果你必须实现这个需求，<br>你可以使用多个的子域。使用不同的子域去处理每个SockJS连接。</p>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>寻找手机</title>
      <link href="/2015/03/31/%E7%BF%BB%E8%AF%91-Keep-a-watch-on-your-phone/"/>
      <url>/2015/03/31/%E7%BF%BB%E8%AF%91-Keep-a-watch-on-your-phone/</url>
      <content type="html"><![CDATA[<p>原文链接<a href="http://officialandroid.blogspot.sg/2015/03/keep-watch-on-your-phone.html" target="_blank" rel="noopener">Keep a watch on your phone</a></p><p>在2013年我们推出了Android设备管理器, 它可以帮助你查找和保护你的Android设备.<br>从那时起,Android设备管理器有帮助大约30万用户去寻找他们的手机或平板。<br>今天我们正在实现Android设备管理更有用的功能即通过引入对Android Wear的支持来帮助你寻找你丢失的设备。<br>不记得手机放置位置? 没问题!. 在你手腕上的Android Wear会连接你的手机,并通过Android 设备管理器聚集在一起，你要确保这样。<br>要使用这项新功能,只需要说”Ok, Google. Start”.点击寻找我的手机或在开始菜单选项中选择”寻找我的手机”.你的手机会在最大音量响起,你就可以走近你的手机并找到它.\<br>最重要的是你不需要做任何事去开启这个新功能，它会在未来几周内的所有Android wear设备上推出。</p><blockquote><p>最开始打算翻译一下重大项目的博客，这是一篇关于 Andoid 的功能介绍博客。 后面没有坚持也就忘记了最开始的目标了。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JsSip</title>
      <link href="/2015/03/25/%E5%B7%A5%E4%BD%9C-2015-03-25-JsSIP/"/>
      <url>/2015/03/25/%E5%B7%A5%E4%BD%9C-2015-03-25-JsSIP/</url>
      <content type="html"><![CDATA[<p><a href="http://jssip.net/" target="_blank" rel="noopener">JsSIP</a></p><p>##相关链接</p><ul><li><a href="http://tryit.jssip.net/" target="_blank" rel="noopener">在线demo</a>[Rejecting secure video stream without encryption details: video 3093 RTP/SAVPF)(<a href="https://github.com/versatica/JsSIP/issues/300" target="_blank" rel="noopener">https://github.com/versatica/JsSIP/issues/300</a>)  与Asterisk视频不兼容</li><li>[JsSIP更新日志] (<a href="https://github.com/versatica/JsSIP/blob/master/CHANGELOG.md" target="_blank" rel="noopener">https://github.com/versatica/JsSIP/blob/master/CHANGELOG.md</a>) API变化快</li><li>SIP over WebSocket <a href="https://tools.ietf.org/html/rfc7118" target="_blank" rel="noopener">(RFC 7118)</a></li></ul><p>##<a href="http://jssip.net/documentation/0.6.x" target="_blank" rel="noopener">0.6.x</a></p><p>###<a href="http://jssip.net/documentation/0.6.x/overview/" target="_blank" rel="noopener">Overview</a></p><p>###<a href="http://jssip.net/documentation/0.6.x/getting_started/" target="_blank" rel="noopener">getting_started</a></p><p>##<a href="http://jssip.net/documentation/faq/" target="_blank" rel="noopener">F.A.Q</a><br>F.A.Q. (Frequently Asked Questions)</p><p>###JsSIP是什么<br>JsSIP是一个可以在Web环境下的构建SIP终端(客户端)的纯JavaScript实现的库。</p><p>###JsSIP可以实现什么<br>可以在Web页面实现一个完全的SIP UA。</p><ul><li>拨打或接听多媒体呼叫。</li><li>发送或接受文本消息。</li></ul><p>###JsSIP在不同浏览器的支持<br><a href="http://jssip.net/documentation/misc/interoperability/" target="_blank" rel="noopener">了解互通性</a></p><p>###JsSIP需要的运行环境<br>JsSIP是一个SIP 的WebSocket客户端, 它需要一个具有WebSocket功能的SIP服务器实现连接和交换信息。</p><p>###对不支持WebSocket现有SIP服务器解决方法<br>你可以添加一个<a href="http://oversip.net/" target="_blank" rel="noopener">OverSIP</a>SIP WebSocket代理在已有的SIP服务器。</p><ul><li>你的SIP服务器必须实现Path mechanism <a href="http://tools.ietf.org/html/rfc3327" target="_blank" rel="noopener">(RFC 3327)</a></li><li>如何不能满足(例如Asterisk就不支持Path),需要使用OverSIP的<a href="http://www.oversip.net/documentation/1.3.x/api/built_in_modules/outbound_mangling/" target="_blank" rel="noopener">OutboundMangling</a>模块.</li></ul><p>###使用JsSIP登录Asterisk拒绝<br>Asterisk不喜欢SIP 注册者在Contact头中包含有”xxxx.invalid”域，如果你使用Asterisk作为注册服务器，开启UA的<a href="http://jssip.net/documentation/0.6.x/api/ua_configuration_parameters/#hack_ip_in_contact" target="_blank" rel="noopener">hack_ip_in_contact</a>。配置选项</p><p>##参考链接</p><ul><li><a href="http://stackoverflow.com/questions/20195542/python-how-to-get-the-import-pjsua-giving-no-module-named-pjsua" target="_blank" rel="noopener">No module named pjsua</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Some SoftPhone</title>
      <link href="/2015/03/19/%E5%B7%A5%E4%BD%9C-2015-03-19-%E8%BD%AF%E7%94%B5%E8%AF%9D%E6%AF%94%E8%BE%83/"/>
      <url>/2015/03/19/%E5%B7%A5%E4%BD%9C-2015-03-19-%E8%BD%AF%E7%94%B5%E8%AF%9D%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<p>#软电话对比</p><p>##sipdroid<br><a href="https://code.google.com/p/sipdroid/" target="_blank" rel="noopener">https://code.google.com/p/sipdroid/</a></p><p>###架构</p><p>sip协议栈使用JAVA实现，音频Codec使用skype的silk实现。NAT传输支持stun server.</p><p>###优缺点：</p><p>NAT方面只支持STUN，无ICE框架，如需要完全实现P2P视频通话需要实现符合ICE标准的客户端,音频方面没看到AEC等技术，视频方面还不是太完善，目前只看到调用的是系统自带的MediaRecorder，并没有自己的第三方音视频编解码库。</p><p>###实际测试：</p><p>基于sipdroid架构的话，我们要做的工作会比较多，（ICE支持，添加回音消除，NetEQ等gips音频技术，添加视频硬件编解码codec.).</p><p>##imsdroid</p><p>###架构：</p><p>基于doubango(Doubango 是一个基于3GPP IMS/RCS 并能用于嵌入式和桌面系统的开源框架。该框架使用ANSCI-C编写，具有很好的可移植性。并且已经被设计成非常轻便且能有效的工作在低内存和低处理能力的嵌入式系统上。苹果系统上的idoubs功能就是基于此框架编写) .音视频编码格式大部分都支持（H264(video)，VP8(video)，iLBC(audio),PCMA,PCMU,G722,G729）。NAT支持ICE（stun+turn）</p><p>###优缺点<br>imsdroid目前来说还是算比较全面的，包括音视频编解码，传输（RTSP，ICE），音频处理技术等都有涉猎。doubango使用了webrtc的AEC技术，但是其调用webrtc部分没有开源，是用的编译出来的webrtc的库。如果要改善音频的话不太方便，Demo的音频效果可以，视频效果还是不太理想。</p><p>###效果实测</p><p>测试环境：公司局域网内两台机器互通，服务器走外网sip2sip，音频质量可以，但是AEC打开了还是有点回音（应该可以修复）。视频马赛克比较严重，延迟1秒左右。</p><p>##csipsimple</p><p>###架构</p><p>sip协议栈用的是pjsip,音视频编解码用到的第三方库有ffmpeg（video）,silk(audio),webrtc.默认使用了webrtc的回声算法。支持ICE协议。</p><p>###优缺点：<br>csipsimple架构比较清晰，sip协议由C实现，java通过JNI调用，SIP协议这一块会比较高效。其VOIP各个功能也都具备，包括NAT传输，音视频编解码。并且该项目跟进新技术比较快，官方活跃程度也比较高。如果做二次开发可以推荐这个。</p><p>###实测效果<br>测试环境：公司局域网内两台机器互通，服务器走外网sip2sip，音频质量可以，无明显回音，视频需要下插件，马赛克比imsdroid更严重。</p><p>##Linphone<br>这个是老牌的sip，支持平台广泛 windows, mac,ios,android,linux，技术会比较成熟。但是据玩过的同事说linphone在Android上的bug有点多，由于其代码实在庞大，所以我暂时放弃考虑Linphone.不过如果谁有跨平台的需要，可以考虑Linphone或者imsdroid和下面的webrtc.好像现在开源软件都跨平台了。</p><p>##webrtc<br> 架构imsdroid,csipsimple,linphone都想法设法调用webrtc的音频技术，本人也测试过Android端的webrtc内网视频通话，效果比较满意。但是要把webrtc做成一个移动端的IM软件的话还有一些路要走，不过webrtc基本技术都已经有了，包括p2p传输，音视频codec,音频处理技术。不过其因为目前仅支持VP8的视频编码格式（QQ也是）想做高清视频通话的要注意了。VP8在移动端的硬件编解码支持的平台没几个（RK可以支持VP8硬件编解码）。不过webrtc代码里看到可以使用外部codec,这个还是有希望调到H264的。</p><p>##总结：</p><ul><li>sipdroid比较轻量级，着重基于java开发（音频codec除外），由于其音视频编码以及P2P传输这一块略显不足，不太好做定制化开发和优化。</li><li>imsdroid,遗憾就是直接调用webrtc的库，而最近webrtc更新的比较频繁，开发比较活跃。如果要自己在imsdroid上更新webrtc担心兼容性问题，希望imsdroid可以直接把需要的webrtc相关源码包进去。</li><li>csipsimple的话，都是围绕pjsip的，webrtc等都是以pjsip插件形式扩充的,类似gstreamer.</li><li>webrtc如果有技术实力的开发公司个人还是觉得可以选择这个来做，一个是google的原因，一个是其视频通话相关关键技术都比较成熟的原因.</li></ul>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Asterisk书签</title>
      <link href="/2015/03/16/%E5%B7%A5%E4%BD%9C-2015-03-16-Asterisk%E4%B9%A6%E7%AD%BE/"/>
      <url>/2015/03/16/%E5%B7%A5%E4%BD%9C-2015-03-16-Asterisk%E4%B9%A6%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>Asterisk书签包含相关博客和官方wiki.</p><p>##官方wiki</p><ul><li><a href="https://wiki.asterisk.org/wiki/display/AST/Secure+Calling+Tutorial" target="_blank" rel="noopener">Secure+Calling+Tutorial</a>This tutorial makes use of SRTP and TLS. SRTP support was added in Asterisk 1.8, TLS was added in 1.6.</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" target="_blank" rel="noopener">Asterisk+WebRTC+Support</a>Asterisk对WebRTC的支持。</li><li><a href="https://wiki.asterisk.org/wiki/display/AST/WebRTC+tutorial+using+SIPML5" target="_blank" rel="noopener">WebRTC+tutorial+using+SIPML5</a>基于SIMPL5的Asterisk WebRTC配置。</li></ul><p>##源码分析</p><ul><li><a href="http://doxygen.asterisk.org/asterisk1.0/utils_8c.html" target="_blank" rel="noopener">utils.c File Reference</a></li><li><a href="http://doxygen.asterisk.org/trunk/pages.html" target="_blank" rel="noopener">Related Pages</a></li></ul><p>##常见错误<br>安装ekiga后,不能注册帐号</p><pre><code>sudo netstat -plntu | grep &quot;5060&quot;</code></pre><p> 发现占用了Asterisk的5060端口,需要<a href="http://blog-on-linux.blogspot.sg/2009/02/change-port-of-ekiga.html" target="_blank" rel="noopener">修改ekiga 监听端口</a></p><p>##相关技术</p><ul><li><a href="https://github.com/seanbright/asterisk-opus" target="_blank" rel="noopener">github asterisk-opus</a>对源码进行opus和vp8支持.</li><li><a href="http://cgi-c.sourceforge.net/" target="_blank" rel="noopener">A CGI Library for C</a></li><li><a href="http://www.rowetel.com/blog/?page_id=455" target="_blank" rel="noopener">Mini Asterisk GUI</a></li><li><a href="http://nodejsasterisk.blogspot.sg/" target="_blank" rel="noopener">Voicer - voice speed dial for #asterisk</a></li><li><a href="http://www.sharetechnote.com/html/IMS_SIP_SS.html" target="_blank" rel="noopener">IMS_SIP_SS</a></li></ul><p>#Asterisk视频会议<br>Asterisk仅仅实现数据转发功能。 在Meetme功能实现中, Asterisk请求Meetme实现多路声音混合功能在接受混合后的数据。同理，视频会议的流程如下</p><pre><code>client--&gt;Asterisk--&gt;mcuencoding--&gt; video processor--&gt; decoding</code></pre><p>##链接<br><a href="http://lihanwuhan.blog.163.com/blog/static/514325562008597425617/" target="_blank" rel="noopener">关于Asterisk视频会议</a></p><p>##名词<br><a href="http://zh.wikipedia.org/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8" target="_blank" rel="noopener">多路复用(Multiplexing，又稱「多工」)</a>:表示在一个信道上传输多路信号或数据流的过程和技术.<br><a href="http://en.wikipedia.org/wiki/Multipoint_Control_Unit" target="_blank" rel="noopener">MCU</a>: 混合视频.</p>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Getting+Started+with+ARI</title>
      <link href="/2015/03/10/%E7%BF%BB%E8%AF%91-2015-03-10-Getting-Started-with-ARI/"/>
      <url>/2015/03/10/%E7%BF%BB%E8%AF%91-2015-03-10-Getting-Started-with-ARI/</url>
      <content type="html"><![CDATA[<p><a href="https://wiki.asterisk.org/wiki/display/AST/Getting+Started+with+ARI" target="_blank" rel="noopener">原文链接</a></p><p>##概述<br>Asterisk 12 中介绍了Asterisk REST Interface, 一个构建Asterisk基本应用的RESTful应用接口集合。这篇文章会指导你开启ARI功能并运行一个基本的应用。</p><p>构建一个ARI应用包括如下三个主要的组件。</p><p>首先是这个RESTful应用接口本身。这个应用接口是通过<a href="http://swagger.io/" target="_blank" rel="noopener">Swagger</a>(一个轻量级的RESTful应用接口文档规格标准)生成.<a href="http://swagger.io/" target="_blank" rel="noopener">Swagger</a>应用接口文档被用于Asterisk本身生成有效的模板文件,静态的wiki文件和通过<a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">Swagger-UI</a>生成交互式文档.</p><p>其次，Asterisk需要发送异步事件到应用(建立新通道，通道桥接，通道挂断).这些通过基于<strong>/ari/events</strong>上的WebSocket实现.事件会作为JSON格式的消息发送，更多可以查看文档<a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+REST+Data+Models" target="_blank" rel="noopener">REST消息模型</a>(在列表中查看子标题<a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+REST+Data+Models#Asterisk12RESTDataModels-Message" target="_blank" rel="noopener"> Message data model</a>)</p><p>最后，连接这个拨号规则到你的应用<a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Application_Stasis" target="_blank" rel="noopener">Stasis() dialplan application</a>.<br>在拨号规则内，你可以发送一个通道到Stasis(),为扩展的应用指定名称，以及发送可选参数到应用。</p><p>##例子 ARI Hello World!<br>在这个例子中，完成以下任务:</p><ul><li>配置Asterisk去开启ARI功能</li><li>发送一个通道到Stasis</li><li>在指定通道播放”Hello World”</li></ul><p>这个例子不会包括的内容:</p><ul><li>安装Asterisk,假设已经安装了Asterisk 12或最新版本并且已运行.</li><li>在Asterisk中配置SIP。为了实现这个例子的目的，我们假设你已经有软电话或硬电话并通过chan_sip或chan_pjsip注册到Asterisk.</li></ul><p>###安装wscat<br>ARI需要一个WebSocket连接去接收事件,为了实现这个例子的目的。我们使用wscat,一个非常便利的类似netcat基于Node.js的WebSocket 库的命令行工具。<br>如果没有安装wscat:</p><ol><li><p>如何还没有安装,首先安装npm</p><p>   apt-get install npm</p></li><li><p>安装ws包</p><p>   npm install -g wscat</p></li></ol><p>###安装 curl<br>  为了通过ARI控制Stasis拨号应用中的通道，我们需要一个Http 客户端。 根据这个例子的目的，我们使用 curl:</p><pre><code>apt-get install curl</code></pre><p>###配置Asterisk</p><ol><li><p>在http.conf开启Asterisk的http服务.</p><p>   [general]<br>   enable = yes<br>   bindaddr = 0.0.0.0</p></li><li><p>在ari.conf中配置ARI用户</p><p>   [general]<br>   enable = yes<br>   pretty = yes</p><p>   [asterisk]<br>   type = user<br>   read_only = no<br>   password = asterisk</p></li><li><p>为Stasis应用创建拨号规则，这里，我们选择分机号1000在default的上下文中。如果你的SIP电话已经配置在不同的上下文中，需要相应的调整。</p><p>   [default]<br>   exten =&gt; 1000, 1, NoOp()<br>   same =&gt; n, Answer()<br>   same =&gt; n, Stasis(hello-world)<br>   same =&gt; n, Hangup()</p></li></ol><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><ol><li><p>使用wscat连接到Asterisk</p><p>   wscat -c “ws://localhost:8088/ari/events?api_key=asterisk:asterisk&amp;app=hello-world”<br>   connected (press CTRL+C to quit)</p><p>在Asterisk中,我们应该看见一个新的WebSocket连接和一个我们Stasis应用被创建的消息</p><p>   == WebSocket connection from ‘127.0.0.1:37872’ for protocol ‘’ accepted using version ‘13’<br>   Creating Stasis app ‘hello-world’</p></li><li><p>在你的SIP设备上，拨打分机号1000</p><p>   – Executing [1000@default:1] NoOp(“PJSIP/1000-00000001”, “”) in new stack<br>   – Executing [1000@default:2] Answer(“PJSIP/1000-00000001”, “”) in new stack<br>   – PJSIP/1000-00000001 answered<br>   – Executing [1000@default:3] Stasis(“PJSIP/1000-00000001”, “hello-world”) in new stack</p><p>在wscat中,我们应该看见StasisStart事件，表明一个通道有进入我们的Stasis应用</p></li></ol><pre><code>{ &quot;application&quot;:&quot;hello-world&quot;, &quot;type&quot;:&quot;StasisStart&quot;, &quot;timestamp&quot;:&quot;2014-05-20T13:15:27.131-0500&quot;, &quot;args&quot;:[], &quot;channel&quot;:{    &quot;id&quot;:&quot;1400609726.3&quot;,    &quot;state&quot;:&quot;Up&quot;,    &quot;name&quot;:&quot;PJSIP/1000-00000001&quot;,    &quot;caller&quot;:{       &quot;name&quot;:&quot;&quot;,       &quot;number&quot;:&quot;&quot;},    &quot;connected&quot;:{       &quot;name&quot;:&quot;&quot;,       &quot;number&quot;:&quot;&quot;},    &quot;accountcode&quot;:&quot;&quot;,    &quot;dialplan&quot;:{       &quot;context&quot;:&quot;default&quot;,       &quot;exten&quot;:&quot;1000&quot;,       &quot;priority&quot;:3},    &quot;creationtime&quot;:&quot;2014-05-20T13:15:26.628-0500&quot;}}</code></pre><ol start="3"><li><p>使用curl去实现Asterisk播放hello-world.注意通道的id必须与StasisStart事件中的id相匹配.</p><p>   curl -v -u asterisk:asterisk -X POST    “<a href="http://localhost:8088/ari/channels/1400609726.3/play?media=sound:hello-world&quot;" target="_blank" rel="noopener">http://localhost:8088/ari/channels/1400609726.3/play?media=sound:hello-world&quot;</a></p><p>这个Http请求的响应告诉我们请求是否成功.返回这个操作创建的JSON格式的播放资源。</p><ul><li>About to connect() to localhost port 8088 (#0)</li><li>Trying 127.0.0.1… connected</li><li>Server auth using Basic with user ‘asterisk’<blockquote><p>POST /ari/channels/1400609726.3/play?media=sound:hello-world HTTP/1.1<br>Authorization: Basic YXN0ZXJpc2s6c2VjcmV0<br>User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3<br>Host: localhost:8088<br>Accept: <em>/</em></p></blockquote>&lt; HTTP/1.1 201 Created<br>&lt; Server: Asterisk/SVN-branch-12-r414137M<br>&lt; Date: Tue, 20 May 2014 18:25:15 GMT<br>&lt; Connection: close<br>&lt; Cache-Control: no-cache, no-store<br>&lt; Content-Length: 146<br>&lt; Location: /playback/9567ea46-440f-41be-a044-6ecc8100730a<br>&lt; Content-type: application/json<br>&lt;</li><li>Closing connection #0<br>{“id”:”9567ea46-440f-41be-a044-6ecc8100730a”,<br>“media_uri”:”sound:hello-world”,<br>“target_uri”:”channel:1400609726.3”,<br>“language”:”en”,<br>“state”:”queued”}</li></ul><p>在Asterisk中，这个声音文件会在通道中播放.</p><p>   – &lt;PJSIP/1000-00000001&gt; Playing ‘hello-world.gsm’ (language ‘en’)</p><p>在基于WebSocket的连接的wscat中，当播放开始或结束都会被通知。</p></li></ol><pre><code>{&quot;application&quot;:&quot;hello-world&quot;,   &quot;type&quot;:&quot;PlaybackStarted&quot;,   &quot;playback&quot;:{      &quot;id&quot;:&quot;9567ea46-440f-41be-a044-6ecc8100730a&quot;,      &quot;media_uri&quot;:&quot;sound:hello-world&quot;,      &quot;target_uri&quot;:&quot;channel:1400609726.3&quot;,      &quot;language&quot;:&quot;en&quot;,      &quot;state&quot;:&quot;playing&quot;}}{&quot;application&quot;:&quot;hello-world&quot;,   &quot;type&quot;:&quot;PlaybackFinished&quot;,   &quot;playback&quot;:{      &quot;id&quot;:&quot;9567ea46-440f-41be-a044-6ecc8100730a&quot;,      &quot;media_uri&quot;:&quot;sound:hello-world&quot;,      &quot;target_uri&quot;:&quot;channel:1400609726.3&quot;,      &quot;language&quot;:&quot;en&quot;,      &quot;state&quot;:&quot;done&quot;}}</code></pre><ol start="4"><li><p>挂断电话，会导致在Asterisk中的通道被挂断，通道也会被Stasis应用释放并通过StasisEnd事件通知客户端。</p><p>   {“application”:”hello-world”,</p><pre><code>&quot;type&quot;:&quot;StasisEnd&quot;,&quot;timestamp&quot;:&quot;2014-05-20T13:30:01.852-0500&quot;,&quot;channel&quot;:{   &quot;id&quot;:&quot;1400609726.3&quot;,   &quot;state&quot;:&quot;Up&quot;,   &quot;name&quot;:&quot;PJSIP/1000-00000001&quot;,   &quot;caller&quot;:{      &quot;name&quot;:&quot;&quot;,      &quot;number&quot;:&quot;&quot;},   &quot;connected&quot;:{      &quot;name&quot;:&quot;&quot;,      &quot;number&quot;:&quot;&quot;},   &quot;accountcode&quot;:&quot;&quot;,   &quot;dialplan&quot;:{      &quot;context&quot;:&quot;default&quot;,      &quot;exten&quot;:&quot;1000&quot;,      &quot;priority&quot;:3},   &quot;creationtime&quot;:&quot;2014-05-20T13:15:26.628-0500&quot;}</code></pre><p>   }</p></li></ol><p>##相关链接</p><ul><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+ARI" target="_blank" rel="noopener">Asterisk+13+ARI</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI" target="_blank" rel="noopener">Asterisk+12+ARI</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PjSip</title>
      <link href="/2015/03/04/%E5%B7%A5%E4%BD%9C-2015-03-04-PjSip/"/>
      <url>/2015/03/04/%E5%B7%A5%E4%BD%9C-2015-03-04-PjSip/</url>
      <content type="html"><![CDATA[<p>PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. It combines signaling protocol (SIP) with rich multimedia framework and NAT traversal functionality into high level API that is portable and suitable for almost any type of systems ranging from desktops, embedded systems, to mobile handsets.</p><p>PJSIP是一个免费且开源的多媒体通信库。</p><p><a href="http://www.pjsip.org/" target="_blank" rel="noopener">PjSip</a></p><p>##相关链接</p><ul><li><a href="http://blog.pjsip.org/" target="_blank" rel="noopener">pjsip blog</a></li><li><a href="http://trac.pjsip.org/repos/wiki/Getting-Started" target="_blank" rel="noopener">PJSIP 多平台支持</a></li><li><a href="http://trac.pjsip.org/repos/wiki/Getting-Started/iPhone" target="_blank" rel="noopener">iPhone</a></li><li><p><a href="http://trac.pjsip.org/repos/wiki/Getting-Started/Android" target="_blank" rel="noopener">Android</a><br>##<a href="http://svn.pjsip.org/repos/pjproject/trunk" target="_blank" rel="noopener">源码</a><br>顶级目录说明：</p></li><li><p>pjlib:       portability and basic framework library</p></li><li>pjlib-util:  lexical scanner, XML, STUN, MD5, DNS, etc.</li><li>pjmedia:     media framework and codecs</li><li>pjsip:       SIP stacks (core, UA layer, SIMPLE, etc.)</li><li>pjsip-apps:  SIP apps (pjsua, pjsip-perf)</li></ul><p>##编译</p><p>###[Linux]</p><ul><li><a href="http://trac.pjsip.org/repos/wiki/Getting-Started/Autoconf" target="_blank" rel="noopener">linux autoconf</a></li><li><a href="http://trac.pjsip.org/repos/wiki/Getting_Started_Using" target="_blank" rel="noopener">Building Application using PJSIP with GNU Tools</a>新建项目并引用头文件成功。</li></ul><p>###<a href="http://trac.pjsip.org/repos/wiki/Python_SIP/Build_Install" target="_blank" rel="noopener">Python</a></p><ul><li>pjsua2需要编译pjsip-apps/src/swig.不要sudo，因为root可能没有JAVA_HOME</li><li>pjsua 需要编译pjsip-apps/src/python。</li></ul><p>###问题和解决<br>fatal error: ‘portaudio.h’ file not found 在pjlib/include/pj/config_site.h 添加</p><pre><code>#define PJ_CONFIG_IPHONE 1#include &lt;pj/config_site_sample.h&gt;</code></pre><p>ld: symbol(s) not found for architecture armv7s <strong>不要用svn版本，下载发布版本</strong></p><p>###参考链接</p><ul><li><a href="http://stackoverflow.com/questions/20195542/python-how-to-get-the-import-pjsua-giving-no-module-named-pjsua" target="_blank" rel="noopener">No module named pjsua</a></li><li><a href="http://www.xianwenchen.com/blog/2014/06/09/how-to-make-an-ios-voip-app-with-pjsip-part-1/" target="_blank" rel="noopener">osx编译PJSIP</a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Asterisk 中的WebRTC</title>
      <link href="/2015/03/04/%E5%B7%A5%E4%BD%9C-2015-03-04-webRTC-JsSIP-Asterisk/"/>
      <url>/2015/03/04/%E5%B7%A5%E4%BD%9C-2015-03-04-webRTC-JsSIP-Asterisk/</url>
      <content type="html"><![CDATA[<p>通过websocket传输sip通信，浏览器进行语音和视频的编码或解码。实现在web界面中进行音频和视频通信。<a href="http://www.webrtc.org/" target="_blank" rel="noopener">webrtc</a>Asterisk中已集成Webrtc。</p><p>##Sip协议库</p><p>由于浏览器本身没有实行sip协议, 需要通过js实现。下面是基于js实现的sip协议栈.</p><ul><li><a href="https://code.google.com/p/sipml5/" target="_blank" rel="noopener">sipml5</a> doubango 团队实现的Html5 Web拨号应用.</li><li><a href="http://jssip.net/" target="_blank" rel="noopener">JsSIP</a></li><li><a href="http://sipjs.com/" target="_blank" rel="noopener">sipjs</a>是JsSIP的分支，实现了更多的特性. <a href="http://sipjs.com/guides/full-demo-app/" target="_blank" rel="noopener">Demo App</a></li></ul><p>###sipml5</p><ul><li><a href="http://sipml5.org/index.html" target="_blank" rel="noopener">项目主页</a></li><li><a href="http://www.sipml5.org/docgen/index.html" target="_blank" rel="noopener">编程指导</a></li><li><a href="http://sipml5.org/call.htm?svn=222" target="_blank" rel="noopener">在线测试</a>需要在高级设置中填写ws地址。</li></ul><p>###JsSIP</p><ul><li><a href="https://github.com/versatica/JsSIP" target="_blank" rel="noopener">github地址</a></li><li><a href="http://tryit.jssip.net/" target="_blank" rel="noopener">在线测试</a>需要本地pbx具有公网ip.也可以选择随机提供的帐号进行测试。</li><li><a href="https://github.com/opentelecoms-org/jssip-tryit-web-mirror" target="_blank" rel="noopener">jssip-tryit-web-mirror</a>是<a href="http://tryit.jssip.net/" target="_blank" rel="noopener">在线测试</a>的源码映射地址。</li></ul><p>##安装<br>安装大于11版本的<a href="https://wiki.asterisk.org/wiki/display/AST/Installing+Asterisk" target="_blank" rel="noopener">Asterisk</a>。</p><ul><li>下载<a href="https://github.com/opentelecoms-org/jssip-tryit-web-mirror" target="_blank" rel="noopener">jssip-tryit-web-mirror</a>。直接打开或放在tomcat或pbx中都可以。</li></ul><p>##问题汇总<br>问题描述和解决方法</p><p>###注册失败<br>404错误, WS URI添加后缀  /ws。可以通过</p><pre><code>CLI&gt; http show status</code></pre><p>查看ws是否开启。</p><h3 id="Rejecting-secure-audio"><a href="#Rejecting-secure-audio" class="headerlink" title="Rejecting secure audio"></a>Rejecting secure audio</h3><p>拨打电话立即挂断，后台输出如下</p><p>若出现</p><pre><code>[Feb 26 13:56:36] WARNING[11996][C-00000003]:chan_sip.c:10508 process_sdp: Rejecting secure audio stream without encryption details:audio 51935 RTP/SAVPF 111 103 104 9 0 8 106 105 13 126</code></pre><p>需要sip.conf中配置(需要生成对应的文件)</p><pre><code>dtlsenable=yes ; Tell Asterisk to enable DTLS for this peerdtlsverify=no ; Tell Asterisk to not verify your DTLS certsdtlscertfile=/etc/asterisk/keys/asterisk.pem ; Tell Asterisk where your DTLS cert file isdtlsprivatekey=/etc/asterisk/keys/asterisk.pem ; Tell Asterisk where your DTLS private key isdtlssetup=actpass ; Tell Asterisk to use actpass SDP parameter when setting up DTLS</code></pre><p>若出现</p><pre><code>[Feb 26 15:10:33] WARNING[1768][C-00000024]: chan_sip.c:10512 process_sdp: Rejecting secure video stream without encryption details: video 46409 RTP/SAVPF 100 116 117 96</code></pre><p>需要在在sip.conf中添加</p><pre><code>videosupport=yes</code></pre><h3 id="bad-media-description"><a href="#bad-media-description" class="headerlink" title="bad media description"></a>bad media description</h3><p>拨打后接听立即挂断,不能听见播放的声音。js后台显示</p><pre><code>Failed to parse audio codecs correctly</code></pre><p><a href="https://groups.google.com/forum/#!topic/sip_js/sqexozWaCL8" target="_blank" rel="noopener">https://groups.google.com/forum/#!topic/sip_js/sqexozWaCL8</a></p><p>设置</p><pre><code>force_avp=yes ; Force Asterisk to use avp. Introduced in Asterisk 11.11icesupport=yes ; Tell Asterisk to use ICE for this peer</code></pre><p>###通话过程没有声音<br><a href="http://forums.asterisk.org/viewtopic.php?f=1&amp;t=92119" target="_blank" rel="noopener">http://forums.asterisk.org/viewtopic.php?f=1&amp;t=92119</a><br> 编码冲突</p><p>###WebRtc Error<br>不能接听，后台显示</p><pre><code>ERROR:RTCPeerConnection setLocalDescription() | error: +6ms Failed to set local answer sdp: Failed to push down transport description: Offerer must use actpass value for setup attribute.</code></pre><p>点击hold按钮</p><pre><code>ERROR:RTCPeerConnection setRemoteDescription()  error: +10ms Failed to set remote answer sdp: Offer and answer descriptions m-lines are not matching. Rejecting answer.</code></pre><p>###自动挂断<br>后台显示</p><pre><code>Got SIP response 500 &quot;JsSIP Internal Error&quot;</code></pre><p>###不直接打开index.html<br>将应用放在静态web容器中。tomcat或python -m SimpleHttpServer</p><p>##参考链接</p><ul><li><a href="https://webrtc.freeswitch.org/verto/index.html" target="_blank" rel="noopener">基于sip.js的freewitch在线webrtc Demo</a></li><li><a href="http://www.reddit.com/r/VOIP/comments/2470d8/sipjs_is_a_new_open_source_javascript_sip_stack/" target="_blank" rel="noopener">sip.js是JsSIP分支,基于新的功能需求</a>还不知道功能不同点</li><li><a href="http://blog.csdn.net/yetyongjin/article/details/8563591" target="_blank" rel="noopener">Asterisk 11的Web RTC功能</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" target="_blank" rel="noopener">Asterisk+WebRTC+Support</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Building+and+Installing+pjproject" target="_blank" rel="noopener">Building+and+Installing+pjproject</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" target="_blank" rel="noopener">Asterisk+WebRTC+Support</a></li><li><a href="https://groups.google.com/forum/#!msg/jssip/kF-xHhmfs0U/F4z8x69MRo0J" target="_blank" rel="noopener">SetRemoteDescription failed: Failed to update session state.</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/WebRTC+tutorial+using+SIPML5" target="_blank" rel="noopener">WebRTC+tutorial+using+SIPML5</a></li><li><a href="https://wiki.asterisk.org/wiki/display/AST/Interactive+Connectivity+Establishment+%28ICE%29+in+Asterisk" target="_blank" rel="noopener"></a></li><li><a href="http://forums.digium.com/viewtopic.php?f=1&amp;t=90167" target="_blank" rel="noopener"></a></li><li><a href="http://forums.asterisk.org/viewtopic.php?f=1&amp;t=92119" target="_blank" rel="noopener"></a></li></ul>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android开源软件简介</title>
      <link href="/2015/02/05/%E5%B7%A5%E4%BD%9C-2015-02-05-AndroidSoft/"/>
      <url>/2015/02/05/%E5%B7%A5%E4%BD%9C-2015-02-05-AndroidSoft/</url>
      <content type="html"><![CDATA[<p>##App<br>或许可能会有用的App</p><p>###Xposed<br><a href="http://repo.xposed.info/" target="_blank" rel="noopener">Module</a><br>一个插件框架，可以自由修改系统UI。需要root</p><ul><li><a href="https://github.com/rovo89/XposedInstaller" target="_blank" rel="noopener">XposedInstaller</a></li><li><a href="https://github.com/rovo89/XposedBridge" target="_blank" rel="noopener">XposedBridge</a></li><li><a href="https://github.com/rovo89/Xposed" target="_blank" rel="noopener">Xposed</a></li></ul><p>###libsuperuser</p><ul><li><a href="https://github.com/Chainfire/libsuperuser" target="_blank" rel="noopener">调用su命令的库</a></li></ul><p>###shadowsocks-android<br>shadowsocks的android客户端实现，使用Scala。用于出墙.</p><ul><li><a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">shadowsocks-android</a></li></ul><p>###Google I/O Android App</p><ul><li><a href="https://github.com/google/iosched" target="_blank" rel="noopener">Google I/O Android App</a></li></ul><p>##Github<br>Github上的开源库。</p><ul><li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="noopener">android-open-project</a>  Github开源项目收集.</li></ul><p>###UI<br>关于各种UI控件</p><p>####<a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="noopener">SwipeMenuListView</a>不支持gradle或mvn</p><p><img src="https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif" alt="效果图"></p><p>####<a href="https://github.com/curioustechizen/android-ago" target="_blank" rel="noopener">android-ago</a>对TextView的时间进行更友好的显示。比如几分钟前，昨天，几月几号.</p><p><img src="https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png" alt="效果图"></p><p>###<a href="https://github.com/beworker/pinned-section-listview" target="_blank" rel="noopener">pinned-section-ListView</a>对listview的section悬靠在最顶端。</p><p><img src="https://github.com/beworker/pinned-section-listview/raw/master/screen2.png" alt="效果图"></p><p>###<a href="https://github.com/twotoasters/SectionCursorAdapter" target="_blank" rel="noopener">SectionCursorAdapter</a>对CursorAdapter的封装,实现section分割.</p><p><img src="https://github.com/twotoasters/SectionCursorAdapter/raw/master/screenshots/dialog.png" alt="效果图"></p><p>###<a href="https://github.com/etsy/AndroidStaggeredGrid" target="_blank" rel="noopener">AndroidStaggeredGrid</a>An Android staggered grid view which supports multiple columns with rows of varying sizes.</p><p><img src="https://camo.githubusercontent.com/a243ad5c2788730c40fc1d348e5ed85adb59c484/687474703a2f2f662e636c2e6c792f6974656d732f327a31423059304d3047304f326b316c334a30332f5472656e64696e672e706e67" alt="效果图"></p><p>###<a href="https://github.com/markushi/android-circlebutton" target="_blank" rel="noopener">android-circlebutton</a>Circle button widget for Android</p><p><img src="https://github.com/markushi/android-circlebutton/raw/master/example/example.gif" alt="效果图"></p><p>###<a href="https://github.com/keyboardsurfer/Crouton" target="_blank" rel="noopener">Crouton</a>Context sensitive notifications for Android</p><p><img src="https://github.com/keyboardsurfer/Crouton/raw/master/res/Confirm.png" alt="效果图"><br><img src="https://github.com/keyboardsurfer/Crouton/raw/master/res/Alert.png" alt="效果图"><br><img src="https://github.com/keyboardsurfer/Crouton/raw/master/res/Info.png" alt="效果图"></p><p>###<a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">PhotoView</a></p><p><img src="https://camo.githubusercontent.com/cf5bfb6d896604aa9156e3e1beee89e0754de7db/68747470733a2f2f7261772e6769746875622e636f6d2f636872697362616e65732f50686f746f566965772f6d61737465722f6865616465725f677261706869632e706e67mv" alt="效果图"></p><p>###<a href="https://github.com/JakeWharton/ActionBarSherlock" target="_blank" rel="noopener">ActionBarSherlock</a>Action bar implementation which uses the native action bar on Android 4.0+ and a custom implementation on pre-4.0 through a single API and theme.</p><p><img src="https://camo.githubusercontent.com/b21aae46566b05d5adbb1fa71b88708bc659e120/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67" alt="效果图"></p><p>###unitls</p><ul><li><a href="https://github.com/SnowdreamFramework/android-autoupdater" target="_blank" rel="noopener">android-autoupdater</a> 自动更新</li><li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">UIL</a> 图片缓存处理</li><li><a href="https://github.com/novoda/ImageLoader" target="_blank" rel="noopener">ImageLoader</a></li><li><a href="https://github.com/loopj/android-async-http" target="_blank" rel="noopener">android-async-http</a> An Asynchronous HTTP Library for Android </li><li><a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="noopener">http-request</a></li><li><a href="https://github.com/SnowdreamFramework/android-log" target="_blank" rel="noopener">android-log</a> Android 日志</li><li><a href="https://github.com/snowdream/android-multithread" target="_blank" rel="noopener">android-multithread</a></li><li><a href="https://github.com/SnowdreamFramework/android-downloader" target="_blank" rel="noopener">android-downloader</a></li><li><a href="https://code.google.com/p/google-gson/" target="_blank" rel="noopener">google-gson</a></li></ul>]]></content>
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
